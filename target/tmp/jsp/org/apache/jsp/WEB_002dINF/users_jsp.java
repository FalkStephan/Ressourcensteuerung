/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: jetty/11.0.15
 * Generated at: 2025-10-27 08:50:09 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class users_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

private static org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_0;

static {
  _jspx_fnmap_0= org.apache.jasper.runtime.ProtectedFunctionMapper.getMapForFunction("fn:escapeXml", org.apache.taglibs.standard.functions.Functions.class, "escapeXml", new Class[] {java.lang.String.class});
}

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("jar:file:/Users/falkstephan/.m2/repository/org/glassfish/web/jakarta.servlet.jsp.jstl/2.0.0/jakarta.servlet.jsp.jstl-2.0.0.jar!/META-INF/c.tld", Long.valueOf(1602866772000L));
    _jspx_dependants.put("file:/Users/falkstephan/.m2/repository/org/glassfish/web/jakarta.servlet.jsp.jstl/2.0.0/jakarta.servlet.jsp.jstl-2.0.0.jar", Long.valueOf(1602874032000L));
    _jspx_dependants.put("jar:file:/Users/falkstephan/.m2/repository/org/glassfish/web/jakarta.servlet.jsp.jstl/2.0.0/jakarta.servlet.jsp.jstl-2.0.0.jar!/META-INF/fn.tld", Long.valueOf(1602866772000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fscope_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fif_0026_005ftest;

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fscope_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fscope_005fnobody.release();
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.release();
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.release();
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.release();
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<style>\n");
      out.write("    .user-status-pill {\n");
      out.write("        display: inline-block; min-width: 70px; text-align: center; padding: 2px 14px;\n");
      out.write("        border-radius: 999px; font-size: 0.95em; border: 2px solid transparent; margin: 0 auto;\n");
      out.write("    }\n");
      out.write("    .user-status-aktiv { background: #e6ffe6; color: #218838; border-color: #28a745; }\n");
      out.write("    .user-status-inaktiv { background: #ffe6e6; color: #c82333; border-color: #dc3545; }\n");
      out.write("</style>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"de\">\n");
      out.write("<head>\n");
      out.write("    ");
      if (_jspx_meth_c_005fset_005f0(_jspx_page_context))
        return;
      out.write("\n");
      out.write("    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/_header.jsp", out, false);
      out.write("\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("    <div class=\"layout-wrapper\">\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/_nav.jsp", out, false);
      out.write("\n");
      out.write("        <main>\n");
      out.write("            <div class=\"container\">\n");
      out.write("                <h2>Benutzerverwaltung</h2>\n");
      out.write("                <button type=\"button\" class=\"button create\" onclick=\"showUserForm('add')\">Neuen Benutzer anlegen</button>\n");
      out.write("                <button type=\"button\" class=\"button create\" style=\"margin-left:1em;\"onclick=\"showImportModal()\">Benutzer importieren</button>\n");
      out.write("                <a href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/users/export\" class=\"button\" style=\"background:#007bff; color:#fff; margin-left:1em;\">Benutzer exportieren</a>\n");
      out.write("                <div id=\"importUserModal\" class=\"modal-overlay\" style=\"display:none;\">\n");
      out.write("                    <div class=\"modal-content\" style=\"max-width:400px;\">\n");
      out.write("                        <h3>Benutzer importieren</h3>\n");
      out.write("                        <form id=\"importUserForm\" method=\"post\" action=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/users/import\" enctype=\"multipart/form-data\">\n");
      out.write("                            <input type=\"file\" name=\"importFile\" id=\"importFile\" accept=\".csv,.xlsx,.xls,.txt\" required style=\"margin-bottom:1em;\"/>\n");
      out.write("                        <div style=\"margin-bottom:1em;\">\n");
      out.write("                            <label style=\"display:block; margin-bottom:0.5em;\">\n");
      out.write("                                <input type=\"checkbox\" name=\"import_new\" id=\"importNew\" checked>neue Benutzer importieren\n");
      out.write("                            </label>\n");
      out.write("                            <label style=\"display:block; margin-bottom:0.5em;\">\n");
      out.write("                                <input type=\"checkbox\" name=\"update_existing\" id=\"updateExisting\" checked>bestehende Benutzer aktualisieren\n");
      out.write("                            </label>\n");
      out.write("                            <label style=\"display:block;\">\n");
      out.write("                                <input type=\"checkbox\" name=\"deactivate_missing\" id=\"deactivateMissing\">nicht enthaltene Benutzer deaktivieren\n");
      out.write("                            </label>\n");
      out.write("                        </div>\n");
      out.write("                        <div class=\"modal-buttons\" style=\"display:flex; gap:0.5em;\">\n");
      out.write("                            <a href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/Muster.xlsx\" download class=\"button\" style=\"background:#007bff; color:#fff;\">Musterdatei herunterladen</a>\n");
      out.write("                            <button type=\"submit\" class=\"button create\">Datei importieren</button>\n");
      out.write("                            <button type=\"button\" class=\"button delete\" onclick=\"hideImportModal()\">Abbrechen</button>\n");
      out.write("                        </div>\n");
      out.write("                        </form>\n");
      out.write("                    </div>\n");
      out.write("                </div>\n");
      out.write("                <div id=\"importFeedbackModal\" class=\"modal-overlay\" style=\"display:none;\">\n");
      out.write("                    <div class=\"modal-content\" style=\"max-width:400px;\">\n");
      out.write("                        <h3>Import-Ergebnis</h3>\n");
      out.write("                        <div id=\"importFeedbackModalBody\"></div>\n");
      out.write("                        <div  class=\"modal-buttons\" style=\"margin-top:1em;\">\n");
      out.write("                            <button type=\"button\" class=\"button\" onclick=\"hideImportFeedbackModal()\">Schließen</button>\n");
      out.write("                        </div>\n");
      out.write("                    </div>\n");
      out.write("                </div>\n");
      out.write("\n");
      out.write("                <div class=\"search-container\">\n");
      out.write("                    <input type=\"text\" id=\"userSearch\"  onkeyup=\"filterTable()\" placeholder=\"Benutzer suchen...\">\n");
      out.write("                    <select id=\"statusFilter\" onchange=\"filterTable()\" style=\"margin-left:1em;\">\n");
      out.write("                        <option value=\"all\">Alle</option>\n");
      out.write("                        <option value=\"active\" selected>Nur aktive</option>\n");
      out.write("                        <option value=\"inactive\">Nur inaktive</option>\n");
      out.write("                    </select>\n");
      out.write("                    <select id=\"typeFilter\" onchange=\"filterTable()\" style=\"margin-left:1em;\">\n");
      out.write("                        <option value=\"all\">Alle</option>\n");
      out.write("                        <option value=\"user\">Nur Benutzer</option>\n");
      out.write("                    </select>\n");
      out.write("                    <button type=\"button\" class=\"button small\" style=\"margin-bottom:0.5em;\" onclick=\"showColModal()\">Spalten wählen</button>\n");
      out.write("                    <div id=\"colModal\" class=\"modal-overlay\" style=\"display:none;\">\n");
      out.write("                        <div class=\"modal-content\" style=\"max-width:420px;\">\n");
      out.write("                            <h3>Spalten ein-/ausblenden</h3>\n");
      out.write("                            <div id=\"columnSelector\" style=\"margin-left: 2em;\">\n");
      out.write("                                <label><input type=\"checkbox\" class=\"col-toggle\" data-col=\"0\" checked> ID</label>\n");
      out.write("                                <label><input type=\"checkbox\" class=\"col-toggle\" data-col=\"1\" checked> Mitarbeiterkennung</label>\n");
      out.write("                                <label><input type=\"checkbox\" class=\"col-toggle\" data-col=\"2\" checked> Name</label>\n");
      out.write("                                <label><input type=\"checkbox\" class=\"col-toggle\" data-col=\"3\" checked> Vorname</label>\n");
      out.write("                                <label><input type=\"checkbox\" class=\"col-toggle\" data-col=\"4\" checked> Stelle</label>\n");
      out.write("                                <label><input type=\"checkbox\" class=\"col-toggle\" data-col=\"5\" checked> Team</label>\n");
      out.write("                                <label><input type=\"checkbox\" class=\"col-toggle\" data-col=\"6\" checked> Benutzerverwaltung</label>\n");
      out.write("                                <label><input type=\"checkbox\" class=\"col-toggle\" data-col=\"7\" checked> Logbuch</label>\n");
      out.write("                                <label><input type=\"checkbox\" class=\"col-toggle\" data-col=\"8\" checked> Abteilung</label>\n");
      out.write("                            </div>\n");
      out.write("                            <div class=\"modal-buttons\"> \n");
      out.write("                                <button type=\"button\" class=\"button create\" onclick=\"hideColModal()\">OK</button>\n");
      out.write("                            </div>\n");
      out.write("                        </div>\n");
      out.write("                    </div>\n");
      out.write("                </div>\n");
      out.write("\n");
      out.write("                <table id=\"userTable\">\n");
      out.write("                    <thead>\n");
      out.write("                        <tr>\n");
      out.write("                            <th class=\"sortable-header\" onclick=\"sortTable(0, 'number')\">ID</th>\n");
      out.write("                            <th class=\"sortable-header\" onclick=\"sortTable(1, 'string')\">Mitarbeiterkennung</th>\n");
      out.write("                            <th class=\"sortable-header\" onclick=\"sortTable(2, 'string')\">Name</th>\n");
      out.write("                            <th class=\"sortable-header\" onclick=\"sortTable(3, 'string')\">Vorname</th>\n");
      out.write("                            <th class=\"sortable-header\" onclick=\"sortTable(4, 'string')\">Stelle</th>\n");
      out.write("                            <th class=\"sortable-header\" onclick=\"sortTable(5, 'string')\">Team</th>\n");
      out.write("                            <th class=\"sortable-header\" onclick=\"sortTable(6, 'string')\">Benutzerverwaltung</th>\n");
      out.write("                            <th class=\"sortable-header\" onclick=\"sortTable(7, 'string')\">Logbuch</th>\n");
      out.write("                            <th class=\"sortable-header\" onclick=\"sortTable(8, 'string')\">Abteilung</th>\n");
      out.write("                            <th class=\"sortable-header\" onclick=\"sortTable(9, 'string')\">Status</th>\n");
      out.write("                            <th>Aktionen</th>\n");
      out.write("                        </tr>\n");
      out.write("                    </thead>\n");
      out.write("                    <tbody>\n");
      out.write("                        ");
      if (_jspx_meth_c_005fforEach_005f0(_jspx_page_context))
        return;
      out.write("\n");
      out.write("                                ");
      if (_jspx_meth_c_005fif_005f2(_jspx_page_context))
        return;
      out.write("\n");
      out.write("                    </tbody>\n");
      out.write("                </table>\n");
      out.write("            </div>\n");
      out.write("        </main>\n");
      out.write("\n");
      out.write("        <div id=\"userModal\" class=\"modal-overlay\" style=\"display:none;\">\n");
      out.write("            <div class=\"modal-content\">\n");
      out.write("                <form id=\"userForm\" method=\"post\">\n");
      out.write("                    <input type=\"hidden\" name=\"id\" id=\"userFormId\" />\n");
      out.write("                    <input type=\"hidden\" name=\"action\" id=\"userFormAction\" value=\"add\" />\n");
      out.write("                    <div>\n");
      out.write("                        <label for=\"userFormUsername\">Mitarbeiterkennung<span class=\"required-star\">*</span>:</label>\n");
      out.write("                        <input type=\"text\" id=\"userFormUsername\" name=\"username\" required />\n");
      out.write("                    </div>\n");
      out.write("                    <div style=\"display: flex; gap: 1em;\">\n");
      out.write("                        <div style=\"flex:1;\">\n");
      out.write("                            <label for=\"userFormVorname\">Vorname<span class=\"required-star\">*</span>:</label>\n");
      out.write("                            <input type=\"text\" id=\"userFormVorname\" name=\"vorname\" required />\n");
      out.write("                        </div>\n");
      out.write("                        <div style=\"flex:1;\">\n");
      out.write("                            <label for=\"userFormName\">Name<span class=\"required-star\">*</span>:</label>\n");
      out.write("                            <input type=\"text\" id=\"userFormName\" name=\"name\" required />\n");
      out.write("                        </div>\n");
      out.write("                    </div>\n");
      out.write("                    <div style=\"display: flex; gap: 1em;\">\n");
      out.write("                        <div style=\"flex:1;\">\n");
      out.write("                            <label for=\"userFormAbteilung\">Abteilung:</label>\n");
      out.write("                            <input type=\"text\" id=\"userFormAbteilung\" name=\"abteilung\" />          \n");
      out.write("                        </div>\n");
      out.write("                        <div style=\"flex:1;\">\n");
      out.write("                            <label for=\"userFormTeam\">Team:</label>\n");
      out.write("                            <input type=\"text\" id=\"userFormTeam\" name=\"team\" />   \n");
      out.write("                        </div>\n");
      out.write("                    </div>\n");
      out.write("                    <div style=\"display: flex; gap: 1em; align-items: center;\">\n");
      out.write("                        <div style=\"flex:1;\">\n");
      out.write("                            <label for=\"userFormStelle\">Stelle:</label>\n");
      out.write("                            <input type=\"text\" id=\"userFormStelle\" name=\"stelle\" />         \n");
      out.write("                        </div>\n");
      out.write("                        <div style=\"flex:1; margin-top: 2em;\">\n");
      out.write("                            <label for=\"userFormActive\">\n");
      out.write("                                <input type=\"checkbox\" id=\"userFormActive\" name=\"active\"> Aktiv\n");
      out.write("                            </label>  \n");
      out.write("                        </div>\n");
      out.write("                    </div>\n");
      out.write("                    <div style=\"display: flex; gap: 1em; align-items: center;\">\n");
      out.write("                        <div style=\"flex:1;\">\n");
      out.write("                            <label for=\"userFormIsUser\">\n");
      out.write("                                <input type=\"checkbox\" id=\"userFormIsUser\" name=\"is_user\" value=\"on\" checked onchange=\"toggleUserFields()\"> ist Benutzer\n");
      out.write("                            </label>\n");
      out.write("                        </div>\n");
      out.write("                        <div style=\"flex:1;\" id=\"passwordFieldWrapper\">\n");
      out.write("                            <label for=\"userFormPassword\" id=\"passwordLabel\"></label>\n");
      out.write("                            <input type=\"password\" id=\"userFormPassword\" name=\"password\" />\n");
      out.write("                        </div>\n");
      out.write("                    </div>\n");
      out.write("                \n");
      out.write("                    <div id=\"rechteFieldWrapper\" style=\"margin-top: 1em;\">\n");
      out.write("                        <label style=\"display: block; margin-bottom: 10px; font-weight: bold;\">Rechte:</label>\n");
      out.write("                        \n");
      out.write("                        <div style=\"display: flex; gap: 1.5em;\">\n");
      out.write("                            <label><input type=\"checkbox\" id=\"userFormCanManageUsers\" name=\"can_manage_users\"> Benutzerverwaltung</label>\n");
      out.write("                            <label><input type=\"checkbox\" id=\"userFormSeeAllUsers\" name=\"see_all_users\"> Alle Benutzer sehen</label>\n");
      out.write("                        </div>\n");
      out.write("                        \n");
      out.write("                        <div style=\"display: flex; gap: 1.5em;\">\n");
      out.write("                            <label><input type=\"checkbox\" id=\"userFormCanManageCalendar\" name=\"can_manage_calendar\"> Abwesenheiten</label>\n");
      out.write("                            <label><input type=\"checkbox\" id=\"userFormCanManageCapacities\" name=\"can_manage_capacities\"> Kapazitäten</label>\n");
      out.write("                            <label><input type=\"checkbox\" id=\"userFormCanManageFeiertage\" name=\"can_manage_feiertage\"> Feiertage</label>\n");
      out.write("                        </div>\n");
      out.write("\n");
      out.write("                        <div style=\"display: flex; gap: 1.5em;\">\n");
      out.write("                            <label><input type=\"checkbox\" id=\"userFormCanManageTasks\" name=\"can_manage_tasks\"> Aufgaben</label>\n");
      out.write("                            <label><input type=\"checkbox\" id=\"userFormCanManageCalendarOverview\" name=\"can_manage_calendar_overview\"> Kalender</label>\n");
      out.write("                        </div>\n");
      out.write("\n");
      out.write("                        <div style=\"display: flex; gap: 1.5em;\">\n");
      out.write("                            <label><input type=\"checkbox\" id=\"userFormCanManageSettings\" name=\"can_manage_settings\"> Einstellungen</label>\n");
      out.write("                            <label><input type=\"checkbox\" id=\"userFormCanViewLogbook\" name=\"can_view_logbook\"> Logbuch</label>\n");
      out.write("                        </div>\n");
      out.write("                    </div>\n");
      out.write("               \n");
      out.write("                    <div class=\"modal-buttons\" style=\"margin-top: 2em;\">\n");
      out.write("                        <button type=\"submit\" class=\"button create\">Speichern</button>\n");
      out.write("                        <button type=\"button\" class=\"button delete\" onclick=\"hideUserModal()\">Abbrechen</button>\n");
      out.write("                    </div>\n");
      out.write("                </form>\n");
      out.write(" \n");
      out.write("            </div>\n");
      out.write("        </div>\n");
      out.write("\n");
      out.write("        <div id=\"deleteUserModal\" class=\"modal-overlay\" style=\"display:none;\">\n");
      out.write("            <div class=\"modal-content\">\n");
      out.write("                <p><strong id=\"deleteUserName\"></strong></p>\n");
      out.write("                <p id=\"deleteUserText\">Soll dieser Benutzer wirklich gelöscht werden?</p>\n");
      out.write("      \n");
      out.write("           <form id=\"deleteUserForm\" method=\"post\" action=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/users/delete\">\n");
      out.write("                    <input type=\"hidden\" name=\"id\" id=\"deleteUserId\" />\n");
      out.write("                    <div class=\"modal-buttons\">\n");
      out.write("                        <button type=\"submit\" class=\"button delete\">Ja, löschen</button>\n");
      out.write("              \n");
      out.write("           <button type=\"button\" class=\"button\" onclick=\"hideDeleteModal()\">Abbrechen</button>\n");
      out.write("                    </div>\n");
      out.write("                </form>\n");
      out.write("            </div>\n");
      out.write("        </div>\n");
      out.write("\n");
      out.write("<script>\n");
      out.write("        // --- Live-Suche ---\n");
      out.write("        function filterTable() {\n");
      out.write("            const searchInput = document.getElementById('userSearch');\n");
      out.write("            const statusFilter = document.getElementById('statusFilter');\n");
      out.write("            const typeFilter = document.getElementById('typeFilter');\n");
      out.write("\n");
      out.write("            const filter = searchInput.value.toLowerCase();\n");
      out.write("            const status = statusFilter.value;\n");
      out.write("            const type = typeFilter.value;\n");
      out.write("\n");
      out.write("            const table = document.getElementById('userTable');\n");
      out.write("            const tr = table.getElementsByTagName('tr');\n");
      out.write("\n");
      out.write("            for (let i = 1; i < tr.length; i++) { // Start bei 1, um den Header zu überspringen\n");
      out.write("                const tds = tr[i].getElementsByTagName('td');\n");
      out.write("                const usernameTd = tds[1];\n");
      out.write("                const statusTd = tds[9];\n");
      out.write("                \n");
      out.write("                if (usernameTd && statusTd) {\n");
      out.write("                    const username = usernameTd.textContent || usernameTd.innerText;\n");
      out.write("                    \n");
      out.write("                    // Text-Filter\n");
      out.write("                    const textMatch = username.toLowerCase().indexOf(filter) > -1;\n");
      out.write("\n");
      out.write("                    // Status-Filter\n");
      out.write("                    let statusMatch = true;\n");
      out.write("                    if (status !== 'all') {\n");
      out.write("                        const isActive = statusTd.querySelector('.user-status-aktiv') !== null;\n");
      out.write("                        statusMatch = (status === 'active' && isActive) || (status === 'inactive' && !isActive);\n");
      out.write("                    }\n");
      out.write("                    \n");
      out.write("                    // Typ-Filter\n");
      out.write("                    let typeMatch = true;\n");
      out.write("                    if (type === 'user') {\n");
      out.write("                        typeMatch = statusTd.querySelector('svg') !== null;\n");
      out.write("                    }\n");
      out.write("                    \n");
      out.write("                    if (textMatch && statusMatch && typeMatch) {\n");
      out.write("                        tr[i].style.display = \"\";\n");
      out.write("                    } else {\n");
      out.write("                        tr[i].style.display = \"none\";\n");
      out.write("                    }\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        // Initialer Aufruf, um die Standardeinstellung \"Nur aktive\" anzuwenden\n");
      out.write("        document.addEventListener('DOMContentLoaded', function() {\n");
      out.write("            filterTable();\n");
      out.write("        });\n");
      out.write("\n");
      out.write("\n");
      out.write("// --- Benutzer-Modal ---\n");
      out.write("        function showUserForm(mode, btn) {\n");
      out.write("        const modal = document.getElementById('userModal');\n");
      out.write("        const form = document.getElementById('userForm');\n");
      out.write("        \n");
      out.write("        form.action = \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/users\";\n");
      out.write("        document.getElementById('userFormPassword').required = (mode === 'add');\n");
      out.write("\n");
      out.write("        if (mode === 'add') {\n");
      out.write("            form.reset();\n");
      out.write("            document.getElementById('userFormAction').value = 'add';\n");
      out.write("            document.getElementById('userFormActive').checked = true;\n");
      out.write("            document.getElementById('userFormIsUser').checked = true;\n");
      out.write("        } else if (mode === 'edit' && btn) {\n");
      out.write("            form.reset();\n");
      out.write("            document.getElementById('userFormAction').value = 'edit';\n");
      out.write("            document.getElementById('userFormId').value = btn.dataset.id;\n");
      out.write("            document.getElementById('userFormUsername').value = btn.dataset.username;\n");
      out.write("            document.getElementById('userFormName').value = btn.dataset.name || '';\n");
      out.write("            document.getElementById('userFormVorname').value = btn.dataset.vorname || '';\n");
      out.write("            document.getElementById('userFormStelle').value = btn.dataset.stelle || '';\n");
      out.write("            document.getElementById('userFormTeam').value = btn.dataset.team || '';\n");
      out.write("            document.getElementById('userFormAbteilung').value = btn.dataset.abteilung || '';\n");
      out.write("            \n");
      out.write("            document.getElementById('userFormActive').checked = (btn.dataset.active === 'true');\n");
      out.write("            document.getElementById('userFormIsUser').checked = (btn.dataset.isUser === 'true');\n");
      out.write("            document.getElementById('userFormCanManageUsers').checked = (btn.dataset.canManageUsers === 'true');\n");
      out.write("            document.getElementById('userFormCanViewLogbook').checked = (btn.dataset.canViewLogbook === 'true');\n");
      out.write("            document.getElementById('userFormCanManageFeiertage').checked = (btn.dataset.canManageFeiertage === 'true');\n");
      out.write("            document.getElementById('userFormSeeAllUsers').checked = (btn.dataset.seeAllUsers === 'true');\n");
      out.write("            document.getElementById('userFormCanManageCalendar').checked = (btn.dataset.canManageCalendar === 'true');\n");
      out.write("            document.getElementById('userFormCanManageCapacities').checked = (btn.dataset.canManageCapacities === 'true');\n");
      out.write("            document.getElementById('userFormCanManageSettings').checked = (btn.dataset.canManageSettings === 'true');\n");
      out.write("            document.getElementById('userFormCanManageTasks').checked = (btn.dataset.canManageTasks === 'true');\n");
      out.write("            document.getElementById('userFormCanManageCalendarOverview').checked = (btn.dataset.canManageCalendarOverview === 'true');\n");
      out.write("        }\n");
      out.write("        toggleUserFields(); // Diese Funktion steuert jetzt die Passwort-Anforderung\n");
      out.write("            document.getElementById('userModal').style.display = 'flex';\n");
      out.write("    }\n");
      out.write("        function hideUserModal() {\n");
      out.write("            document.getElementById('userModal').style.display = 'none';\n");
      out.write(" }\n");
      out.write("\n");
      out.write("        // --- Löschen-Modal ---\n");
      out.write("        function showDeleteModal(btn) {\n");
      out.write("            const id = btn.getAttribute('data-id');\n");
      out.write(" const username = btn.getAttribute('data-username');\n");
      out.write("            document.getElementById('deleteUserId').value = id;\n");
      out.write("            document.getElementById('deleteUserName').textContent = username;\n");
      out.write("            document.getElementById('deleteUserText').innerHTML = 'Soll dieser Benutzer wirklich gelöscht werden?';\n");
      out.write(" document.getElementById('deleteUserModal').style.display = 'flex';\n");
      out.write("        }\n");
      out.write("        function hideDeleteModal() {\n");
      out.write("            document.getElementById('deleteUserModal').style.display = 'none';\n");
      out.write(" }\n");
      out.write("\n");
      out.write("        // --- Tabellen-Sortierung ---\n");
      out.write("        let currentSortColumn = -1;\n");
      out.write(" let currentSortDir = 'asc';\n");
      out.write("        function sortTable(columnIndex, type) {\n");
      out.write("            const table = document.getElementById('userTable');\n");
      out.write(" const tbody = table.querySelector('tbody');\n");
      out.write("            const rows = Array.from(tbody.querySelectorAll('tr'));\n");
      out.write("            const headers = table.querySelectorAll('.sortable-header');\n");
      out.write(" const sortDir = (columnIndex === currentSortColumn && currentSortDir === 'asc') ? 'desc' : 'asc';\n");
      out.write(" rows.sort((a, b) => {\n");
      out.write("                const cellA = a.querySelectorAll('td')[columnIndex].innerText.toLowerCase();\n");
      out.write("                const cellB = b.querySelectorAll('td')[columnIndex].innerText.toLowerCase();\n");
      out.write("                let valA = cellA;\n");
      out.write("                let valB = cellB;\n");
      out.write("                if (type === 'number') {\n");
      out.write(" \n");
      out.write("                    valA = parseInt(valA, 10) || 0;\n");
      out.write("                    valB = parseInt(valB, 10) || 0;\n");
      out.write("                }\n");
      out.write("                if (valA < valB) {\n");
      out.write("               \n");
      out.write("     return sortDir === 'asc' ? -1 : 1;\n");
      out.write("                }\n");
      out.write("                if (valA > valB) {\n");
      out.write("                    return sortDir === 'asc' ? 1 : -1;\n");
      out.write("                }\n");
      out.write("         \n");
      out.write("        return 0;\n");
      out.write("            });\n");
      out.write(" headers.forEach(header => header.classList.remove('asc', 'desc'));\n");
      out.write("            headers[columnIndex].classList.add(sortDir);\n");
      out.write("            tbody.innerHTML = '';\n");
      out.write("            rows.forEach(row => tbody.appendChild(row));\n");
      out.write("            currentSortColumn = columnIndex;\n");
      out.write("            currentSortDir = sortDir;\n");
      out.write(" }\n");
      out.write("        // --- Spaltenauswahl-Modal ---\n");
      out.write("        function showColModal() {\n");
      out.write("            document.getElementById('colModal').style.display = 'flex';\n");
      out.write(" }\n");
      out.write("        function hideColModal() {\n");
      out.write("            document.getElementById('colModal').style.display = 'none';\n");
      out.write(" }\n");
      out.write("        // --- Spaltenauswahl anwenden ---\n");
      out.write("        function applyColPrefs() {\n");
      out.write("            const colChecks = document.querySelectorAll('.col-toggle');\n");
      out.write(" const table = document.getElementById('userTable');\n");
      out.write("            if (!table) return;\n");
      out.write("            const ths = table.querySelectorAll('thead th');\n");
      out.write(" colChecks.forEach((cb, idx) => {\n");
      out.write("                if (ths[idx]) ths[idx].style.display = cb.checked ? '' : 'none';\n");
      out.write("            });\n");
      out.write(" const trs = table.querySelectorAll('tbody tr');\n");
      out.write("            trs.forEach(tr => {\n");
      out.write("                const tds = tr.querySelectorAll('td');\n");
      out.write("                colChecks.forEach((cb, idx) => {\n");
      out.write("                    if (tds[idx]) tds[idx].style.display = cb.checked ? '' : 'none';\n");
      out.write("                });\n");
      out.write("           \n");
      out.write("  });\n");
      out.write("        }\n");
      out.write("        // Eventlistener für Spaltenauswahl\n");
      out.write("        document.addEventListener('DOMContentLoaded', function() {\n");
      out.write("            document.querySelectorAll('.col-toggle').forEach(cb => {\n");
      out.write("                cb.addEventListener('change', function() {\n");
      out.write("                    applyColPrefs();\n");
      out.write("                });\n");
      out.write("         \n");
      out.write("    });\n");
      out.write("            applyColPrefs();\n");
      out.write("        });\n");
      out.write(" // --- Import-Modal ---\n");
      out.write("        function showImportModal() {\n");
      out.write("            document.getElementById('importUserModal').style.display = 'flex';\n");
      out.write(" }\n");
      out.write("        function hideImportModal() {\n");
      out.write("            document.getElementById('importUserModal').style.display = 'none';\n");
      out.write(" }\n");
      out.write("        // --- Import-Feedback-Modal ---\n");
      out.write("        function showImportFeedbackModal() {\n");
      out.write("            document.getElementById('importFeedbackModal').style.display = 'flex';\n");
      out.write(" }\n");
      out.write("        function hideImportFeedbackModal() {\n");
      out.write("            document.getElementById('importFeedbackModal').style.display = 'none';\n");
      out.write(" }\n");
      out.write("\n");
      out.write("        // --- AJAX-Upload für Import und Feedback-Anzeige ---\n");
      out.write("        document.addEventListener('DOMContentLoaded', function() {\n");
      out.write("            var importForm = document.getElementById('importUserForm');\n");
      out.write("            if(importForm) {\n");
      out.write("                importForm.addEventListener('submit', function(e) {\n");
      out.write("                    e.preventDefault();\n");
      out.write("         \n");
      out.write("           var formData = new FormData(importForm);\n");
      out.write("                    fetch(importForm.action, {\n");
      out.write("                        method: 'POST',\n");
      out.write("                        body: formData\n");
      out.write("              \n");
      out.write("       })\n");
      out.write("                    .then(response => response.text())\n");
      out.write("                    .then(html => {\n");
      out.write("                        document.getElementById('importFeedbackModalBody').innerHTML = html;\n");
      out.write("                        \n");
      out.write(" hideImportModal();\n");
      out.write("                        showImportFeedbackModal();\n");
      out.write("                    })\n");
      out.write("                    .catch(err => {\n");
      out.write("                        document.getElementById('importFeedbackModalBody').innerHTML = '<div class=\"import-feedback-error\">Fehler beim Upload</div>';\n");
      out.write(" hideImportModal();\n");
      out.write("                        showImportFeedbackModal();\n");
      out.write("                    });\n");
      out.write("                });\n");
      out.write("            }\n");
      out.write("        });\n");
      out.write(" // --- Felder ein-/ausblenden je nach \"ist Benutzer\" ---\n");
      out.write("        // (Logik für is_user entfernt)\n");
      out.write("        function toggleUserFields() {\n");
      out.write("            const isUser = document.getElementById('userFormIsUser').checked;\n");
      out.write("            const isAddMode = document.getElementById('userFormAction').value === 'add';\n");
      out.write("            const passwordInput = document.getElementById('userFormPassword');\n");
      out.write("            const passwordLabel = document.getElementById('passwordLabel');\n");
      out.write("\n");
      out.write("            document.getElementById('passwordFieldWrapper').style.display = isUser ? '' : 'none';\n");
      out.write("            document.getElementById('rechteFieldWrapper').style.display = isUser ? '' : 'none';\n");
      out.write("\n");
      out.write("            // KORREKTUR: Das Passwort ist nur dann erforderlich, wenn ein neuer Benutzer angelegt wird.\n");
      out.write("            if (isUser && isAddMode) {\n");
      out.write("                passwordLabel.innerHTML = 'Passwort<span class=\"required-star\">*</span>:';\n");
      out.write("                passwordInput.required = true;\n");
      out.write("            } else {\n");
      out.write("                passwordLabel.innerHTML = 'Neues Passwort (optional):';\n");
      out.write("                passwordInput.required = false;\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write(" // Auch beim Öffnen Modal setzen:\n");
      out.write("        // (Diese zweite Definition wird entfernt, die Logik ist bereits in der ersten showUserForm enthalten)\n");
      out.write("    </script>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fset_005f0(jakarta.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    //  c:set
    org.apache.taglibs.standard.tag.rt.core.SetTag _jspx_th_c_005fset_005f0 = (org.apache.taglibs.standard.tag.rt.core.SetTag) _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fscope_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.SetTag.class);
    boolean _jspx_th_c_005fset_005f0_reused = false;
    try {
      _jspx_th_c_005fset_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fset_005f0.setParent(null);
      // /WEB-INF/users.jsp(15,4) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setVar("title");
      // /WEB-INF/users.jsp(15,4) name = value type = jakarta.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setValue(new org.apache.jasper.el.JspValueExpression("/WEB-INF/users.jsp(15,4) 'Benutzerverwaltung'",_jsp_getExpressionFactory().createValueExpression("Benutzerverwaltung",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      // /WEB-INF/users.jsp(15,4) name = scope type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setScope("request");
      int _jspx_eval_c_005fset_005f0 = _jspx_th_c_005fset_005f0.doStartTag();
      if (_jspx_th_c_005fset_005f0.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fscope_005fnobody.reuse(_jspx_th_c_005fset_005f0);
      _jspx_th_c_005fset_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fset_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fset_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fforEach_005f0(jakarta.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    jakarta.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f0 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f0_reused = false;
    try {
      _jspx_th_c_005fforEach_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f0.setParent(null);
      // /WEB-INF/users.jsp(111,24) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setVar("u");
      // /WEB-INF/users.jsp(111,24) name = items type = jakarta.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/users.jsp(111,24) '${users}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${users}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      int[] _jspx_push_body_count_c_005fforEach_005f0 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f0 = _jspx_th_c_005fforEach_005f0.doStartTag();
        if (_jspx_eval_c_005fforEach_005f0 != jakarta.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\n");
            out.write("                            <tr>\n");
            out.write("                                <td>");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${u.id}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</td>\n");
            out.write("                                <td> ");
            if (_jspx_meth_c_005fout_005f0(_jspx_th_c_005fforEach_005f0, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f0))
              return true;
            out.write("</td>\n");
            out.write("                                <td>");
            if (_jspx_meth_c_005fout_005f1(_jspx_th_c_005fforEach_005f0, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f0))
              return true;
            out.write("</td>\n");
            out.write("                                <td>");
            if (_jspx_meth_c_005fout_005f2(_jspx_th_c_005fforEach_005f0, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f0))
              return true;
            out.write("</td>\n");
            out.write("                                <td>");
            if (_jspx_meth_c_005fout_005f3(_jspx_th_c_005fforEach_005f0, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f0))
              return true;
            out.write("</td>\n");
            out.write("                                <td>");
            if (_jspx_meth_c_005fout_005f4(_jspx_th_c_005fforEach_005f0, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f0))
              return true;
            out.write("</td>\n");
            out.write("                                <td>");
            if (_jspx_meth_c_005fout_005f5(_jspx_th_c_005fforEach_005f0, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f0))
              return true;
            out.write("</td>\n");
            out.write("                                <td>");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${u.can_manage_users ? 'Ja' : 'Nein'}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</td>\n");
            out.write("                                <td>");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${u.can_view_logbook ? 'Ja' : 'Nein'}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</td>\n");
            out.write("                                <td style=\"text-align: center; vertical-align: middle;\"> \n");
            out.write("                                    ");
            if (_jspx_meth_c_005fif_005f0(_jspx_th_c_005fforEach_005f0, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f0))
              return true;
            out.write("\n");
            out.write("                                    <span class=\"user-status-pill ");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${u.active ? 'user-status-aktiv' : 'user-status-inaktiv'}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write('"');
            out.write('>');
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${u.active ? 'Aktiv' : 'Inaktiv'}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</span>\n");
            out.write("                                </td>\n");
            out.write("                                <td>\n");
            out.write("                                    <button type=\"button\" class=\"button small\" onclick=\"showUserForm('edit', this)\"\n");
            out.write("                                        data-id=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${u.id}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\"\n");
            out.write("                                        data-username=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${u.username}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\"\n");
            out.write("                                        data-name=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${u.name}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\"\n");
            out.write("                                        data-vorname=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${u.vorname}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\"\n");
            out.write("                                        data-stelle=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${u.stelle}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\"\n");
            out.write("                                        data-team=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${u.team}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\"\n");
            out.write("                                        data-abteilung=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${u.abteilung}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\"\n");
            out.write("                                        data-active=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${u.active}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\"\n");
            out.write("                                        data-is-user=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${u.is_user}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\"\n");
            out.write("                                        data-can-manage-users=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${u.can_manage_users}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\"\n");
            out.write("                                        data-can-view-logbook=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${u.can_view_logbook}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\"\n");
            out.write("                                        data-can-manage-feiertage=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${u.can_manage_feiertage}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\"\n");
            out.write("                                        data-see-all-users=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${u.see_all_users}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\"\n");
            out.write("                                        data-can-manage-calendar=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${u.can_manage_calendar}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\"\n");
            out.write("                                        data-can-manage-capacities=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${u.can_manage_capacities}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\"\n");
            out.write("                                        data-can-manage-settings=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${u.can_manage_settings}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\"\n");
            out.write("                                        data-can-manage-tasks=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${u.can_manage_tasks}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\"\n");
            out.write("                                        data-can-manage-calendar-overview=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${u.can_manage_calendar_overview}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\">\n");
            out.write("                                        Bearbeiten\n");
            out.write("                                    </button>\n");
            out.write("                                    ");
            if (_jspx_meth_c_005fif_005f1(_jspx_th_c_005fforEach_005f0, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f0))
              return true;
            out.write("\n");
            out.write("                                </td>\n");
            out.write("                            </tr>\n");
            out.write("                            ");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f0.doAfterBody();
            if (evalDoAfterBody != jakarta.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f0.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f0[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f0.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f0.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f0);
      _jspx_th_c_005fforEach_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fout_005f0(jakarta.servlet.jsp.tagext.JspTag _jspx_th_c_005fforEach_005f0, jakarta.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f0)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    //  c:out
    org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f0 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
    boolean _jspx_th_c_005fout_005f0_reused = false;
    try {
      _jspx_th_c_005fout_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f0.setParent((jakarta.servlet.jsp.tagext.Tag) _jspx_th_c_005fforEach_005f0);
      // /WEB-INF/users.jsp(114,37) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f0.setValue((java.lang.Object) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${u.username}", java.lang.Object.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      int _jspx_eval_c_005fout_005f0 = _jspx_th_c_005fout_005f0.doStartTag();
      if (_jspx_th_c_005fout_005f0.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f0);
      _jspx_th_c_005fout_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fout_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fout_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fout_005f1(jakarta.servlet.jsp.tagext.JspTag _jspx_th_c_005fforEach_005f0, jakarta.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f0)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    //  c:out
    org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f1 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
    boolean _jspx_th_c_005fout_005f1_reused = false;
    try {
      _jspx_th_c_005fout_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f1.setParent((jakarta.servlet.jsp.tagext.Tag) _jspx_th_c_005fforEach_005f0);
      // /WEB-INF/users.jsp(115,36) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f1.setValue((java.lang.Object) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${u.name}", java.lang.Object.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      int _jspx_eval_c_005fout_005f1 = _jspx_th_c_005fout_005f1.doStartTag();
      if (_jspx_th_c_005fout_005f1.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f1);
      _jspx_th_c_005fout_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fout_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fout_005f1_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fout_005f2(jakarta.servlet.jsp.tagext.JspTag _jspx_th_c_005fforEach_005f0, jakarta.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f0)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    //  c:out
    org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f2 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
    boolean _jspx_th_c_005fout_005f2_reused = false;
    try {
      _jspx_th_c_005fout_005f2.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f2.setParent((jakarta.servlet.jsp.tagext.Tag) _jspx_th_c_005fforEach_005f0);
      // /WEB-INF/users.jsp(116,36) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f2.setValue((java.lang.Object) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${u.vorname}", java.lang.Object.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      int _jspx_eval_c_005fout_005f2 = _jspx_th_c_005fout_005f2.doStartTag();
      if (_jspx_th_c_005fout_005f2.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f2);
      _jspx_th_c_005fout_005f2_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fout_005f2, _jsp_getInstanceManager(), _jspx_th_c_005fout_005f2_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fout_005f3(jakarta.servlet.jsp.tagext.JspTag _jspx_th_c_005fforEach_005f0, jakarta.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f0)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    //  c:out
    org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f3 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
    boolean _jspx_th_c_005fout_005f3_reused = false;
    try {
      _jspx_th_c_005fout_005f3.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f3.setParent((jakarta.servlet.jsp.tagext.Tag) _jspx_th_c_005fforEach_005f0);
      // /WEB-INF/users.jsp(117,36) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f3.setValue((java.lang.Object) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${u.abteilung}", java.lang.Object.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      int _jspx_eval_c_005fout_005f3 = _jspx_th_c_005fout_005f3.doStartTag();
      if (_jspx_th_c_005fout_005f3.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f3);
      _jspx_th_c_005fout_005f3_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fout_005f3, _jsp_getInstanceManager(), _jspx_th_c_005fout_005f3_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fout_005f4(jakarta.servlet.jsp.tagext.JspTag _jspx_th_c_005fforEach_005f0, jakarta.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f0)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    //  c:out
    org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f4 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
    boolean _jspx_th_c_005fout_005f4_reused = false;
    try {
      _jspx_th_c_005fout_005f4.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f4.setParent((jakarta.servlet.jsp.tagext.Tag) _jspx_th_c_005fforEach_005f0);
      // /WEB-INF/users.jsp(118,36) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f4.setValue((java.lang.Object) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${u.team}", java.lang.Object.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      int _jspx_eval_c_005fout_005f4 = _jspx_th_c_005fout_005f4.doStartTag();
      if (_jspx_th_c_005fout_005f4.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f4);
      _jspx_th_c_005fout_005f4_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fout_005f4, _jsp_getInstanceManager(), _jspx_th_c_005fout_005f4_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fout_005f5(jakarta.servlet.jsp.tagext.JspTag _jspx_th_c_005fforEach_005f0, jakarta.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f0)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    //  c:out
    org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f5 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
    boolean _jspx_th_c_005fout_005f5_reused = false;
    try {
      _jspx_th_c_005fout_005f5.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f5.setParent((jakarta.servlet.jsp.tagext.Tag) _jspx_th_c_005fforEach_005f0);
      // /WEB-INF/users.jsp(119,36) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f5.setValue((java.lang.Object) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${u.stelle}", java.lang.Object.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      int _jspx_eval_c_005fout_005f5 = _jspx_th_c_005fout_005f5.doStartTag();
      if (_jspx_th_c_005fout_005f5.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f5);
      _jspx_th_c_005fout_005f5_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fout_005f5, _jsp_getInstanceManager(), _jspx_th_c_005fout_005f5_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fif_005f0(jakarta.servlet.jsp.tagext.JspTag _jspx_th_c_005fforEach_005f0, jakarta.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f0)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    jakarta.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f0 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f0_reused = false;
    try {
      _jspx_th_c_005fif_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f0.setParent((jakarta.servlet.jsp.tagext.Tag) _jspx_th_c_005fforEach_005f0);
      // /WEB-INF/users.jsp(123,36) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${u.is_user}", boolean.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f0 = _jspx_th_c_005fif_005f0.doStartTag();
      if (_jspx_eval_c_005fif_005f0 != jakarta.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\n");
          out.write("                                        <span title=\"Benutzerkonto\" style=\"margin-right:4px; color:");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${u.see_all_users ? '#e74c3c' : '#007bff'}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("; vertical-align:middle;\">\n");
          out.write("                                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" style=\"vertical-align:middle;\"><path d=\"M20 21v-2a4 4 0 0 0-3-3.87\"/><path d=\"M4 21v-2a4 4 0 0 1 3-3.87\"/><circle cx=\"12\" cy=\"7\" r=\"4\"/></svg>\n");
          out.write("                                        </span>\n");
          out.write("                                    ");
          int evalDoAfterBody = _jspx_th_c_005fif_005f0.doAfterBody();
          if (evalDoAfterBody != jakarta.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f0.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f0);
      _jspx_th_c_005fif_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fif_005f1(jakarta.servlet.jsp.tagext.JspTag _jspx_th_c_005fforEach_005f0, jakarta.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f0)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    jakarta.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f1 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f1_reused = false;
    try {
      _jspx_th_c_005fif_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f1.setParent((jakarta.servlet.jsp.tagext.Tag) _jspx_th_c_005fforEach_005f0);
      // /WEB-INF/users.jsp(152,36) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f1.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sessionScope.user.username != u.username}", boolean.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f1 = _jspx_th_c_005fif_005f1.doStartTag();
      if (_jspx_eval_c_005fif_005f1 != jakarta.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\n");
          out.write("                                        <form action=\"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("/users/delete\" method=\"post\" style=\"display:inline;\" class=\"delete-form\">\n");
          out.write("                                            <input type=\"hidden\" name=\"id\" value=\"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${u.id}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("\">\n");
          out.write("                                                <button type=\"button\" class=\"button small delete\" onclick=\"showDeleteModal(this)\"\n");
          out.write("                                                    data-id=\"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${u.id}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("\" \n");
          out.write("                                                    data-username=\"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${fn:escapeXml(u.username)}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
          out.write("\">\n");
          out.write("                                                    Löschen\n");
          out.write("                                                </button>\n");
          out.write("                                        </form>\n");
          out.write("                                    ");
          int evalDoAfterBody = _jspx_th_c_005fif_005f1.doAfterBody();
          if (evalDoAfterBody != jakarta.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f1.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f1);
      _jspx_th_c_005fif_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f1_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fif_005f2(jakarta.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    jakarta.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f2 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f2_reused = false;
    try {
      _jspx_th_c_005fif_005f2.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f2.setParent(null);
      // /WEB-INF/users.jsp(165,32) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f2.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${empty users}", boolean.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f2 = _jspx_th_c_005fif_005f2.doStartTag();
      if (_jspx_eval_c_005fif_005f2 != jakarta.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\n");
          out.write("                                    <tr>\n");
          out.write("                                        <td colspan=\"6\" style=\"text-align: center;\">Keine Benutzer gefunden.</td>\n");
          out.write("                                    </tr>\n");
          out.write("                                ");
          int evalDoAfterBody = _jspx_th_c_005fif_005f2.doAfterBody();
          if (evalDoAfterBody != jakarta.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f2.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f2);
      _jspx_th_c_005fif_005f2_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f2, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f2_reused);
    }
    return false;
  }
}
