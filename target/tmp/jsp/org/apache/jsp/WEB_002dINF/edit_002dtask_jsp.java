/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: jetty/11.0.15
 * Generated at: 2025-08-26 09:08:26 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class edit_002dtask_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("jar:file:/Users/falkstephan/.m2/repository/org/glassfish/web/jakarta.servlet.jsp.jstl/2.0.0/jakarta.servlet.jsp.jstl-2.0.0.jar!/META-INF/c.tld", Long.valueOf(1602866772000L));
    _jspx_dependants.put("jar:file:/Users/falkstephan/.m2/repository/org/glassfish/web/jakarta.servlet.jsp.jstl/2.0.0/jakarta.servlet.jsp.jstl-2.0.0.jar!/META-INF/fmt.tld", Long.valueOf(1602866772000L));
    _jspx_dependants.put("file:/Users/falkstephan/.m2/repository/org/glassfish/web/jakarta.servlet.jsp.jstl/2.0.0/jakarta.servlet.jsp.jstl-2.0.0.jar", Long.valueOf(1602874032000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fscope_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fif_0026_005ftest;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fchoose;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fotherwise;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems;

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fscope_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fchoose = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fotherwise = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fscope_005fnobody.release();
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.release();
    _005fjspx_005ftagPool_005fc_005fchoose.release();
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.release();
    _005fjspx_005ftagPool_005fc_005fotherwise.release();
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.release();
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"de\">\n");
      out.write("<head>\n");
      out.write("    ");
      if (_jspx_meth_c_005fset_005f0(_jspx_page_context))
        return;
      out.write("\n");
      out.write("    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/_header.jsp", out, false);
      out.write("\n");
      out.write("    <style>\n");
      out.write("        .assigned-users-section {\n");
      out.write("            margin-top: 1.5em;\n");
      out.write("            border-top: 1px solid #ddd;\n");
      out.write("            padding-top: 1em;\n");
      out.write("        }\n");
      out.write("        .assigned-user {\n");
      out.write("            display: flex;\n");
      out.write("            align-items: center;\n");
      out.write("            gap: 1em;\n");
      out.write("            margin: 0.5em 0;\n");
      out.write("            padding: 0.5em;\n");
      out.write("            background: #f5f5f5;\n");
      out.write("            border-radius: 4px;\n");
      out.write("        }\n");
      out.write("        .assigned-user span {\n");
      out.write("            flex-grow: 1;\n");
      out.write("        }\n");
      out.write("        .form-grid {\n");
      out.write("            display: grid;\n");
      out.write("            grid-template-columns: 1fr 1fr;\n");
      out.write("            gap: 1.5em;\n");
      out.write("            margin-bottom: 1.5em;\n");
      out.write("        }\n");
      out.write("        .form-grid > div {\n");
      out.write("            margin-bottom: 1em;\n");
      out.write("        }\n");
      out.write("        .form-grid label {\n");
      out.write("            display: block;\n");
      out.write("            margin-bottom: 0.5em;\n");
      out.write("        }\n");
      out.write("        .form-grid input,\n");
      out.write("        .form-grid select {\n");
      out.write("            width: 100%;\n");
      out.write("        }\n");
      out.write("        .full-width {\n");
      out.write("            grid-column: 1 / -1;\n");
      out.write("        }\n");
      out.write("        .assigned-user input[type=\"number\"] {\n");
      out.write("            width: 80px;\n");
      out.write("            margin: 0 1em;\n");
      out.write("            padding: 0.25em;\n");
      out.write("            border: 1px solid #ddd;\n");
      out.write("            border-radius: 4px;\n");
      out.write("        }\n");
      out.write("        .assigned-user input[type=\"number\"]:focus {\n");
      out.write("            border-color: #007bff;\n");
      out.write("            outline: none;\n");
      out.write("        }\n");
      out.write("    </style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<div class=\"layout-wrapper\">\n");
      out.write("    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/_nav.jsp", out, false);
      out.write("\n");
      out.write("    <main>\n");
      out.write("        <div class=\"container\">\n");
      out.write("            <h2>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${task.id != null ? 'Aufgabe bearbeiten' : 'Neue Aufgabe'}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</h2>\n");
      out.write("            \n");
      out.write("            <form id=\"taskForm\" method=\"post\" action=\"tasks\">\n");
      out.write("                <input type=\"hidden\" name=\"action\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${task.id != null ? 'edit' : 'add'}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"/>\n");
      out.write("                ");
      if (_jspx_meth_c_005fif_005f0(_jspx_page_context))
        return;
      out.write("\n");
      out.write("                \n");
      out.write("                <div class=\"form-grid\">\n");
      out.write("                    <div class=\"full-width\">\n");
      out.write("                        <label for=\"taskName\">Name:</label>\n");
      out.write("                        <input type=\"text\" name=\"name\" id=\"taskName\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${task.name}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" required/>\n");
      out.write("                    </div>\n");
      out.write("                    \n");
      out.write("                    <div>\n");
      out.write("                        <label for=\"taskAbteilung\">Abteilung:</label>\n");
      out.write("                        ");
      if (_jspx_meth_c_005fchoose_005f0(_jspx_page_context))
        return;
      out.write("\n");
      out.write("                    </div>\n");
      out.write("                    \n");
      out.write("                    <div>\n");
      out.write("                        <label for=\"taskStatus\">Status:</label>\n");
      out.write("                        <select name=\"status_id\" id=\"taskStatus\" required>\n");
      out.write("                            ");
      if (_jspx_meth_c_005fforEach_005f0(_jspx_page_context))
        return;
      out.write("\n");
      out.write("                        </select>\n");
      out.write("                    </div>\n");
      out.write("                    \n");
      out.write("                    <div>\n");
      out.write("                        <label for=\"taskStartDate\">Start-Datum:</label>\n");
      out.write("                        <input type=\"date\" name=\"start_date\" id=\"taskStartDate\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${task.start_date}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"/>\n");
      out.write("                    </div>\n");
      out.write("                    \n");
      out.write("                    <div>\n");
      out.write("                        <label for=\"taskEndDate\">Ende-Datum:</label>\n");
      out.write("                        <input type=\"date\" name=\"end_date\" id=\"taskEndDate\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${task.end_date}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"/>\n");
      out.write("                    </div>\n");
      out.write("                    \n");
      out.write("                    <div>\n");
      out.write("                        <label for=\"taskEffort\">Aufwand (PT):</label>\n");
      out.write("                        <input type=\"number\" step=\"0.1\" name=\"effort_days\" id=\"taskEffort\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${task.effort_days}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" required/>\n");
      out.write("                    </div>\n");
      out.write("                    \n");
      out.write("                    <div>\n");
      out.write("                        <label for=\"taskProgress\">Fortschritt (%):</label>\n");
      out.write("                        <input type=\"number\" name=\"progress_percent\" id=\"taskProgress\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${task.progress_percent}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" min=\"0\" max=\"100\" required/>\n");
      out.write("                    </div>\n");
      out.write("                </div>\n");
      out.write("                \n");
      out.write("                <div class=\"assigned-users-section\">\n");
      out.write("                    <h3>Zugewiesene Benutzer</h3>\n");
      out.write("                    <div id=\"assignedUsersContainer\">\n");
      out.write("                        <!-- Wird dynamisch befüllt -->\n");
      out.write("                    </div>\n");
      out.write("                    <div style=\"margin-top: 1em;\">\n");
      out.write("                        <button type=\"button\" class=\"button\" onclick=\"showUserSelectDialog()\">Benutzer hinzufügen</button>\n");
      out.write("                    </div>\n");
      out.write("                </div>\n");
      out.write("                \n");
      out.write("                <div style=\"margin-top: 2em;\">\n");
      out.write("                    <button type=\"submit\" class=\"button create\">Speichern</button>\n");
      out.write("                    <a href=\"tasks\" class=\"button delete\">Abbrechen</a>\n");
      out.write("                </div>\n");
      out.write("            </form>\n");
      out.write("        </div>\n");
      out.write("    </main>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<dialog id=\"userSelectDialog\">\n");
      out.write("    <h3>Benutzer auswählen</h3>\n");
      out.write("    <div style=\"margin: 1em 0;\">\n");
      out.write("        <select id=\"userSelect\">\n");
      out.write("            ");
      if (_jspx_meth_c_005fforEach_005f1(_jspx_page_context))
        return;
      out.write("\n");
      out.write("        </select>\n");
      out.write("    </div>\n");
      out.write("    <div class=\"dialog-buttons\">\n");
      out.write("        <button class=\"button create\" onclick=\"assignSelectedUser()\">Hinzufügen</button>\n");
      out.write("        <button class=\"button delete\" onclick=\"closeUserSelectDialog()\">Abbrechen</button>\n");
      out.write("    </div>\n");
      out.write("</dialog>\n");
      out.write("\n");
      out.write("<script>\n");
      out.write("let assignedUsers = [];\n");
      out.write("\n");
      out.write("// Beim Laden der Seite\n");
      out.write("document.addEventListener('DOMContentLoaded', function() {\n");
      out.write("    // Wenn eine Task-ID vorhanden ist, lade die zugewiesenen Benutzer\n");
      out.write("    const taskId = document.querySelector('input[name=\"id\"]')?.value;\n");
      out.write("    if (taskId) {\n");
      out.write("        loadAssignedUsers(taskId);\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    // Form Submit Handler\n");
      out.write("    document.getElementById('taskForm').addEventListener('submit', async function(e) {\n");
      out.write("        e.preventDefault();\n");
      out.write("        \n");
      out.write("        try {\n");
      out.write("            // Erst die Task speichern und auf die Antwort warten\n");
      out.write("            const taskFormData = new FormData(this);\n");
      out.write("            const response = await fetch('tasks', {\n");
      out.write("                method: 'POST',\n");
      out.write("                body: taskFormData\n");
      out.write("            });\n");
      out.write("            \n");
      out.write("            if (!response.ok) throw new Error('Task konnte nicht gespeichert werden');\n");
      out.write("            \n");
      out.write("            // Wenn es eine neue Task ist, hole die ID\n");
      out.write("            let taskId = document.querySelector('input[name=\"id\"]')?.value;\n");
      out.write("            if (!taskId) {\n");
      out.write("                const result = await fetch('tasks?action=getLastInsertedTaskId').then(r => r.json());\n");
      out.write("                taskId = result.taskId;\n");
      out.write("            }\n");
      out.write("            \n");
      out.write("            // Dann die Benutzerzuweisungen speichern\n");
      out.write("            // Vorbereitung der Zuweisungsdaten für den Server\n");
      out.write("            const userAssignments = new URLSearchParams();\n");
      out.write("            userAssignments.append('action', 'saveAssignments');\n");
      out.write("            userAssignments.append('taskId', taskId);\n");
      out.write("            userAssignments.append('count', assignedUsers.length.toString());\n");
      out.write("            \n");
      out.write("            // Debug-Logging der zu sendenden Daten\n");
      out.write("            console.log('Zugewiesene Benutzer:', assignedUsers);\n");
      out.write("            \n");
      out.write("            // Füge die Benutzer-Zuweisungen hinzu\n");
      out.write("            assignedUsers.forEach((user, index) => {\n");
      out.write("                const idx = index.toString();\n");
      out.write("                userAssignments.append('userId_' + idx, user.id);\n");
      out.write("                userAssignments.append('effortDays_' + idx, (parseFloat(user.effort_days) || 0).toString());\n");
      out.write("                \n");
      out.write("                // Debug-Logging für jeden Benutzer\n");
      out.write("                console.log(`Benutzer ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${index}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(":`, {\n");
      out.write("                    userId: user.id,\n");
      out.write("                    effortDays: parseFloat(user.effort_days) || 0\n");
      out.write("                });\n");
      out.write("            });\n");
      out.write("            \n");
      out.write("            console.log('Sende URLSearchParams:', userAssignments.toString());\n");
      out.write("            \n");
      out.write("            // Speichere die Benutzerzuweisungen\n");
      out.write("            const assignmentResponse = await fetch('tasks', {\n");
      out.write("                method: 'POST',\n");
      out.write("                headers: {\n");
      out.write("                    'Content-Type': 'application/x-www-form-urlencoded'\n");
      out.write("                },\n");
      out.write("                body: userAssignments.toString()\n");
      out.write("            });\n");
      out.write("            \n");
      out.write("            if (!assignmentResponse.ok) {\n");
      out.write("                throw new Error('Benutzerzuweisungen konnten nicht gespeichert werden');\n");
      out.write("            }\n");
      out.write("            \n");
      out.write("            // Zurück zur Übersicht\n");
      out.write("            window.location.href = 'tasks';\n");
      out.write("            \n");
      out.write("        } catch (error) {\n");
      out.write("            console.error('Fehler beim Speichern:', error);\n");
      out.write("            alert('Fehler beim Speichern: ' + error.message);\n");
      out.write("        }\n");
      out.write("    });\n");
      out.write("});\n");
      out.write("\n");
      out.write("async function loadUserDetails(userId) {\n");
      out.write("    try {\n");
      out.write("        // Prüfe und konvertiere userId\n");
      out.write("        if (!userId || userId === 'undefined' || userId === 'null') {\n");
      out.write("            throw new Error('Ungültige userId');\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        // Stelle sicher, dass userId ein String ist\n");
      out.write("        const userIdStr = userId.toString();\n");
      out.write("        \n");
      out.write("        // Prüfe ob die ID nur Zahlen enthält\n");
      out.write("        if (!/^\\d+$/.test(userIdStr)) {\n");
      out.write("            throw new Error('Ungültige userId: Muss eine Zahl sein');\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        const response = await fetch(`tasks?action=getUserDetails&userId=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${userIdStr}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("`);\n");
      out.write("        \n");
      out.write("        if (!response.ok) {\n");
      out.write("            let errorMessage = 'Fehler beim Laden der Benutzerdaten';\n");
      out.write("            try {\n");
      out.write("                const errorData = await response.json();\n");
      out.write("                if (errorData && errorData.error) {\n");
      out.write("                    errorMessage = errorData.error;\n");
      out.write("                }\n");
      out.write("            } catch (e) {\n");
      out.write("                console.warn('Konnte Fehlermeldung nicht parsen:', e);\n");
      out.write("            }\n");
      out.write("            throw new Error(errorMessage);\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        const data = await response.json();\n");
      out.write("        \n");
      out.write("        // Validiere die erhaltenen Daten\n");
      out.write("        if (!data || typeof data !== 'object') {\n");
      out.write("            throw new Error('Ungültiges Datenformat empfangen');\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        if (!data.id || !data.name) {\n");
      out.write("            throw new Error('Unvollständige Benutzerdaten empfangen');\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        return {\n");
      out.write("            id: data.id,\n");
      out.write("            name: data.name || 'N/A',\n");
      out.write("            vorname: data.vorname || '',\n");
      out.write("            abteilung: data.abteilung || ''\n");
      out.write("        };\n");
      out.write("        \n");
      out.write("    } catch (error) {\n");
      out.write("        console.error('Fehler beim Laden der Benutzerdaten:', error);\n");
      out.write("        throw error;\n");
      out.write("    }\n");
      out.write("}\n");
      out.write("\n");
      out.write("async function loadAssignedUsers(taskId) {\n");
      out.write("    if (!taskId) {\n");
      out.write("        console.error('Keine Task-ID angegeben');\n");
      out.write("        return;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    try {\n");
      out.write("        const response = await fetch('tasks?action=getAssignedUsers&taskId=' + taskId);\n");
      out.write("        if (!response.ok) {\n");
      out.write("            throw new Error('Fehler beim Laden der zugewiesenen Benutzer');\n");
      out.write("        }\n");
      out.write("        const users = await response.json();\n");
      out.write("        \n");
      out.write("        if (!Array.isArray(users)) {\n");
      out.write("            throw new Error('Ungültiges Datenformat für zugewiesene Benutzer');\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        // Für jeden Benutzer die Details laden\n");
      out.write("        const detailedUsers = [];\n");
      out.write("        for (const user of users) {\n");
      out.write("            if (!user || !user.id) {\n");
      out.write("                console.warn('Ungültige Benutzerdaten übersprungen:', user);\n");
      out.write("                continue;\n");
      out.write("            }\n");
      out.write("            \n");
      out.write("            try {\n");
      out.write("                const details = await loadUserDetails(user.id.toString()); // ID explizit als String\n");
      out.write("                if (details && details.id) {\n");
      out.write("                    detailedUsers.push({\n");
      out.write("                        ...user,\n");
      out.write("                        name: details.name || 'N/A',\n");
      out.write("                        vorname: details.vorname || '',\n");
      out.write("                        abteilung: details.abteilung || ''\n");
      out.write("                    });\n");
      out.write("                } else {\n");
      out.write("                    console.warn(`Keine gültigen Details für Benutzer ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${user.id}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(" erhalten`);\n");
      out.write("                }\n");
      out.write("            } catch (error) {\n");
      out.write("                console.error(`Fehler beim Laden der Details für Benutzer ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${user.id}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(":`, error);\n");
      out.write("                // Füge den Benutzer mit minimalen Informationen hinzu\n");
      out.write("                detailedUsers.push({\n");
      out.write("                    ...user,\n");
      out.write("                    name: 'Nicht verfügbar',\n");
      out.write("                    vorname: '',\n");
      out.write("                    abteilung: ''\n");
      out.write("                });\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        assignedUsers = detailedUsers;\n");
      out.write("        updateAssignedUsersDisplay();\n");
      out.write("    } catch (error) {\n");
      out.write("        console.error('Fehler beim Laden der zugewiesenen Benutzer:', error);\n");
      out.write("        alert('Fehler beim Laden der zugewiesenen Benutzer: ' + error.message);\n");
      out.write("    }\n");
      out.write("}\n");
      out.write("\n");
      out.write("function showUserSelectDialog() {\n");
      out.write("    document.getElementById('userSelectDialog').showModal();\n");
      out.write("}\n");
      out.write("\n");
      out.write("function closeUserSelectDialog() {\n");
      out.write("    document.getElementById('userSelectDialog').close();\n");
      out.write("}\n");
      out.write("\n");
      out.write("async function assignSelectedUser() {\n");
      out.write("    const select = document.getElementById('userSelect');\n");
      out.write("    const userId = select.value;\n");
      out.write("    \n");
      out.write("    // Prüfen ob der Benutzer bereits zugewiesen ist\n");
      out.write("    if (assignedUsers.some(u => u.id == userId)) {\n");
      out.write("        return;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    // Lade die Benutzerdaten vom Server\n");
      out.write("    const userDetails = await loadUserDetails(userId);\n");
      out.write("    if (userDetails) {\n");
      out.write("        assignedUsers.push({\n");
      out.write("            id: userId,\n");
      out.write("            name: userDetails.name,\n");
      out.write("            vorname: userDetails.vorname,\n");
      out.write("            abteilung: userDetails.abteilung,\n");
      out.write("            effort_days: 0\n");
      out.write("        });\n");
      out.write("        updateAssignedUsersDisplay();\n");
      out.write("    } else {\n");
      out.write("        alert('Fehler beim Laden der Benutzerdaten');\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    closeUserSelectDialog();\n");
      out.write("}\n");
      out.write("\n");
      out.write("function removeAssignedUser(userId) {\n");
      out.write("    assignedUsers = assignedUsers.filter(user => user.id != userId);\n");
      out.write("    updateAssignedUsersDisplay();\n");
      out.write("}\n");
      out.write("\n");
      out.write("function updateAssignedUsersDisplay() {\n");
      out.write("    const container = document.getElementById('assignedUsersContainer');\n");
      out.write("    container.innerHTML = '';\n");
      out.write("    \n");
      out.write("    if (assignedUsers.length === 0) {\n");
      out.write("        container.innerHTML = '<p>Keine Benutzer zugewiesen</p>';\n");
      out.write("        return;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    assignedUsers.forEach(user => {\n");
      out.write("        const div = document.createElement('div');\n");
      out.write("        div.className = 'assigned-user';\n");
      out.write("        \n");
      out.write("        const span = document.createElement('span');\n");
      out.write("        \n");
      out.write("        // Anzeige der Benutzerdaten\n");
      out.write("        if (user.vorname && user.abteilung) {\n");
      out.write("            span.textContent = `");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${user.name}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(',');
      out.write(' ');
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${user.vorname}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(' ');
      out.write('(');
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${user.abteilung}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(")`;\n");
      out.write("        } else {\n");
      out.write("            span.textContent = user.name;\n");
      out.write("        }\n");
      out.write("        div.appendChild(span);\n");
      out.write("        \n");
      out.write("        // Aufwand Input-Feld\n");
      out.write("        const effortInput = document.createElement('input');\n");
      out.write("        effortInput.type = 'number';\n");
      out.write("        effortInput.step = '0.5';\n");
      out.write("        effortInput.min = '0';\n");
      out.write("        effortInput.value = user.effort_days || 0;\n");
      out.write("        effortInput.style.width = '80px';\n");
      out.write("        effortInput.onchange = (e) => {\n");
      out.write("            user.effort_days = parseFloat(e.target.value) || 0;\n");
      out.write("        };\n");
      out.write("        div.appendChild(effortInput);\n");
      out.write("        \n");
      out.write("        const button = document.createElement('button');\n");
      out.write("        button.type = 'button';\n");
      out.write("        button.className = 'button small delete';\n");
      out.write("        button.onclick = () => removeAssignedUser(user.id);\n");
      out.write("        button.textContent = 'Benutzer Entfernen';\n");
      out.write("        div.appendChild(button);\n");
      out.write("        \n");
      out.write("        container.appendChild(div);\n");
      out.write("    });\n");
      out.write("}\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fset_005f0(jakarta.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    //  c:set
    org.apache.taglibs.standard.tag.rt.core.SetTag _jspx_th_c_005fset_005f0 = (org.apache.taglibs.standard.tag.rt.core.SetTag) _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fscope_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.SetTag.class);
    boolean _jspx_th_c_005fset_005f0_reused = false;
    try {
      _jspx_th_c_005fset_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fset_005f0.setParent(null);
      // /WEB-INF/edit-task.jsp(7,4) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setVar("title");
      // /WEB-INF/edit-task.jsp(7,4) name = value type = jakarta.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setValue(new org.apache.jasper.el.JspValueExpression("/WEB-INF/edit-task.jsp(7,4) '${task.id != null ? 'Aufgabe bearbeiten' : 'Neue Aufgabe'}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${task.id != null ? 'Aufgabe bearbeiten' : 'Neue Aufgabe'}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      // /WEB-INF/edit-task.jsp(7,4) name = scope type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setScope("request");
      int _jspx_eval_c_005fset_005f0 = _jspx_th_c_005fset_005f0.doStartTag();
      if (_jspx_th_c_005fset_005f0.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fscope_005fnobody.reuse(_jspx_th_c_005fset_005f0);
      _jspx_th_c_005fset_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fset_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fset_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fif_005f0(jakarta.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    jakarta.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f0 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f0_reused = false;
    try {
      _jspx_th_c_005fif_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f0.setParent(null);
      // /WEB-INF/edit-task.jsp(69,16) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${task.id != null}", boolean.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f0 = _jspx_th_c_005fif_005f0.doStartTag();
      if (_jspx_eval_c_005fif_005f0 != jakarta.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\n");
          out.write("                    <input type=\"hidden\" name=\"id\" value=\"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${task.id}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("\"/>\n");
          out.write("                ");
          int evalDoAfterBody = _jspx_th_c_005fif_005f0.doAfterBody();
          if (evalDoAfterBody != jakarta.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f0.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f0);
      _jspx_th_c_005fif_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fchoose_005f0(jakarta.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    jakarta.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:choose
    org.apache.taglibs.standard.tag.common.core.ChooseTag _jspx_th_c_005fchoose_005f0 = (org.apache.taglibs.standard.tag.common.core.ChooseTag) _005fjspx_005ftagPool_005fc_005fchoose.get(org.apache.taglibs.standard.tag.common.core.ChooseTag.class);
    boolean _jspx_th_c_005fchoose_005f0_reused = false;
    try {
      _jspx_th_c_005fchoose_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fchoose_005f0.setParent(null);
      int _jspx_eval_c_005fchoose_005f0 = _jspx_th_c_005fchoose_005f0.doStartTag();
      if (_jspx_eval_c_005fchoose_005f0 != jakarta.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\n");
          out.write("                            ");
          if (_jspx_meth_c_005fwhen_005f0(_jspx_th_c_005fchoose_005f0, _jspx_page_context))
            return true;
          out.write("\n");
          out.write("                            ");
          if (_jspx_meth_c_005fotherwise_005f0(_jspx_th_c_005fchoose_005f0, _jspx_page_context))
            return true;
          out.write("\n");
          out.write("                        ");
          int evalDoAfterBody = _jspx_th_c_005fchoose_005f0.doAfterBody();
          if (evalDoAfterBody != jakarta.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fchoose_005f0.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fchoose.reuse(_jspx_th_c_005fchoose_005f0);
      _jspx_th_c_005fchoose_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fchoose_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fchoose_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f0(jakarta.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, jakarta.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    jakarta.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f0 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    boolean _jspx_th_c_005fwhen_005f0_reused = false;
    try {
      _jspx_th_c_005fwhen_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fwhen_005f0.setParent((jakarta.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
      // /WEB-INF/edit-task.jsp(82,28) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fwhen_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sessionScope.user.see_all_users}", boolean.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fwhen_005f0 = _jspx_th_c_005fwhen_005f0.doStartTag();
      if (_jspx_eval_c_005fwhen_005f0 != jakarta.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\n");
          out.write("                                <input type=\"text\" name=\"abteilung\" id=\"taskAbteilung\" value=\"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${task.abteilung}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("\" />\n");
          out.write("                            ");
          int evalDoAfterBody = _jspx_th_c_005fwhen_005f0.doAfterBody();
          if (evalDoAfterBody != jakarta.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fwhen_005f0.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f0);
      _jspx_th_c_005fwhen_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fwhen_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fwhen_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fotherwise_005f0(jakarta.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, jakarta.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    jakarta.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:otherwise
    org.apache.taglibs.standard.tag.common.core.OtherwiseTag _jspx_th_c_005fotherwise_005f0 = (org.apache.taglibs.standard.tag.common.core.OtherwiseTag) _005fjspx_005ftagPool_005fc_005fotherwise.get(org.apache.taglibs.standard.tag.common.core.OtherwiseTag.class);
    boolean _jspx_th_c_005fotherwise_005f0_reused = false;
    try {
      _jspx_th_c_005fotherwise_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fotherwise_005f0.setParent((jakarta.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
      int _jspx_eval_c_005fotherwise_005f0 = _jspx_th_c_005fotherwise_005f0.doStartTag();
      if (_jspx_eval_c_005fotherwise_005f0 != jakarta.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\n");
          out.write("                                <input type=\"text\" name=\"abteilung\" id=\"taskAbteilung\" value=\"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sessionScope.user.abteilung}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("\" readonly />\n");
          out.write("                            ");
          int evalDoAfterBody = _jspx_th_c_005fotherwise_005f0.doAfterBody();
          if (evalDoAfterBody != jakarta.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fotherwise_005f0.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fotherwise.reuse(_jspx_th_c_005fotherwise_005f0);
      _jspx_th_c_005fotherwise_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fotherwise_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fotherwise_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fforEach_005f0(jakarta.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    jakarta.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f0 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f0_reused = false;
    try {
      _jspx_th_c_005fforEach_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f0.setParent(null);
      // /WEB-INF/edit-task.jsp(94,28) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setVar("status");
      // /WEB-INF/edit-task.jsp(94,28) name = items type = jakarta.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/edit-task.jsp(94,28) '${taskStatuses}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${taskStatuses}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      int[] _jspx_push_body_count_c_005fforEach_005f0 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f0 = _jspx_th_c_005fforEach_005f0.doStartTag();
        if (_jspx_eval_c_005fforEach_005f0 != jakarta.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\n");
            out.write("                                <option value=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${status.id}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write('"');
            out.write(' ');
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${task.status_id == status.id ? 'selected' : ''}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write(">\n");
            out.write("                                    ");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${status.name}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\n");
            out.write("                                </option>\n");
            out.write("                            ");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f0.doAfterBody();
            if (evalDoAfterBody != jakarta.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f0.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f0[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f0.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f0.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f0);
      _jspx_th_c_005fforEach_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fforEach_005f1(jakarta.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    jakarta.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f1 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f1_reused = false;
    try {
      _jspx_th_c_005fforEach_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f1.setParent(null);
      // /WEB-INF/edit-task.jsp(146,12) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f1.setVar("user");
      // /WEB-INF/edit-task.jsp(146,12) name = items type = jakarta.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f1.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/edit-task.jsp(146,12) '${availableUsers}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${availableUsers}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      int[] _jspx_push_body_count_c_005fforEach_005f1 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f1 = _jspx_th_c_005fforEach_005f1.doStartTag();
        if (_jspx_eval_c_005fforEach_005f1 != jakarta.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\n");
            out.write("                <option value=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${user.id}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write('"');
            out.write('>');
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${user.name}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write(',');
            out.write(' ');
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${user.vorname}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write(' ');
            out.write('(');
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${user.abteilung}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write(")</option>\n");
            out.write("            ");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f1.doAfterBody();
            if (evalDoAfterBody != jakarta.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f1.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f1[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f1.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f1.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f1);
      _jspx_th_c_005fforEach_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f1_reused);
    }
    return false;
  }
}
