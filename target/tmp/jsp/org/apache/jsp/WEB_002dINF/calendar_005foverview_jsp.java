/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: jetty/11.0.15
 * Generated at: 2025-10-27 08:40:54 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class calendar_005foverview_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("jar:file:/Users/falkstephan/.m2/repository/org/glassfish/web/jakarta.servlet.jsp.jstl/2.0.0/jakarta.servlet.jsp.jstl-2.0.0.jar!/META-INF/c.tld", Long.valueOf(1602866772000L));
    _jspx_dependants.put("jar:file:/Users/falkstephan/.m2/repository/org/glassfish/web/jakarta.servlet.jsp.jstl/2.0.0/jakarta.servlet.jsp.jstl-2.0.0.jar!/META-INF/fmt.tld", Long.valueOf(1602866772000L));
    _jspx_dependants.put("file:/Users/falkstephan/.m2/repository/org/glassfish/web/jakarta.servlet.jsp.jstl/2.0.0/jakarta.servlet.jsp.jstl-2.0.0.jar", Long.valueOf(1602874032000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fscope_005fnobody;

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fscope_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fscope_005fnobody.release();
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"de\">\n");
      out.write("<head>\n");
      out.write("    ");
      if (_jspx_meth_c_005fset_005f0(_jspx_page_context))
        return;
      out.write("\n");
      out.write("    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/_header.jsp", out, false);
      out.write("\n");
      out.write("    <style>\n");
      out.write("        .calendar-container {\n");
      out.write("            overflow-x: auto;\n");
      out.write("            margin-top: 1em;\n");
      out.write("        }\n");
      out.write("        .calendar-grid {\n");
      out.write("            border-collapse: collapse;\n");
      out.write("            min-width: 100%;\n");
      out.write("        }\n");
      out.write("        .calendar-grid th, .calendar-grid td {\n");
      out.write("            border: 1px solid #ddd;\n");
      out.write("            padding: 4px;\n");
      out.write("            text-align: center;\n");
      out.write("            min-width: 30px;\n");
      out.write("        }\n");
      out.write("        .calendar-grid th {\n");
      out.write("            background-color: #f5f5f5;\n");
      out.write("            position: sticky;\n");
      out.write("            top: 0;\n");
      out.write("            z-index: 1;\n");
      out.write("        }\n");
      out.write("        /* Farben werden dynamisch per JavaScript gesetzt*/\n");
      out.write("        .calendar-grid td.weekend,\n");
      out.write("        .calendar-grid td.holiday,\n");
      out.write("        .calendar-grid td.workday,\n");
      out.write("        \n");
      out.write("        \n");
      out.write("        \n");
      out.write("        .calendar-grid td.absence {\n");
      out.write("            transition: background-color 0.3s ease;\n");
      out.write("        }\n");
      out.write("        .calendar-controls {\n");
      out.write("            margin-bottom: 1em;\n");
      out.write("            display: flex;\n");
      out.write("            gap: 1em;\n");
      out.write("            align-items: center;\n");
      out.write("        }\n");
      out.write("        .employee-name {\n");
      out.write("            position: sticky;\n");
      out.write("            left: 0;\n");
      out.write("            background: white;\n");
      out.write("            z-index: 2;\n");
      out.write("            font-weight: bold;\n");
      out.write("            border-right: 2px solid #ddd;\n");
      out.write("            padding-left: 10px !important;\n");
      out.write("            text-align: left !important;\n");
      out.write("        }\n");
      out.write("        .department-header {\n");
      out.write("            background-color: #f0f0f0;\n");
      out.write("            font-weight: bold;\n");
      out.write("            text-align: left !important;\n");
      out.write("            padding-left: 5px !important;\n");
      out.write("        }\n");
      out.write("        .department-header td {\n");
      out.write("            border-top: 2px solid #999 !important;\n");
      out.write("            border-bottom: 2px solid #999 !important;\n");
      out.write("            text-align: left !important;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        /* NEU: Markierung für den aktuellen Tag */\n");
      out.write("        .today-marker-header {\n");
      out.write("            background-color: #fff9c4 !important; /* Leichtes Gelb für den Header */\n");
      out.write("            box-shadow: inset 0 0 4px rgba(204, 172, 0, 0.6);\n");
      out.write("        }\n");
      out.write("        .today-marker-cell {\n");
      out.write("            /* Ein auffälligerer linker/rechter Rand für alle Zellen in der Spalte */\n");
      out.write("            border-left: 2px solid #FBC02D !important;\n");
      out.write("            border-right: 2px solid #FBC02D !important;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        /* NEU: Markierung für die aktuelle Woche */\n");
      out.write("        .current-week-header {\n");
      out.write("            background-color: #fff9c4 !important; /* Leichtes Gelb für den Header */\n");
      out.write("            box-shadow: inset 0 0 4px rgba(204, 172, 0, 0.6);\n");
      out.write("        }\n");
      out.write("        .current-week-cell {\n");
      out.write("            /* Ein auffälligerer linker/rechter Rand für alle Zellen in der Spalte */\n");
      out.write("            border-left: 2px solid #FBC02D !important;\n");
      out.write("            border-right: 2px solid #FBC02D !important;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .view-options {\n");
      out.write("            display: flex;\n");
      out.write("            gap: 1.5em; /* Abstand zwischen den Checkboxen */\n");
      out.write("            margin-bottom: 1em; /* Abstand nach unten */\n");
      out.write("            flex-wrap: wrap; /* Sorgt für Umbruch auf kleineren Bildschirmen */\n");
      out.write("        }\n");
      out.write("\n");
      out.write("\n");
      out.write("        .detail-row {\n");
      out.write("            padding: 2px 8px; /* Reduziert den vertikalen und horizontalen Abstand in der Zelle */\n");
      out.write("            line-height: 1.2; /* Verringert den Zeilenabstand */     \n");
      out.write("            font-size: 0.85em; /* Macht die Schrift etwas kleiner */\n");
      out.write("            color: #333;     /* Etwas dunklere Schrift für bessere Lesbarkeit */    \n");
      out.write("        }\n");
      out.write("       \n");
      out.write("        .detail-row .highlight {\n");
      out.write("            background-color: #dbd000; /* Ein leichtes Türkis als Hintergrund */\n");
      out.write("            /* font-weight: bold; */\n");
      out.write("            color: #8a8300;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        /* Macht die Aufgaben-Zeile klickbar */\n");
      out.write("        .detail-row.expandable {\n");
      out.write("            cursor: pointer;\n");
      out.write("        }\n");
      out.write("        .detail-row.expandable:hover {\n");
      out.write("            background-color: #f0e6c8;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .detail-row-label {\n");
      out.write("            font-style: italic;\n");
      out.write("            font-weight: normal !important; /* WICHTIG: Überschreibt die fette Schrift */\n");
      out.write("            text-align: right !important;\n");
      out.write("            padding-right: 10px !important;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("        /* Styling für die neuen Detailzeilen */\n");
      out.write("        .task-detail-row td {\n");
      out.write("            font-size: 0.75em;\n");
      out.write("            padding: 1px 4px;\n");
      out.write("            background-color: #fff;\n");
      out.write("            border-bottom: 1px dotted #ccc;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .task-detail-name {\n");
      out.write("            text-align: right !important;\n");
      out.write("            padding-right: 15px !important;\n");
      out.write("            color: #555;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .summary-row {\n");
      out.write("            border-top: 2px solid #333; /* Eine dicke Linie zur Abgrenzung */\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .summary-row td {\n");
      out.write("            font-weight: bold;\n");
      out.write("            background-color: #e9ecef; /* Ein leichter Grauton */\n");
      out.write("            padding: 2px 8px; /* Reduziert den vertikalen und horizontalen Abstand in der Zelle */\n");
      out.write("            line-height: 1.2; /* Verringert den Zeilenabstand */     \n");
      out.write("            font-size: 0.85em; /* Macht die Schrift etwas kleiner */\n");
      out.write("            color: #333;     /* Etwas dunklere Schrift für bessere Lesbarkeit */   \n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .summary-label {\n");
      out.write("            font-style: italic;\n");
      out.write("            font-weight: normal;\n");
      out.write("            font-size: 0.85em; /* Macht die Schrift etwas kleiner */\n");
      out.write("            text-align: right !important;\n");
      out.write("            padding-right: 10px !important;\n");
      out.write("        }\n");
      out.write("    </style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("    <div class=\"layout-wrapper\">\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/_nav.jsp", out, false);
      out.write("\n");
      out.write("        <main>\n");
      out.write("            <div class=\"container\">\n");
      out.write("                <h2>Kalenderübersicht</h2>\n");
      out.write("                \n");
      out.write("                <div class=\"calendar-controls\">\n");
      out.write("                    <button onclick=\"changeMonth(-1)\" class=\"button\">&lt; Vorheriger Monat</button>\n");
      out.write("                    <span id=\"currentMonth\"></span>\n");
      out.write("                    <button onclick=\"changeMonth(1)\" class=\"button\">Nächster Monat &gt;</button>\n");
      out.write("\n");
      out.write("                    <div style=\"margin-left:1em;\">\n");
      out.write("                        <input id=\"employeeSearch\" type=\"search\" placeholder=\"Benutzer suchen...\" style=\"padding:6px; min-width:220px;\" />\n");
      out.write("                    </div>\n");
      out.write("\n");
      out.write("                    <div class=\"view-options\">\n");
      out.write("                        <label><input type=\"radio\" name=\"view\" value=\"days\" checked> Tage/Monat</label>\n");
      out.write("                        <label><input type=\"radio\" name=\"view\" value=\"weeks\"> Wochen/Halbjahr</label>\n");
      out.write("                    </div>\n");
      out.write("                </div>\n");
      out.write("\n");
      out.write("                <div class=\"view-options\">\n");
      out.write("                    <label><input type=\"checkbox\" name=\"view\" value=\"mak\"> MAK-Kapazität</label>\n");
      out.write("                    <label><input type=\"checkbox\" name=\"view\" value=\"availability\"> Verfügbarkeit</label>\n");
      out.write("                    <label><input type=\"checkbox\" name=\"view\" value=\"availability_percent\"> Verfügbarkeit (Team)</label>\n");
      out.write("                    <label><input type=\"checkbox\" name=\"view\" value=\"tasks\"> Aufgaben</label>\n");
      out.write("                    <label><input type=\"checkbox\" name=\"view\" value=\"workload\"> Auslastung</label>\n");
      out.write("                    <label><input type=\"checkbox\" name=\"view\" value=\"workload_team\"> Auslastung (Team)</label>\n");
      out.write("                    <label><input type=\"checkbox\" name=\"view\" value=\"remaining\"> Rest-Verfügbarkeit</label>\n");
      out.write("                    <label><input type=\"checkbox\" name=\"view\" value=\"remainingTeam\"> Rest-Verfügbarkeit (Team)</label>\n");
      out.write("                </div>\n");
      out.write("\n");
      out.write("                <div class=\"calendar-container\">\n");
      out.write("                    <table class=\"calendar-grid\" id=\"calendarGrid\">\n");
      out.write("                        <thead>\n");
      out.write("                            <tr>\n");
      out.write("                                <th class=\"employee-name\">Mitarbeiter</th>\n");
      out.write("                                </tr>\n");
      out.write("                        </thead>\n");
      out.write("                        <tbody>\n");
      out.write("                            </tbody>\n");
      out.write("                    </table>\n");
      out.write("                </div>\n");
      out.write("            </div>\n");
      out.write("        </main>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <script>\n");
      out.write("        let currentDate = new Date();\n");
      out.write("        \n");
      out.write("        \n");
      out.write("        // Event-Listener für alle Checkboxen hinzufügen\n");
      out.write("        document.querySelectorAll('.view-options input[type=\"checkbox\"]').forEach(checkbox => {\n");
      out.write("            checkbox.addEventListener('change', updateCalendar);\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        // Event-Listener für die Radio-Buttons hinzufügen\n");
      out.write("        document.querySelectorAll('input[name=\"view\"]').forEach(radio => {\n");
      out.write("            radio.addEventListener('change', updateCalendar);\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        // Event-Listener wird sicher an den Tabellenkörper gehängt\n");
      out.write("        document.addEventListener('DOMContentLoaded', function() {\n");
      out.write("            const tableBody = document.querySelector('#calendarGrid tbody');\n");
      out.write("            if (tableBody) {\n");
      out.write("                tableBody.addEventListener('click', function(event) {\n");
      out.write("                    // DEBUG 1: Prüfen, ob der Klick im Tabellenkörper überhaupt registriert wird.\n");
      out.write("                    // console.log(\"Klick im Tabellenkörper registriert. Geklicktes Element:\", event.target);\n");
      out.write("\n");
      out.write("                    const expandableRow = event.target.closest('.detail-row.expandable');\n");
      out.write("\n");
      out.write("                    // DEBUG 2: Prüfen, ob die korrekte klickbare Zeile gefunden wurde.\n");
      out.write("                    if (expandableRow) {\n");
      out.write("                        // console.log(\"Klickbare 'Aufgaben'-Zeile gefunden. Blende Details ein/aus.\", expandableRow);\n");
      out.write("                        toggleTaskDetails(expandableRow);\n");
      out.write("                    } else {\n");
      out.write("                        // console.log(\"Klick war nicht auf einer ausklappbaren 'Aufgaben'-Zeile.\");\n");
      out.write("                    }\n");
      out.write("                });\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            // --- NEU HINZUGEFÜGT ---\n");
      out.write("            // Klick-Listener für den Monats-Text hinzufügen\n");
      out.write("            const monthDisplay = document.getElementById('currentMonth');\n");
      out.write("            if (monthDisplay) {\n");
      out.write("                monthDisplay.style.cursor = 'pointer'; // Zeigt an, dass es klickbar ist\n");
      out.write("                monthDisplay.style.userSelect = 'none'; // Verhindert Textmarkierung\n");
      out.write("                monthDisplay.title = \"Zum aktuellen Monat springen\"; // Tooltip\n");
      out.write("                monthDisplay.addEventListener('click', function() {\n");
      out.write("                    currentDate = new Date(); // Setzt auf den aktuellen Tag/Monat\n");
      out.write("                    updateCalendar(); // Kalender neu laden\n");
      out.write("                });\n");
      out.write("            }\n");
      out.write("            // --- ENDE NEU HINZUGEFÜGT ---\n");
      out.write("\n");
      out.write("            // Initialen Kalender beim ersten Laden der Seite aufbauen\n");
      out.write("            // updateCalendar();\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        // Live-Suche: Debounce-Handler und Filterlogik\n");
      out.write("        (function() {\n");
      out.write("            const searchInput = document.getElementById('employeeSearch');\n");
      out.write("            let searchTimer = null;\n");
      out.write("            if (!searchInput) return;\n");
      out.write("\n");
      out.write("            searchInput.addEventListener('input', () => {\n");
      out.write("                clearTimeout(searchTimer);\n");
      out.write("                searchTimer = setTimeout(() => {\n");
      out.write("                    const q = searchInput.value.trim().toLowerCase();\n");
      out.write("                    if (typeof window.filterEmployees === 'function') {\n");
      out.write("                        window.filterEmployees(q);\n");
      out.write("                    }\n");
      out.write("                }, 250);\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            // Exportiere die Filter-Funktion global, damit sie nach dem Neurendern aufgerufen werden kann\n");
      out.write("            window.filterEmployees = function(query) {\n");
      out.write("                const tbody = document.querySelector('#calendarGrid tbody');\n");
      out.write("                if (!tbody) return;\n");
      out.write("                const rows = Array.from(tbody.children);\n");
      out.write("                let i = 0;\n");
      out.write("                while (i < rows.length) {\n");
      out.write("                    const row = rows[i];\n");
      out.write("\n");
      out.write("                    if (row.classList.contains('department-header')) {\n");
      out.write("                        const deptHeader = row;\n");
      out.write("                        let anyVisible = false;\n");
      out.write("                        let j = i + 1;\n");
      out.write("                        while (j < rows.length && !rows[j].classList.contains('department-header')) {\n");
      out.write("                            const r = rows[j];\n");
      out.write("                            if (r.classList.contains('employee-main')) {\n");
      out.write("                                const name = (r.dataset.employeeName || '').toLowerCase();\n");
      out.write("                                const match = query === '' || name.indexOf(query) !== -1;\n");
      out.write("                                r.style.display = match ? '' : 'none';\n");
      out.write("                                let k = j + 1;\n");
      out.write("                                while (k < rows.length && !rows[k].classList.contains('employee-main') && !rows[k].classList.contains('department-header')) {\n");
      out.write("                                    rows[k].style.display = match ? '' : 'none';\n");
      out.write("                                    k++;\n");
      out.write("                                }\n");
      out.write("                                if (match) anyVisible = true;\n");
      out.write("                                j = k;\n");
      out.write("                                continue;\n");
      out.write("                            } else {\n");
      out.write("                                j++;\n");
      out.write("                            }\n");
      out.write("                        }\n");
      out.write("                        deptHeader.style.display = anyVisible ? '' : 'none';\n");
      out.write("                        i = j;\n");
      out.write("                        continue;\n");
      out.write("                    }\n");
      out.write("                    i++;\n");
      out.write("                }\n");
      out.write("            };\n");
      out.write("        })();\n");
      out.write("\n");
      out.write("        function changeMonth(delta) {\n");
      out.write("            currentDate.setMonth(currentDate.getMonth() + delta);\n");
      out.write("            updateCalendar();\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function getWeekNumber(d) {\n");
      out.write("            // Hilfsfunktion zur Berechnung der Kalenderwoche\n");
      out.write("            d = new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate()));\n");
      out.write("            d.setUTCDate(d.getUTCDate() + 4 - (d.getUTCDay()||7));\n");
      out.write("            var yearStart = new Date(Date.UTC(d.getUTCFullYear(),0,1));\n");
      out.write("            var weekNo = Math.ceil(( ( (d - yearStart) / 86400000) + 1)/7);\n");
      out.write("            return weekNo;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function updateCalendarColors(colors) {\n");
      out.write("            // Debug-Ausgabe der Farben\n");
      out.write("            // console.log('Erhaltene Farben:', colors);\n");
      out.write("            \n");
      out.write("            // Farben für verschiedene Zelltypen\n");
      out.write("            const colorMap = {\n");
      out.write("                'weekend': colors.calendar_color_weekend,\n");
      out.write("                'holiday': colors.calendar_color_holiday,\n");
      out.write("                'workday': colors.calendar_color_workday,\n");
      out.write("                'absence': colors.calendar_color_absence\n");
      out.write("            };\n");
      out.write("            \n");
      out.write("            // Farben auf alle TD-Elemente anwenden, außer der Namensspalte\n");
      out.write("            document.querySelectorAll('.calendar-grid td:not(.employee-name):not(.department-header td)').forEach(td => {\n");
      out.write("                for (const [className, color] of Object.entries(colorMap)) {\n");
      out.write("                    if (td.classList.contains(className)) {\n");
      out.write("                        td.style.backgroundColor = color;\n");
      out.write("                        break;  // Beende die Schleife, sobald eine passende Klasse gefunden wurde\n");
      out.write("                    }\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function getCapacityForDate(capacities, dateString) {\n");
      out.write("            /**\n");
      out.write("            * Hilfsfunktion: Findet die gültige Kapazität für ein bestimmtes Datum.\n");
      out.write("            * Geht davon aus, dass die Kapazitäten absteigend nach Datum sortiert sind.\n");
      out.write("            * @param {Array} capacities - Die Kapazitätshistorie eines Mitarbeiters.\n");
      out.write("            * @param {string} dateString - Das Datum des Kalendertages (z.B. \"2025-09-10\").\n");
      out.write("            * @returns {number|null} Die Kapazität in Prozent oder null, wenn keine gültig ist.\n");
      out.write("            */\n");
      out.write("            // console.log('getCapacityForDate Tag:        ', dateString);\n");
      out.write("            // console.log('getCapacityForDate capacities: ', capacities);\n");
      out.write("            // Sicherheitsprüfung für den Fall, dass ungültige Daten übergeben werden\n");
      out.write("            if (typeof dateString !== 'string' || !dateString || !capacities || capacities.length === 0) {\n");
      out.write("                return null;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            if (!capacities || capacities.length === 0) {\n");
      out.write("                // console.log(`Für Datum ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${dateString}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(": Keine Kapazitätsdaten für diesen Mitarbeiter erhalten.`);\n");
      out.write("                return null;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            // Zerlegt \"YYYY-MM-DD\" in seine Teile [YYYY, MM, DD]\n");
      out.write("            const [year, month, day] = dateString.split('-').map(Number);\n");
      out.write("            // Erstellt das Datum sicher. Monat ist 0-basiert (Januar=0), daher month - 1.\n");
      out.write("            // Die Uhrzeit wird auf 12:00 gesetzt, um Zeitzonenprobleme am Tageswechsel zu umgehen.\n");
      out.write("            const currentDay = new Date(year, month - 1, day, 12, 0, 0);\n");
      out.write("\n");
      out.write("            let activeCapacity = null;\n");
      out.write("\n");
      out.write("\n");
      out.write("            // console.log(`--- Suche Kapazität für Tag: `, currentDay);\n");
      out.write("            // console.log(`--- Tag: `, dateString);\n");
      out.write("            // Da die Liste absteigend sortiert ist, ist der erste passende Eintrag der richtige.\n");
      out.write("            for (const capacity of capacities) {\n");
      out.write("                \n");
      out.write("                // console.log(`----> Schleife: `, capacity.start_date);\n");
      out.write("\n");
      out.write("                // Nur Einträge verarbeiten, die ein gültiges Datum haben\n");
      out.write("                if (typeof capacity.start_date === 'string' && capacity.start_date) {\n");
      out.write("                    const [capYear, capMonth, capDay] = capacity.start_date.split('-').map(Number);\n");
      out.write("                    const validFromDate = new Date(capYear, capMonth - 1, capDay, 12, 0, 0);\n");
      out.write("                    const highlight = false;\n");
      out.write("                    \n");
      out.write("                    // console.log(`-> validFromDate.......`, validFromDate);\n");
      out.write("                    // console.log(`----> validFromDate: `, capacity.start_date);\n");
      out.write("                    // Prüfen, ob das Datum gültig ist und in der Vergangenheit oder am selben Tag liegt\n");
      out.write("                    if (capacity.start_date <= dateString) {\n");
      out.write("                    // if (dateString <= capacity.start_date) {\n");
      out.write("                        // Den korrekten Wert zurückgeben\n");
      out.write("                        // return capacity.capacity_percent;\n");
      out.write("                        activeCapacity = {\n");
      out.write("                            value: capacity.capacity_percent,\n");
      out.write("                            // Markieren, wenn das Startdatum der Kapazität genau auf den Kalendertag fällt.\n");
      out.write("                            highlight: dateString === capacity.start_date\n");
      out.write("                        };\n");
      out.write("                        \n");
      out.write("                        // onsole.log(`TREFFER: `, activeCapacity);\n");
      out.write("                        return activeCapacity;\n");
      out.write("                    } \n");
      out.write("                }\n");
      out.write("\n");
      out.write("\n");
      out.write("            }\n");
      out.write("            // console.log(`-> KEIN TREFFER für diesen Tag gefunden.`);\n");
      out.write("            return null; // Kein gültiger Kapazitätseintrag gefunden\n");
      out.write("        }\n");
      out.write("       \n");
      out.write("        function getAvailabilityForDate(day, employee) {\n");
      out.write("            /**\n");
      out.write("            * Berechnet die Verfügbarkeit eines Mitarbeiters für einen bestimmten Tag.\n");
      out.write("            */\n");
      out.write("            // console.log('.    - getAvailabilityForDate (day):      ',day);\n");
      out.write("            // console.log('.    - getAvailabilityForDate (employee): ',employee);\n");
      out.write("            // Regel 1: Wenn es ein Feiertag ist, ist die Verfügbarkeit 0.\n");
      out.write("            if (day.isHoliday) {\n");
      out.write("                // console.log('.    - getAvailabilityForDate (return) = feiertag');\n");
      out.write("                return 0;\n");
      out.write("            }\n");
      out.write("            // Regel 2: Wenn der Mitarbeiter abwesend ist, ist die Verfügbarkeit 0.\n");
      out.write("            if (employee.absences && employee.absences.includes(day.date)) {\n");
      out.write("                // console.log('.    - getAvailabilityForDate (return) = abwesend');\n");
      out.write("                return 0;\n");
      out.write("            }\n");
      out.write("            // Ansonsten entspricht die Verfügbarkeit der gültigen MAK-Kapazität.\n");
      out.write("            const capacityInfo = getCapacityForDate(employee.capacities, day.date);\n");
      out.write("            // console.log('.    - getAvailabilityForDate (return) = ', capacityInfo);\n");
      out.write("            return capacityInfo ? capacityInfo.value : 0; // Gehe von 0 aus, wenn keine Kapazität definiert ist\n");
      out.write("        }\n");
      out.write("       \n");
      out.write("        function getColorForPercentage(percent) {\n");
      out.write("            /**\n");
      out.write("            * NEUE HILFSFUNKTION: Berechnet eine Farbe für einen Prozentwert\n");
      out.write("            * auf einer Skala von Rot (0%) über Gelb (50%) zu Grün (100%).\n");
      out.write("            */\n");
      out.write("            if (typeof percent !== 'number') return ''; // Keine Farbe, wenn der Wert ungültig ist\n");
      out.write("\n");
      out.write("            // Begrenze den Wert auf den Bereich 0-100\n");
      out.write("            const p = Math.max(0, Math.min(100, percent));\n");
      out.write("            // console.log(`Farbinof p: `,p);\n");
      out.write("\n");
      out.write("            // Wir interpolieren die Farbe im HSL-Farbraum (Farbton, Sättigung, Helligkeit)\n");
      out.write("            // Farbton (Hue): 0 ist Rot, 120 ist Grün.\n");
      out.write("            const hue = (p * 1.2).toString(10);\n");
      out.write("            const hueValue = \"hsl(\" + hue + ' ' + '90% 70%)';\n");
      out.write("            // console.log(`Farbinof hue: `,hueValue);\n");
      out.write("            // Sättigung und Helligkeit können wir konstant halten, um lebendige Farben zu erhalten.\n");
      out.write("            return hueValue;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function getWorkloadColor(workload, settings) {\n");
      out.write("            /**\n");
      out.write("            * Gibt die passende Farbe für die Auslastung (Workload) zurück,\n");
      out.write("            * basierend auf den Werten aus den Einstellungen.\n");
      out.write("            */\n");
      out.write("            if (typeof workload !== 'number' || workload <= 0) {\n");
      out.write("                return ''; // Keine Farbe, wenn keine Auslastung vorhanden ist\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            // Werte aus den Settings holen und in Zahlen umwandeln\n");
      out.write("            const mediumThreshold = parseFloat(settings.calendar_workload_value_medium); // z.B. 0.25\n");
      out.write("            const highThreshold = parseFloat(settings.calendar_workload_value_high);   // z.B. 0.8\n");
      out.write("\n");
      out.write("            // console.log ('--> WL: ', workload);\n");
      out.write("            // console.log ('medium: ', mediumThreshold);\n");
      out.write("            // console.log ('high: ', highThreshold);\n");
      out.write("            \n");
      out.write("\n");
      out.write("            if (workload/100 >= highThreshold) {\n");
      out.write("                return settings.calendar_workload_color_high;\n");
      out.write("            } else if (workload/100 > mediumThreshold) {\n");
      out.write("                return settings.calendar_workload_color_medium;\n");
      out.write("            } else {\n");
      out.write("                return settings.calendar_workload_color_low;\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function countWorkdays(startDateStr, endDateStr, holidays, absences = []) {\n");
      out.write("            /**\n");
      out.write("            * HILFSFUNKTION: Zählt die Arbeitstage zwischen zwei Daten.\n");
      out.write("            * Schließt Wochenenden und Feiertage aus.\n");
      out.write("            */\n");
      out.write("            let count = 0;\n");
      out.write("            const holidaySet = new Set(holidays.map(h => h.date)); // Für schnellen Zugriff\n");
      out.write("            const absenceSet = new Set(absences); // Für schnellen Zugriff\n");
      out.write("            let currentDate = new Date(startDateStr + \"T12:00:00\");\n");
      out.write("            const endDate = new Date(endDateStr + \"T12:00:00\");\n");
      out.write("            // console.log(' - Zeitraum: ', currentDate + ' bis ' + endDate);\n");
      out.write("            // console.log(' - Holiday: ', holidaySet);\n");
      out.write("            // console.log(' - Absence: ', absenceSet);\n");
      out.write("\n");
      out.write("            while (currentDate <= endDate) {\n");
      out.write("                const dayOfWeek = currentDate.getDay();\n");
      out.write("                const dateStr = currentDate.toISOString().split('T')[0];\n");
      out.write("\n");
      out.write("                if (dayOfWeek > 0 && dayOfWeek < 6 && !holidaySet.has(dateStr) && !absenceSet.has(dateStr)) {\n");
      out.write("                    count++;\n");
      out.write("                }\n");
      out.write("                currentDate.setDate(currentDate.getDate() + 1);\n");
      out.write("            }\n");
      out.write("            // console.log(' - Dauer: ', count);\n");
      out.write("            return count > 0 ? count : 1; // Division durch Null vermeiden\n");
      out.write("        }\n");
      out.write("       \n");
      out.write("        function getTaskEffortForDate(day, employee, holidays) {\n");
      out.write("            /**\n");
      out.write("            * FUNKTION: Berechnet die tägliche Aufgabenlast für einen Mitarbeiter.\n");
      out.write("            */\n");
      out.write("            // console.log(`--> Tag:    `,day);\n");
      out.write("            // console.log(`User:      `,employee);\n");
      out.write("            // console.log(`Feiertage: `,holidays);\n");
      out.write("            let totalEffort = 0;\n");
      out.write("            if (!employee.tasks20weeks) return 0;\n");
      out.write("            const currentDay = new Date(day.date + \"T12:00:00\");\n");
      out.write("            const absenceSet = new Set(employee.absences); // Für schnellen Zugriff\n");
      out.write("            // console.log(`User_Abs:      `,absenceSet);\n");
      out.write("\n");
      out.write("            employee.tasks20weeks.forEach(tasks20weeks => {\n");
      out.write("                const startDate = new Date(tasks20weeks.start_date + \"T12:00:00\");\n");
      out.write("                const endDate = new Date(tasks20weeks.end_date + \"T12:00:00\");\n");
      out.write("                \n");
      out.write("                let workdays;\n");
      out.write("                // Prüfen, ob der aktuelle Kalendertag im Aufgabenzeitraum liegt\n");
      out.write("                if (currentDay >= startDate && currentDay <= endDate) {\n");
      out.write("                    // prüfen, ob der Mitarbeiter an diesem Tag abwesend ist\n");
      out.write("                    if (employee.absences && employee.absences.includes(day.date)) {\n");
      out.write("                        // abwesend\n");
      out.write("                        if (tasks20weeks.task_options === 'waiting') {\n");
      out.write("                            // abwesend und Aufgabe = waiting\n");
      out.write("                            // workdays = countWorkdays(task.start_date, task.end_date, holidays, absenceSet);    \n");
      out.write("                            workdays = 0;                  \n");
      out.write("                        } else { \n");
      out.write("                            // abwesend und Aufgabe = 'continue' or undefined\n");
      out.write("                            workdays = countWorkdays(tasks20weeks.start_date, tasks20weeks.end_date, holidays);\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("\n");
      out.write("                    } else {\n");
      out.write("                        // anwesend\n");
      out.write("                        if (tasks20weeks.task_options === 'waiting') {\n");
      out.write("                            // anwesend und Aufgabe = waiting\n");
      out.write("                            workdays = countWorkdays(tasks20weeks.start_date, tasks20weeks.end_date, holidays, absenceSet);                    \n");
      out.write("                        } else { \n");
      out.write("                            // anwesend und Aufgabe = 'continue' or undefined\n");
      out.write("                            workdays = countWorkdays(tasks20weeks.start_date, tasks20weeks.end_date, holidays);\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                    }\n");
      out.write("\n");
      out.write("                    // console.log('Workdays: ', workdays);\n");
      out.write("                    let dailyEffort;\n");
      out.write("                    if (workdays >0) {\n");
      out.write("                        dailyEffort = tasks20weeks.effort_days / workdays;    \n");
      out.write("                    } else {\n");
      out.write("                        dailyEffort = 0;\n");
      out.write("                    }\n");
      out.write("                    \n");
      out.write("                    // const dailyEffort = task.effort_days / workdays;\n");
      out.write("                    // console.log('Workdays: ', workdays + ' // ' + day.date + ' : ' + employee.name + ' // ' +  task.task_name + ' // ' + task.task_options + ' // ' + dailyEffort);\n");
      out.write("                    totalEffort += dailyEffort;\n");
      out.write("                }\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("                /**\n");
      out.write("                if (currentDay >= startDate && currentDay <= endDate) {\n");
      out.write("                    let workdays;\n");
      out.write("                    // console.log('Tag: ', day.date + ' : ' + employee.name + ' // ' +  task.task_name + ' // ' + task.task_options);\n");
      out.write("                    if (task.task_options === 'waiting') {\n");
      out.write("                        workdays = countWorkdays(task.start_date, task.end_date, holidays, employee.absences);\n");
      out.write("                    } else { // 'continue' or undefined\n");
      out.write("                        workdays = countWorkdays(task.start_date, task.end_date, holidays);\n");
      out.write("                    }\n");
      out.write("                    const dailyEffort = task.effort_days / workdays;\n");
      out.write("                    totalEffort += dailyEffort;\n");
      out.write("                }\n");
      out.write("                */\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            // console.log(`Effort: `,day.date + ' --> ' + totalEffort + ' (' + employee.name + ')');\n");
      out.write("            // console.log(`User: `,employee);\n");
      out.write("\n");
      out.write("            return totalEffort;\n");
      out.write("        }\n");
      out.write("       \n");
      out.write("        function toggleTaskDetails(clickedRow) {\n");
      out.write("            /**\n");
      out.write("            * Blendet die Aufgabendetails ein oder aus.\n");
      out.write("            */\n");
      out.write("            const nextRow = clickedRow.nextElementSibling;\n");
      out.write("            const viewType = document.querySelector('input[name=\"view\"]:checked').value;\n");
      out.write("\n");
      out.write("            // console.log('Zeileninhalt: ',clickedRow);\n");
      out.write("\n");
      out.write("            // Wenn Details schon sichtbar sind, ausblenden\n");
      out.write("            if (nextRow && nextRow.classList.contains('task-detail-row')) {\n");
      out.write("                let currentRow = nextRow;\n");
      out.write("                while (currentRow && currentRow.classList.contains('task-detail-row')) {\n");
      out.write("                    let next = currentRow.nextElementSibling;\n");
      out.write("                    currentRow.remove();\n");
      out.write("                    currentRow = next;\n");
      out.write("                }\n");
      out.write("                clickedRow.querySelector('.arrow-icon').innerHTML = '&#9662;'; // Pfeil nach unten\n");
      out.write("                return;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            // Daten direkt aus dem 'data-*'-Attribut der angeklickten Zeile holen\n");
      out.write("            const tasks = JSON.parse(clickedRow.dataset.tasks);\n");
      out.write("            const tasks20weeks = JSON.parse(clickedRow.dataset.tasks20weeks);\n");
      out.write("            const holidays = JSON.parse(clickedRow.dataset.holidays);\n");
      out.write("            const absences = JSON.parse(clickedRow.dataset.absences);\n");
      out.write("            const dayInfos = JSON.parse(clickedRow.dataset.daysinweeks);\n");
      out.write("            const employee = JSON.parse(clickedRow.dataset.employee);\n");
      out.write("\n");
      out.write("            // console.log('DayInfo:',dayInfos);\n");
      out.write("\n");
      out.write("            let lastElement = clickedRow;\n");
      out.write("            const today = new Date();\n");
      out.write("            const todayString = today.getFullYear() + '-' +\n");
      out.write("                                (today.getMonth() + 1).toString().padStart(2, '0') + '-' +\n");
      out.write("                                today.getDate().toString().padStart(2, '0');\n");
      out.write("            const currentWeekNumber = getWeekNumber(today);\n");
      out.write("            const currentYear = today.getFullYear();\n");
      out.write("\n");
      out.write("\n");
      out.write("            if (viewType === 'days') {\n");
      out.write("                if (!tasks || tasks.length === 0) {\n");
      out.write("                    const noTasksRow = document.createElement('tr');\n");
      out.write("                    noTasksRow.classList.add('task-detail-row');\n");
      out.write("                    noTasksRow.innerHTML = `<td colspan=\"100%\" class=\"employee-name task-detail-name\" style=\"font-style: italic text-align: left !important;\">Keine Aufgaben für diesen Mitarbeiter im Zeitraum gefunden.</td>`;\n");
      out.write("                    clickedRow.parentNode.insertBefore(noTasksRow, clickedRow.nextSibling);\n");
      out.write("                    clickedRow.querySelector('.arrow-icon').innerHTML = '&#9652;'; // Pfeil nach oben\n");
      out.write("                    return;\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                tasks.forEach(task => {\n");
      out.write("                    const detailRow = document.createElement('tr');\n");
      out.write("                    detailRow.classList.add('task-detail-row');\n");
      out.write("                    const nameCell = document.createElement('td');\n");
      out.write("                    nameCell.textContent = task.task_name;\n");
      out.write("                    nameCell.classList.add('employee-name', 'task-detail-name');\n");
      out.write("                    detailRow.appendChild(nameCell);\n");
      out.write("\n");
      out.write("                    let workdays;\n");
      out.write("                    if (task.task_options === 'waiting') {\n");
      out.write("                        workdays = countWorkdays(task.start_date, task.end_date, holidays, absences);\n");
      out.write("                    } else { // 'continue' or undefined\n");
      out.write("                        workdays = countWorkdays(task.start_date, task.end_date, holidays);\n");
      out.write("                    }\n");
      out.write("                    const dailyEffort = task.effort_days / workdays;\n");
      out.write("                    // console.log('DailyEffort: ',dailyEffort);\n");
      out.write("\n");
      out.write("                    JSON.parse(clickedRow.dataset.days).forEach(day => {\n");
      out.write("                        const td = document.createElement('td');\n");
      out.write("                        const currentDay = new Date(day.date + \"T12:00:00\");\n");
      out.write("                        const startDate = new Date(task.start_date + \"T12:00:00\");\n");
      out.write("                        const endDate = new Date(task.end_date + \"T12:00:00\");\n");
      out.write("\n");
      out.write("                        if (task.task_options === 'waiting') {\n");
      out.write("                            if (currentDay >= startDate && currentDay <= endDate && !day.isWeekend && !day.isHoliday && !absences.includes(day.date)) {\n");
      out.write("                                td.textContent = dailyEffort.toFixed(2);\n");
      out.write("                            }\n");
      out.write("                        } else { // 'continue' or undefined\n");
      out.write("                        if (currentDay >= startDate && currentDay <= endDate && !day.isWeekend && !day.isHoliday) {\n");
      out.write("                                td.textContent = dailyEffort.toFixed(2);    \n");
      out.write("                                // console.log('Datum: ',day.date);\n");
      out.write("                            }\n");
      out.write("                        }\n");
      out.write("                        if (day.isWeekend) td.classList.add('weekend');\n");
      out.write("                        detailRow.appendChild(td);\n");
      out.write("\n");
      out.write("                        // Heutigen Tag markieren\n");
      out.write("                        if (day.date === todayString) {\n");
      out.write("                            td.classList.add('today-marker-cell');\n");
      out.write("                        }\n");
      out.write("                    });\n");
      out.write("\n");
      out.write("                    lastElement.parentNode.insertBefore(detailRow, lastElement.nextSibling);\n");
      out.write("                    lastElement = detailRow;\n");
      out.write("                });\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("            } else if (viewType === 'weeks') {\n");
      out.write("                // Wochenansicht\n");
      out.write("                if (!tasks20weeks || tasks20weeks.length === 0) {\n");
      out.write("                    const noTasksRow = document.createElement('tr');\n");
      out.write("                    noTasksRow.classList.add('task-detail-row');\n");
      out.write("                    noTasksRow.innerHTML = `<td colspan=\"100%\" class=\"employee-name task-detail-name\" style=\"font-style: italic text-align: left !important;\">Keine Aufgaben für diesen Mitarbeiter im Zeitraum gefunden.</td>`;\n");
      out.write("                    clickedRow.parentNode.insertBefore(noTasksRow, clickedRow.nextSibling);\n");
      out.write("                    clickedRow.querySelector('.arrow-icon').innerHTML = '&#9652;'; // Pfeil nach oben\n");
      out.write("                    return;\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                // console.log('tasks20weeks:',tasks20weeks);\n");
      out.write("\n");
      out.write("                tasks20weeks.forEach(tasks => {\n");
      out.write("                    const detailRow = document.createElement('tr');\n");
      out.write("                    detailRow.classList.add('task-detail-row');\n");
      out.write("                    const nameCell = document.createElement('td');\n");
      out.write("                    nameCell.textContent = tasks.task_name;\n");
      out.write("                    nameCell.classList.add('employee-name', 'task-detail-name');\n");
      out.write("                    detailRow.appendChild(nameCell);\n");
      out.write("\n");
      out.write("                    // console.log('tasks20weeks Aufgabe:',tasks);\n");
      out.write("\n");
      out.write("                    let workdays;\n");
      out.write("                    if (tasks.task_options === 'waiting') {\n");
      out.write("                        workdays = countWorkdays(tasks.start_date, tasks.end_date, holidays, absences);\n");
      out.write("                    } else { // 'continue' or undefined\n");
      out.write("                        workdays = countWorkdays(tasks.start_date, tasks.end_date, holidays);\n");
      out.write("                    }\n");
      out.write("                    const dailyEffort = tasks.effort_days / workdays;\n");
      out.write("                    // console.log('DailyEffort: ',dailyEffort);\n");
      out.write("\n");
      out.write("\n");
      out.write("                    let firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n");
      out.write("                    for (let i = 0; i < 20; i++) {\n");
      out.write("                        let weekDate = new Date(firstDayOfMonth.getTime()); \n");
      out.write("                        weekDate.setDate(weekDate.getDate() + (i * 7));\n");
      out.write("                        // Berechne Start- und Enddatum der Woche (Montag bis Sonntag)\n");
      out.write("                        let weekStart = new Date(weekDate);\n");
      out.write("                        weekStart.setDate(weekStart.getDate() - weekStart.getDay() + 2); // Montag\n");
      out.write("                        let weekEnd = new Date(weekStart);\n");
      out.write("                        weekEnd.setDate(weekEnd.getDate() + 6); // Sonntag\n");
      out.write("                        \n");
      out.write("                        let daysInWeek;\n");
      out.write("                        for (let j = 0; j < 7; j++) {\n");
      out.write("                            let dDate = new Date(weekStart);\n");
      out.write("                            dDate.setDate(dDate.getDate() + j);\n");
      out.write("                            let dDateStr = dDate.toISOString().split('T')[0];\n");
      out.write("                            let dayInfo = dayInfos.find(d => d.date === dDateStr);\n");
      out.write("                            if (dDateStr) {\n");
      out.write("                                if (!daysInWeek) daysInWeek = [];   \n");
      out.write("                                daysInWeek.push(dayInfo);\n");
      out.write("                            }\n");
      out.write("                        }\n");
      out.write("                        // console.log('Woche ', i + 1, ': ', daysInWeek);\n");
      out.write("\n");
      out.write("                        \n");
      out.write("                        // Berechne die Summe der Woche\n");
      out.write("                        let total = 0;\n");
      out.write("                        daysInWeek.forEach(day => {\n");
      out.write("                            if (day) {\n");
      out.write("                                const taskeffort = dailyEffort;\n");
      out.write("                                const currentDay = new Date(day.date + \"T12:00:00\");\n");
      out.write("                                const startDate = new Date(tasks.start_date + \"T12:00:00\");\n");
      out.write("                                const endDate = new Date(tasks.end_date + \"T12:00:00\");\n");
      out.write("                                if (tasks.task_options === 'waiting') {\n");
      out.write("                                    if (currentDay >= startDate && currentDay <= endDate && !day.isWeekend && !day.isHoliday && !absences.includes(day.date)) {\n");
      out.write("                                        total += taskeffort;\n");
      out.write("                                    }\n");
      out.write("                                } else { // 'continue' or undefined\n");
      out.write("                                if (currentDay >= startDate && currentDay <= endDate && !day.isWeekend && !day.isHoliday) {\n");
      out.write("                                        total += taskeffort; \n");
      out.write("                                        // console.log('Datum: ',day.date);\n");
      out.write("                                    }\n");
      out.write("                                }\n");
      out.write("                            }\n");
      out.write("                            else {\n");
      out.write("                                // console.log('Kein DayInfo für Datum: ', day.date);\n");
      out.write("                            } \n");
      out.write("                        });\n");
      out.write("\n");
      out.write("                        const td = document.createElement('td');\n");
      out.write("                        if (total !== null) {\n");
      out.write("                            td.textContent = (total).toFixed(2);\n");
      out.write("                        }\n");
      out.write("                        detailRow.appendChild(td);\n");
      out.write("\n");
      out.write("                        // Prüfung für aktuelle Woche                        \n");
      out.write("                        const weekForCell = getWeekNumber(weekDate);\n");
      out.write("                        if (weekForCell === currentWeekNumber && weekDate.getFullYear() === currentYear) {\n");
      out.write("                            td.classList.add('current-week-cell');\n");
      out.write("                        }\n");
      out.write("                    }\n");
      out.write("\n");
      out.write("                    lastElement.parentNode.insertBefore(detailRow, lastElement.nextSibling);\n");
      out.write("                    lastElement = detailRow;\n");
      out.write("                \n");
      out.write("                });\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            clickedRow.querySelector('.arrow-icon').innerHTML = '&#9652;'; // Pfeil nach oben\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        // Die \"große\" Funktion zum Aktualisieren des Kalenders\n");
      out.write("        function updateCalendar() {\n");
      out.write("            const viewType = document.querySelector('input[name=\"view\"]:checked').value;\n");
      out.write("            \n");
      out.write("            // NEU: Heutiges Datum im YYYY-MM-DD Format ermitteln\n");
      out.write("            const today = new Date();\n");
      out.write("            const todayString = today.getFullYear() + '-' +\n");
      out.write("                                (today.getMonth() + 1).toString().padStart(2, '0') + '-' +\n");
      out.write("                                today.getDate().toString().padStart(2, '0');\n");
      out.write("\n");
      out.write("            // NEU: Heutige Kalenderwoche und Jahr ermitteln\n");
      out.write("            const currentWeekNumber = getWeekNumber(today);\n");
      out.write("            const currentYear = today.getFullYear();\n");
      out.write("\n");
      out.write("            fetch('");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/calendar-overview/data?' + new URLSearchParams({\n");
      out.write("                year: currentDate.getFullYear(),\n");
      out.write("                month: currentDate.getMonth() + 1\n");
      out.write("            }))\n");
      out.write("            .then(response => {\n");
      out.write("                if (!response.ok) {\n");
      out.write("                    throw new Error(`HTTP-Fehler! Status: ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${response.status}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("`);\n");
      out.write("                }\n");
      out.write("                return response.text(); // Antwort zuerst als reinen Text lesen\n");
      out.write("            })\n");
      out.write("            .then(text => {\n");
      out.write("                if (!text) {\n");
      out.write("                    // Fall 1: Die Antwort ist komplett leer\n");
      out.write("                    console.error(\"Leere Antwort vom Server erhalten. Möglicherweise ist ein Fehler im Servlet aufgetreten.\");\n");
      out.write("                    throw new Error(\"Leere Server-Antwort.\");\n");
      out.write("                }\n");
      out.write("                try {\n");
      out.write("                    // Fall 2: Die Antwort hat Inhalt, versuche sie zu parsen\n");
      out.write("                    return JSON.parse(text);\n");
      out.write("                } catch (e) {\n");
      out.write("                    // Fall 3: Die Antwort ist kein gültiges JSON (z.B. eine HTML-Fehlerseite)\n");
      out.write("                    console.error(\"Fehler beim Parsen der JSON-Antwort. Server-Antwort war:\", text);\n");
      out.write("                    throw new Error(\"Ungültige JSON-Antwort vom Server.\");\n");
      out.write("                }\n");
      out.write("            })\n");
      out.write("            .then(data => {\n");
      out.write("                const monthNames = [\"Januar\", \"Februar\", \"März\", \"April\", \"Mai\", \"Juni\", \"Juli\", \"August\", \"September\", \"Oktober\", \"November\", \"Dezember\"];\n");
      out.write("                const currentMonthText = monthNames[currentDate.getMonth()] + ' ' + currentDate.getFullYear();\n");
      out.write("                document.getElementById('currentMonth').textContent = currentMonthText;\n");
      out.write("                // console.log('Data: ',data);\n");
      out.write("\n");
      out.write("\n");
      out.write("                // Status der Checkboxen auslesen\n");
      out.write("                const showMakCapacity = document.querySelector('input[value=\"mak\"]').checked;\n");
      out.write("                const showAvailability = document.querySelector('input[value=\"availability\"]').checked;\n");
      out.write("                const showAvailabilityPercent = document.querySelector('input[value=\"availability_percent\"]').checked;\n");
      out.write("                const showTasks = document.querySelector('input[value=\"tasks\"]').checked;\n");
      out.write("                const showWorkload = document.querySelector('input[value=\"workload\"]').checked;\n");
      out.write("                const showWorkloadTeam = document.querySelector('input[value=\"workload_team\"]').checked;\n");
      out.write("                const showRemaining = document.querySelector('input[value=\"remaining\"]').checked;\n");
      out.write("                const showRemainingTeam = document.querySelector('input[value=\"remainingTeam\"]').checked;                \n");
      out.write("\n");
      out.write("                const thead = document.querySelector('#calendarGrid thead');\n");
      out.write("                const tbody = document.querySelector('#calendarGrid tbody');\n");
      out.write("\n");
      out.write("                // Stellt sicher, dass die Tabellenteile existieren, bevor sie geleert werden\n");
      out.write("                if (!thead || !tbody) {\n");
      out.write("                    console.error(\"Fehler: <thead> oder <tbody> wurde in der Tabelle nicht gefunden.\");\n");
      out.write("                    return;\n");
      out.write("                }\n");
      out.write("                thead.innerHTML = '';\n");
      out.write("                tbody.innerHTML = '';\n");
      out.write("\n");
      out.write("                // Kopfzeilen erstellen\n");
      out.write("                if (viewType === 'days') {\n");
      out.write("                    // Tages-Ansicht\n");
      out.write("                    // Zeile für den Monatsnamen über die gesamte \n");
      out.write("                    const fullWidthMonthRow = document.createElement('tr');\n");
      out.write("                    const fullWidthMonthCell = document.createElement('th');\n");
      out.write("                    fullWidthMonthCell.textContent = currentMonthText;\n");
      out.write("                    fullWidthMonthCell.style.textAlign = 'center';\n");
      out.write("                    fullWidthMonthRow.appendChild(fullWidthMonthCell);\n");
      out.write("                    thead.appendChild(fullWidthMonthRow);\n");
      out.write("\n");
      out.write("                    // --- Kalenderwochen\n");
      out.write("                    fullWidthMonthCell.colSpan = data.days.length + 1;\n");
      out.write("                    const weekHeaderRow = document.createElement('tr');\n");
      out.write("                    weekHeaderRow.innerHTML = '<th class=\"employee-name\">KW</th>';\n");
      out.write("                    let currentWeek = -1;\n");
      out.write("                    let weekDayCount = 0;\n");
      out.write("                    let lastWeekTh = null;\n");
      out.write("\n");
      out.write("                    data.days.forEach((day, index) => {\n");
      out.write("                        const d = new Date(day.date);\n");
      out.write("                        const week = getWeekNumber(d);\n");
      out.write("\n");
      out.write("                        if (week !== currentWeek) {\n");
      out.write("                            if (lastWeekTh) {\n");
      out.write("                                lastWeekTh.colSpan = weekDayCount;\n");
      out.write("                            }\n");
      out.write("                            weekDayCount = 0;\n");
      out.write("                            currentWeek = week;\n");
      out.write("                            const th = document.createElement('th');\n");
      out.write("                            th.textContent = week;\n");
      out.write("                            weekHeaderRow.appendChild(th);\n");
      out.write("                            lastWeekTh = th;\n");
      out.write("                        }\n");
      out.write("                        weekDayCount++;\n");
      out.write("                    });\n");
      out.write("                    if (lastWeekTh) {\n");
      out.write("                        lastWeekTh.colSpan = weekDayCount;\n");
      out.write("                    }\n");
      out.write("                    thead.appendChild(weekHeaderRow);\n");
      out.write("                    \n");
      out.write("\n");
      out.write("                    // --- Tagesansicht (Originalfunktionalität) ---\n");
      out.write("                    // fullWidthMonthCell.colSpan = data.days.length + 1;\n");
      out.write("                    const dayHeaderRow = document.createElement('tr');\n");
      out.write("                    dayHeaderRow.innerHTML = '<th class=\"employee-name\">Tag</th>';\n");
      out.write("                    data.days.forEach(day => {\n");
      out.write("                        const th = document.createElement('th');\n");
      out.write("                        th.textContent = day.dayOfMonth;\n");
      out.write("                        if (day.isWeekend) th.classList.add('weekend');\n");
      out.write("                        \n");
      out.write("                        // NEU: Heutigen Tag in der Kopfzeile markieren\n");
      out.write("                        if (day.date === todayString) {\n");
      out.write("                            th.classList.add('today-marker-header');\n");
      out.write("                            th.title = \"Heute\"; // Tooltip\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                        dayHeaderRow.appendChild(th);\n");
      out.write("                    });\n");
      out.write("                    thead.appendChild(dayHeaderRow);\n");
      out.write("\n");
      out.write("\n");
      out.write("                    const holidays = data.days.filter(d => d.isHoliday);\n");
      out.write("\n");
      out.write("                } else if (viewType === 'weeks') {\n");
      out.write("                    // --- Wochenansicht ---\n");
      out.write("                    // fullWidthMonthCell.colSpan = 21; // Mitarbeiter + 20 Wochen\n");
      out.write("\n");
      out.write("                    const monthHeaderRow = document.createElement('tr');\n");
      out.write("                    monthHeaderRow.innerHTML = '<th class=\"employee-name\" style=\"border:0;\"></th>';\n");
      out.write("\n");
      out.write("                    const weekHeaderRow = document.createElement('tr');\n");
      out.write("                    weekHeaderRow.innerHTML = '<th class=\"employee-name\">KW</th>';\n");
      out.write("\n");
      out.write("                    let firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n");
      out.write("                    let monthMap = new Map();\n");
      out.write("\n");
      out.write("                    for (let i = 0; i < 20; i++) {\n");
      out.write("                        let weekDate = new Date(firstDayOfMonth.getTime());\n");
      out.write("                        weekDate.setDate(weekDate.getDate() + (i * 7));\n");
      out.write("                        const month = monthNames[weekDate.getMonth()];\n");
      out.write("                        if (!monthMap.has(month)) {\n");
      out.write("                            monthMap.set(month, 0);\n");
      out.write("                        }\n");
      out.write("                        monthMap.set(month, monthMap.get(month) + 1);\n");
      out.write("\n");
      out.write("                        const th = document.createElement('th');\n");
      out.write("                        const weekForHeader = getWeekNumber(weekDate); // KW ermitteln\n");
      out.write("                        th.textContent = weekForHeader;\n");
      out.write("\n");
      out.write("                        // NEU: Prüfung für aktuelle Woche (KW und Jahr müssen übereinstimmen)\n");
      out.write("                        if (weekForHeader === currentWeekNumber && weekDate.getFullYear() === currentYear) {\n");
      out.write("                            th.classList.add('current-week-header');\n");
      out.write("                            th.title = \"Aktuelle Woche\";\n");
      out.write("                        }\n");
      out.write("                        \n");
      out.write("                        weekHeaderRow.appendChild(th);\n");
      out.write("                    }\n");
      out.write("\n");
      out.write("                    monthMap.forEach((colSpan, month) => {\n");
      out.write("                        const th = document.createElement('th');\n");
      out.write("                        th.colSpan = colSpan;\n");
      out.write("                        th.textContent = month;\n");
      out.write("                        monthHeaderRow.appendChild(th);\n");
      out.write("                    });\n");
      out.write("\n");
      out.write("                    thead.appendChild(monthHeaderRow);\n");
      out.write("                    thead.appendChild(weekHeaderRow);\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                // Mitarbeier abteilungsweise in den Zeilen anlegen\n");
      out.write("                Object.entries(data.departments).forEach(([department, employees]) => {\n");
      out.write("                    const headerRow = document.createElement('tr');\n");
      out.write("                    headerRow.classList.add('department-header');\n");
      out.write("                    const headerCell = document.createElement('td');\n");
      out.write("                    headerCell.textContent = department;\n");
      out.write("                    if (viewType === 'days') {\n");
      out.write("                        headerCell.colSpan = data.days.length + 1;\n");
      out.write("                    } else if (viewType === 'weeks') {   \n");
      out.write("                        headerCell.colSpan = 21; // Mitarbeiter + 20 Wochen\n");
      out.write("                    }\n");
      out.write("                    \n");
      out.write("                    headerRow.appendChild(headerCell);\n");
      out.write("                    tbody.appendChild(headerRow);\n");
      out.write("\n");
      out.write("                    // 1. Hauptzeile für den Mitarbeiter erstellen\n");
      out.write("                    employees.forEach(employee => {\n");
      out.write("                        const tr = document.createElement('tr');\n");
      out.write("                        tr.classList.add('employee-main');\n");
      out.write("                        tr.dataset.employeeId = employee.id;\n");
      out.write("                        tr.dataset.employeeName = (employee.name || '').toLowerCase();\n");
      out.write("                        const nameCell = document.createElement('td');\n");
      out.write("                        nameCell.textContent = employee.name;\n");
      out.write("                        nameCell.classList.add('employee-name');\n");
      out.write("                        tr.appendChild(nameCell);\n");
      out.write("\n");
      out.write("                        if (viewType === 'days') {\n");
      out.write("                            data.days.forEach(day => {\n");
      out.write("                                const td = document.createElement('td');\n");
      out.write("                                if (day.isWeekend) {\n");
      out.write("                                    td.classList.add('weekend');\n");
      out.write("                                } else if (day.isHoliday) {\n");
      out.write("                                    td.classList.add('holiday');\n");
      out.write("                                    td.title = day.holidayName;\n");
      out.write("                                } else if (employee.absences.includes(day.date)) {\n");
      out.write("                                    td.classList.add('absence');\n");
      out.write("                                } else {\n");
      out.write("                                    td.classList.add('workday');\n");
      out.write("                                }\n");
      out.write("                                \n");
      out.write("                                // NEU: Heutigen Tag in der Haupt-Mitarbeiterzeile markieren\n");
      out.write("                                if (day.date === todayString) {\n");
      out.write("                                    td.classList.add('today-marker-cell');\n");
      out.write("                                }\n");
      out.write("\n");
      out.write("                                tr.appendChild(td);\n");
      out.write("                            });\n");
      out.write("                        } else if (viewType === 'weeks') {\n");
      out.write("                            // NEU: Leere Zellen für die Wochenansicht (Hauptzeile) hinzufügen\n");
      out.write("                            let firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n");
      out.write("                            for (let i = 0; i < 20; i++) {\n");
      out.write("                                const td = document.createElement('td'); // Leere Zelle\n");
      out.write("\n");
      out.write("                                // Logik zum Prüfen der Woche\n");
      out.write("                                let weekDate = new Date(firstDayOfMonth.getTime());\n");
      out.write("                                weekDate.setDate(weekDate.getDate() + (i * 7));\n");
      out.write("                                const weekForCell = getWeekNumber(weekDate);\n");
      out.write("                                \n");
      out.write("                                if (weekForCell === currentWeekNumber && weekDate.getFullYear() === currentYear) {\n");
      out.write("                                    td.classList.add('current-week-cell');\n");
      out.write("                                }\n");
      out.write("                                tr.appendChild(td);\n");
      out.write("                            }\n");
      out.write("                        }\n");
      out.write("                        tbody.appendChild(tr);\n");
      out.write("\n");
      out.write("                        // 2. Wenn Checkbox aktiv ist, die Kapazitätszeile erstellen\n");
      out.write("                        if (showMakCapacity) {\n");
      out.write("                            const makRow = document.createElement('tr');\n");
      out.write("                            makRow.classList.add('detail-row'); // Eigene Klasse für Styling\n");
      out.write("                            // console.log('Info Employee.Kapa:', employee.capacities);\n");
      out.write("                            // console.log('Info Employee.Abwesenheit:', employee.absences);\n");
      out.write("\n");
      out.write("                            const makNameCell = document.createElement('td');\n");
      out.write("                            makNameCell.textContent = 'MAK-Kapazität';\n");
      out.write("                            makNameCell.classList.add('employee-name', 'detail-row-label');\n");
      out.write("                            makRow.appendChild(makNameCell);\n");
      out.write("\n");
      out.write("                            if (viewType === 'days') {\n");
      out.write("                                data.days.forEach(day => {\n");
      out.write("                                    const td = document.createElement('td');\n");
      out.write("                                    const capacity = getCapacityForDate(employee.capacities, day.date);\n");
      out.write("                                    // console.log('Info Employee.Kapa:', capacity);\n");
      out.write("                                    if (capacity !== null) {\n");
      out.write("                                        // td.textContent = capacity + '%';\n");
      out.write("                                        if (!day.isWeekend && !day.isHoliday) {\n");
      out.write("                                            td.textContent = (capacity.value/100).toFixed(2);\n");
      out.write("                                            // Wenn das highlight-Flag gesetzt ist, die CSS-Klasse hinzufügen\n");
      out.write("                                            if (capacity.highlight) {\n");
      out.write("                                                td.classList.add('highlight');\n");
      out.write("                                            }\n");
      out.write("                                        }\n");
      out.write("                                    }\n");
      out.write("                                    // Hier können optional noch Klassen für Styling (weekend, etc.) hinzugefügt werden\n");
      out.write("                                    if (day.isWeekend) td.classList.add('weekend');\n");
      out.write("                                    \n");
      out.write("                                    // NEU: Heutigen Tag markieren\n");
      out.write("                                    if (day.date === todayString) {\n");
      out.write("                                        td.classList.add('today-marker-cell');\n");
      out.write("                                    }\n");
      out.write("\n");
      out.write("                                    makRow.appendChild(td);\n");
      out.write("                                });\n");
      out.write("                            } else if (viewType === 'weeks') {\n");
      out.write("                                // Wochenansicht: Durchschnittliche Kapazität pro Woche berechnen\n");
      out.write("                                let firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n");
      out.write("                                for (let i = 0; i < 20; i++) {\n");
      out.write("                                    let weekDate = new Date(firstDayOfMonth.getTime()); \n");
      out.write("                                    weekDate.setDate(weekDate.getDate() + (i * 7));\n");
      out.write("                                    // Berechne Start- und Enddatum der Woche (Montag bis Sonntag)\n");
      out.write("                                    let weekStart = new Date(weekDate);\n");
      out.write("                                    weekStart.setDate(weekStart.getDate() - weekStart.getDay() + 2); // Montag\n");
      out.write("                                    let weekEnd = new Date(weekStart);\n");
      out.write("                                    weekEnd.setDate(weekEnd.getDate() + 6); // Sonntag\n");
      out.write("                                    \n");
      out.write("                                    let daysInWeek;\n");
      out.write("                                    for (let j = 0; j < 7; j++) {\n");
      out.write("                                        let dDate = new Date(weekStart);\n");
      out.write("                                        dDate.setDate(dDate.getDate() + j);\n");
      out.write("                                        let dDateStr = dDate.toISOString().split('T')[0];\n");
      out.write("                                        let dayInfo = data.days.find(d => d.date === dDateStr);\n");
      out.write("                                        if (dDateStr) {\n");
      out.write("                                            if (!daysInWeek) daysInWeek = [];   \n");
      out.write("                                            daysInWeek.push(dDateStr);\n");
      out.write("                                        }\n");
      out.write("                                    }\n");
      out.write("                                    \n");
      out.write("                                    // Berechne die durchschnittliche Kapazität für diese Tage\n");
      out.write("                                    let totalCapacity = 0;\n");
      out.write("                                    let count = 0;\n");
      out.write("                                    daysInWeek.forEach(day => {\n");
      out.write("                                        let cap = getCapacityForDate(employee.capacities, day);\n");
      out.write("                                        if (cap !== null) {\n");
      out.write("                                            totalCapacity += cap.value;\n");
      out.write("                                            count++;\n");
      out.write("                                        }\n");
      out.write("                                    });\n");
      out.write("\n");
      out.write("                                    const avgCapacity = count > 0 ? (totalCapacity / count) : null;\n");
      out.write("                                    const td = document.createElement('td');\n");
      out.write("                                    if (avgCapacity !== null) {\n");
      out.write("                                        td.textContent = (avgCapacity/100).toFixed(2);\n");
      out.write("                                    }\n");
      out.write("                                    \n");
      out.write("                                    // NEU: Prüfung für aktuelle Woche\n");
      out.write("                                    const weekForCell = getWeekNumber(weekDate);\n");
      out.write("                                    if (weekForCell === currentWeekNumber && weekDate.getFullYear() === currentYear) {\n");
      out.write("                                        td.classList.add('current-week-cell');\n");
      out.write("                                    }\n");
      out.write("\n");
      out.write("                                    makRow.appendChild(td);\n");
      out.write("                                }\n");
      out.write("                            }\n");
      out.write("                            tbody.appendChild(makRow);\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                        // 3. Verfügbarkeit anzeigen ---\n");
      out.write("                        if (showAvailability) {\n");
      out.write("                            const availabilityRow = document.createElement('tr');\n");
      out.write("                            availabilityRow.classList.add('detail-row');\n");
      out.write("\n");
      out.write("                            const availabilityLabelCell = document.createElement('td');\n");
      out.write("                            availabilityLabelCell.textContent = 'Verfügbarkeit';\n");
      out.write("                            availabilityLabelCell.classList.add('employee-name', 'detail-row-label');\n");
      out.write("                            availabilityRow.appendChild(availabilityLabelCell);\n");
      out.write("\n");
      out.write("                            if (viewType === 'days') {\n");
      out.write("                                // console.log ('Days');\n");
      out.write("                                data.days.forEach(day => {\n");
      out.write("                                    // console.log ('Datum: ', day);\n");
      out.write("                                    const td = document.createElement('td');\n");
      out.write("                                    const availability = getAvailabilityForDate(day, employee);\n");
      out.write("                                    if (!day.isWeekend && !day.isHoliday) {\n");
      out.write("                                        td.textContent = (availability/100).toFixed(2);\n");
      out.write("                                    }\n");
      out.write("                                    if (day.isWeekend) td.classList.add('weekend');\n");
      out.write("                                    \n");
      out.write("                                    // NEU: Heutigen Tag markieren\n");
      out.write("                                    if (day.date === todayString) {\n");
      out.write("                                        td.classList.add('today-marker-cell');\n");
      out.write("                                    }\n");
      out.write("\n");
      out.write("                                    availabilityRow.appendChild(td);\n");
      out.write("                                });\n");
      out.write("                                // tbody.appendChild(availabilityRow);\n");
      out.write("                            } else if (viewType === 'weeks') {\n");
      out.write("                                // Wochenansicht\n");
      out.write("                                let firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n");
      out.write("                                for (let i = 0; i < 20; i++) {\n");
      out.write("                                    let weekDate = new Date(firstDayOfMonth.getTime()); \n");
      out.write("                                    weekDate.setDate(weekDate.getDate() + (i * 7));\n");
      out.write("                                    // Berechne Start- und Enddatum der Woche (Montag bis Sonntag)\n");
      out.write("                                    let weekStart = new Date(weekDate);\n");
      out.write("                                    weekStart.setDate(weekStart.getDate() - weekStart.getDay() + 2); // Montag\n");
      out.write("                                    let weekEnd = new Date(weekStart);\n");
      out.write("                                    weekEnd.setDate(weekEnd.getDate() + 6); // Sonntag\n");
      out.write("                                    \n");
      out.write("                                    let daysInWeek;\n");
      out.write("                                    for (let j = 0; j < 7; j++) {\n");
      out.write("                                        let dDate = new Date(weekStart);\n");
      out.write("                                        dDate.setDate(dDate.getDate() + j);\n");
      out.write("                                        let dDateStr = dDate.toISOString().split('T')[0];\n");
      out.write("                                        let dayInfo = data.daysinweeks.find(d => d.date === dDateStr);\n");
      out.write("                                        // console.log(' DayInfo: ',dayInfo);\n");
      out.write("                                        if (dDateStr) {\n");
      out.write("                                            if (!daysInWeek) daysInWeek = [];   \n");
      out.write("                                            daysInWeek.push(dayInfo);\n");
      out.write("                                        }\n");
      out.write("                                    }\n");
      out.write("                                    \n");
      out.write("                                    // console.log ('daysInWeek: ',daysInWeek);\n");
      out.write("                                    // console.log ('  employee: ',employee);\n");
      out.write("                                    // Berechne die Summe der Woche\n");
      out.write("                                    let total = 0;\n");
      out.write("                                    daysInWeek.forEach(day => {\n");
      out.write("                                        // let cap = getCapacityForDate(employee.capacities, day);\n");
      out.write("                                        if (day) {\n");
      out.write("                                            // console.log('läuft am ', day + ' für ' + employee.name);\n");
      out.write("                                            let availability = getAvailabilityForDate(day, employee);\n");
      out.write("                                            // console.log('   :', day + ' - ' + employee.name + ' - ' +availability)\n");
      out.write("                                            // console.log('  Verfügbarkeit = ', availability);\n");
      out.write("                                            if (availability !== null && day.isholiday !== true && day.isWeekend !== true) {\n");
      out.write("                                                total += availability;\n");
      out.write("                                            }\n");
      out.write("                                            // console.log('  Total = ', total);\n");
      out.write("                                        }\n");
      out.write("                                        else {\n");
      out.write("                                            // console.log('Tag ist leer');\n");
      out.write("                                        }\n");
      out.write("                                    });\n");
      out.write("\n");
      out.write("                                    const td = document.createElement('td');\n");
      out.write("                                    if (total !== null) {\n");
      out.write("                                        td.textContent = (total/100).toFixed(2);\n");
      out.write("                                    }\n");
      out.write("                                    \n");
      out.write("                                    // NEU: Prüfung für aktuelle Woche\n");
      out.write("                                    const weekForCell = getWeekNumber(weekDate);\n");
      out.write("                                    if (weekForCell === currentWeekNumber && weekDate.getFullYear() === currentYear) {\n");
      out.write("                                        td.classList.add('current-week-cell');\n");
      out.write("                                    }\n");
      out.write("\n");
      out.write("                                    availabilityRow.appendChild(td);\n");
      out.write("                                    //tbody.appendChild(availabilityRow);\n");
      out.write("                                }                                \n");
      out.write("                            }\n");
      out.write("                            tbody.appendChild(availabilityRow);\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                        // 4. Aufgaben anzeigen\n");
      out.write("                        if (showTasks) {\n");
      out.write("                            const employeeTaskRow = document.createElement('tr');\n");
      out.write("                            // console.log('Dataset:', data);\n");
      out.write("                            // console.log('MA:', employee);\n");
      out.write("                            employeeTaskRow.classList.add('detail-row', 'expandable');\n");
      out.write("                            employeeTaskRow.dataset.employeeId = employee.id;\n");
      out.write("                            employeeTaskRow.dataset.holidays = JSON.stringify(data.feiertage);\n");
      out.write("                            employeeTaskRow.dataset.days = JSON.stringify(data.days);\n");
      out.write("                            employeeTaskRow.dataset.daysinweeks = JSON.stringify(data.daysinweeks);\n");
      out.write("                            employeeTaskRow.dataset.employee = JSON.stringify(employee);\n");
      out.write("                            employeeTaskRow.dataset.tasks = JSON.stringify(employee.tasks || []); // Wichtig: Leeres Array als Fallback\n");
      out.write("                            employeeTaskRow.dataset.tasks20weeks = JSON.stringify(employee.tasks20weeks || []);\n");
      out.write("                            employeeTaskRow.dataset.absences = JSON.stringify(employee.absences || []);\n");
      out.write("\n");
      out.write("                            const TaskLabelCell = document.createElement('td');\n");
      out.write("                            TaskLabelCell.innerHTML = `<span class=\"arrow-icon\">&#9662;</span> Aufgaben`;\n");
      out.write("                            // TaskLabelCell.textContent = 'Aufgaben';\n");
      out.write("                            TaskLabelCell.classList.add('employee-name', 'detail-row-label');\n");
      out.write("                            employeeTaskRow.appendChild(TaskLabelCell);\n");
      out.write("\n");
      out.write("                            if (viewType === 'days') {\n");
      out.write("                                data.days.forEach(day => {\n");
      out.write("                                    const td = document.createElement('td');\n");
      out.write("                                    const taskeffort = getTaskEffortForDate(day, employee, data.feiertage);\n");
      out.write("                                    // console.log ('Datum: ', day.date + ' --> ' + taskeffort + ' (' + employee.name + ')');\n");
      out.write("                                    if (!day.isWeekend && !day.isHoliday) {\n");
      out.write("                                        td.textContent = (taskeffort).toFixed(2);\n");
      out.write("                                    }\n");
      out.write("                                    if (day.isWeekend) td.classList.add('weekend');\n");
      out.write("                                    \n");
      out.write("                                    // NEU: Heutigen Tag markieren\n");
      out.write("                                    if (day.date === todayString) {\n");
      out.write("                                        td.classList.add('today-marker-cell');\n");
      out.write("                                    }\n");
      out.write("                                    \n");
      out.write("                                    employeeTaskRow.appendChild(td);\n");
      out.write("                                });\n");
      out.write("                                            \n");
      out.write("                            } else if (viewType === 'weeks') {\n");
      out.write("                                // Wochenansicht\n");
      out.write("                                let firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n");
      out.write("                                for (let i = 0; i < 20; i++) {\n");
      out.write("                                    let weekDate = new Date(firstDayOfMonth.getTime()); \n");
      out.write("                                    weekDate.setDate(weekDate.getDate() + (i * 7));\n");
      out.write("                                    // Berechne Start- und Enddatum der Woche (Montag bis Sonntag)\n");
      out.write("                                    let weekStart = new Date(weekDate);\n");
      out.write("                                    weekStart.setDate(weekStart.getDate() - weekStart.getDay() + 2); // Montag\n");
      out.write("                                    let weekEnd = new Date(weekStart);\n");
      out.write("                                    weekEnd.setDate(weekEnd.getDate() + 6); // Sonntag\n");
      out.write("                                    \n");
      out.write("                                    let daysInWeek;\n");
      out.write("                                    for (let j = 0; j < 7; j++) {\n");
      out.write("                                        let dDate = new Date(weekStart);\n");
      out.write("                                        dDate.setDate(dDate.getDate() + j);\n");
      out.write("                                        let dDateStr = dDate.toISOString().split('T')[0];\n");
      out.write("                                        let dayInfo = data.daysinweeks.find(d => d.date === dDateStr);\n");
      out.write("                                        // console.log(' DayInfo: ',dayInfo);\n");
      out.write("                                        if (dDateStr) {\n");
      out.write("                                            if (!daysInWeek) daysInWeek = [];   \n");
      out.write("                                            daysInWeek.push(dayInfo);\n");
      out.write("                                        }\n");
      out.write("                                    }\n");
      out.write("\n");
      out.write("                                    // Berechne die Summe der Woche\n");
      out.write("                                    let total = 0;\n");
      out.write("                                    daysInWeek.forEach(day => {\n");
      out.write("                                        if (day) {\n");
      out.write("                                            // console.log('läuft am ', day + ' für ' + employee.name);\n");
      out.write("                                            const taskeffort = getTaskEffortForDate(day, employee, data.feiertage);\n");
      out.write("                                        \n");
      out.write("                                            if (!day.isWeekend && !day.isHoliday) {\n");
      out.write("                                                total += taskeffort; \n");
      out.write("                                                // console.log('Datum: ',day.date);\n");
      out.write("                                            }\n");
      out.write("                                        }\n");
      out.write("                                        else {\n");
      out.write("                                            // console.log('Tag ist leer');\n");
      out.write("                                        }\n");
      out.write("                                    });\n");
      out.write("\n");
      out.write("                                    const td = document.createElement('td');\n");
      out.write("                                    if (total !== null) {\n");
      out.write("                                        td.textContent = (total).toFixed(2);\n");
      out.write("                                    }\n");
      out.write("                                    \n");
      out.write("                                    // NEU: Prüfung für aktuelle Woche\n");
      out.write("                                    const weekForCell = getWeekNumber(weekDate);\n");
      out.write("                                    if (weekForCell === currentWeekNumber && weekDate.getFullYear() === currentYear) {\n");
      out.write("                                        td.classList.add('current-week-cell');\n");
      out.write("                                    }\n");
      out.write("                                    \n");
      out.write("                                    employeeTaskRow.appendChild(td);\n");
      out.write("                                }\n");
      out.write("                            } \n");
      out.write("                            tbody.appendChild(employeeTaskRow);           \n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                        // 5. Auslastung (Workload) anzeigen\n");
      out.write("                        if (showWorkload) {\n");
      out.write("                            const WorkloadRow = document.createElement('tr');\n");
      out.write("                            WorkloadRow.classList.add('detail-row');\n");
      out.write("\n");
      out.write("                            const WorkloadLabelCell = document.createElement('td');\n");
      out.write("                            WorkloadLabelCell.textContent = 'Auslastung';\n");
      out.write("                            WorkloadLabelCell.classList.add('employee-name', 'detail-row-label');\n");
      out.write("                            WorkloadRow.appendChild(WorkloadLabelCell);\n");
      out.write("\n");
      out.write("                            if (viewType === 'days') {\n");
      out.write("                                data.days.forEach(day => {\n");
      out.write("                                    const td = document.createElement('td');\n");
      out.write("                                    const taskeffort = getTaskEffortForDate(day, employee, data.feiertage);\n");
      out.write("                                    const availability = getAvailabilityForDate(day, employee);\n");
      out.write("                                    const workload = taskeffort / (availability/100)*100;\n");
      out.write("                                    if (!day.isWeekend && !day.isHoliday) {\n");
      out.write("                                        if (!availability==0) {\n");
      out.write("                                            td.textContent = (workload).toFixed(0) + '%';\n");
      out.write("                                            td.style.backgroundColor = getWorkloadColor(workload, data.colors);\n");
      out.write("                                        }\n");
      out.write("                                        else {\n");
      out.write("                                            if (workload > 0) {\n");
      out.write("                                                td.textContent = '∞';\n");
      out.write("                                                td.style.backgroundColor = getWorkloadColor(workload, data.colors);\n");
      out.write("                                            }\n");
      out.write("                                            else\n");
      out.write("                                            td.textContent = '';\n");
      out.write("                                        }\n");
      out.write("                                    }\n");
      out.write("\n");
      out.write("                                    // const wlcolor = getWorkloadColor(workload, data.colors);\n");
      out.write("\n");
      out.write("                                    // console.log ('Color: ', workload + ' / ' + wlcolor);\n");
      out.write("                                    // td.style.backgroundColor = getWorkloadColor(taskeffort, data.colors);\n");
      out.write("                                    if (day.isWeekend) td.classList.add('weekend');\n");
      out.write("                                    \n");
      out.write("                                    // NEU: Heutigen Tag markieren\n");
      out.write("                                    if (day.date === todayString) {\n");
      out.write("                                        td.classList.add('today-marker-cell');\n");
      out.write("                                    }\n");
      out.write("                                    \n");
      out.write("                                    WorkloadRow.appendChild(td);\n");
      out.write("                                });\n");
      out.write("                            } else if (viewType === 'weeks') {\n");
      out.write("                                // Wochenansicht\n");
      out.write("                                let firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n");
      out.write("                                for (let i = 0; i < 20; i++) {\n");
      out.write("                                    let weekDate = new Date(firstDayOfMonth.getTime()); \n");
      out.write("                                    weekDate.setDate(weekDate.getDate() + (i * 7));\n");
      out.write("                                    // Berechne Start- und Enddatum der Woche (Montag bis Sonntag)\n");
      out.write("                                    let weekStart = new Date(weekDate);\n");
      out.write("                                    weekStart.setDate(weekStart.getDate() - weekStart.getDay() + 2); // Montag\n");
      out.write("                                    let weekEnd = new Date(weekStart);\n");
      out.write("                                    weekEnd.setDate(weekEnd.getDate() + 6); // Sonntag\n");
      out.write("                                    const td = document.createElement('td');\n");
      out.write("                                    \n");
      out.write("                                    let daysInWeek;\n");
      out.write("                                    for (let j = 0; j < 7; j++) {\n");
      out.write("                                        let dDate = new Date(weekStart);\n");
      out.write("                                        dDate.setDate(dDate.getDate() + j);\n");
      out.write("                                        let dDateStr = dDate.toISOString().split('T')[0];\n");
      out.write("                                        let dayInfo = data.daysinweeks.find(d => d.date === dDateStr);\n");
      out.write("                                        // console.log(' DayInfo: ',dayInfo);\n");
      out.write("                                        if (dDateStr) {\n");
      out.write("                                            if (!daysInWeek) daysInWeek = [];   \n");
      out.write("                                            daysInWeek.push(dayInfo);\n");
      out.write("                                        }\n");
      out.write("                                    }\n");
      out.write("\n");
      out.write("                                    // Berechne die Summe der Woche\n");
      out.write("                                    let totalEffort = 0;\n");
      out.write("                                    let totalAvailability = 0;\n");
      out.write("                                    daysInWeek.forEach(day => {\n");
      out.write("                                        if (day) {\n");
      out.write("                                            const taskeffort = getTaskEffortForDate(day, employee, data.feiertage);\n");
      out.write("                                            if (taskeffort !== null && day.isholiday !== true && day.isWeekend !== true) {\n");
      out.write("                                                totalEffort += taskeffort;\n");
      out.write("                                            }\n");
      out.write("\n");
      out.write("                                            let availability = getAvailabilityForDate(day, employee);\n");
      out.write("                                            if (availability !== null && day.isholiday !== true && day.isWeekend !== true) {\n");
      out.write("                                                totalAvailability += availability;\n");
      out.write("                                            }\n");
      out.write("                                            // console.log('  Total = ', total);\n");
      out.write("                                        }\n");
      out.write("                                        else {\n");
      out.write("                                            // console.log('Tag ist leer');\n");
      out.write("                                        }\n");
      out.write("                                    });\n");
      out.write("\n");
      out.write("                                    const workload = totalEffort / (totalAvailability/100)*100;\n");
      out.write("                                    if (!totalAvailability==0) {\n");
      out.write("                                        td.textContent = (workload).toFixed(0) + '%';\n");
      out.write("                                        td.style.backgroundColor = getWorkloadColor(workload, data.colors);\n");
      out.write("                                    }\n");
      out.write("                                    else {\n");
      out.write("                                        if (workload > 0) {\n");
      out.write("                                            td.textContent = '∞';\n");
      out.write("                                            td.style.backgroundColor = getWorkloadColor(workload, data.colors);\n");
      out.write("                                        }\n");
      out.write("                                        else\n");
      out.write("                                        td.textContent = '';\n");
      out.write("                                    }\n");
      out.write("\n");
      out.write("                                    \n");
      out.write("                                    // if (workload !== null) {\n");
      out.write("                                    //     td.textContent = (workload).toFixed(0);\n");
      out.write("                                    // }\n");
      out.write("                                    \n");
      out.write("                                    // NEU: Prüfung für aktuelle Woche\n");
      out.write("                                    const weekForCell = getWeekNumber(weekDate);\n");
      out.write("                                    if (weekForCell === currentWeekNumber && weekDate.getFullYear() === currentYear) {\n");
      out.write("                                        td.classList.add('current-week-cell');\n");
      out.write("                                    }\n");
      out.write("                                    \n");
      out.write("                                    WorkloadRow.appendChild(td);\n");
      out.write("                                }\n");
      out.write("                            }\n");
      out.write("                            tbody.appendChild(WorkloadRow);             \n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                        // #6 Rest-Verfügbarkeit anzeigen\n");
      out.write("                        if (showRemaining) {\n");
      out.write("                            // console.log ('Remaining für ', employee.name);\n");
      out.write("                            const RemainingRow = document.createElement('tr');\n");
      out.write("                            RemainingRow.classList.add('detail-row');\n");
      out.write("\n");
      out.write("                            const RemainingLabelCell = document.createElement('td');\n");
      out.write("                            RemainingLabelCell.textContent = 'Rest-Verfügbarkeit (MAK)';\n");
      out.write("                            RemainingLabelCell.classList.add('employee-name', 'detail-row-label');\n");
      out.write("                            RemainingRow.appendChild(RemainingLabelCell);\n");
      out.write("\n");
      out.write("                            if (viewType === 'days') {\n");
      out.write("                                 // Tagesansicht\n");
      out.write("                                data.days.forEach(day => {\n");
      out.write("                                \n");
      out.write("                                    const td = document.createElement('td');\n");
      out.write("                                    const taskeffort = getTaskEffortForDate(day, employee, data.feiertage);\n");
      out.write("                                    const availability = getAvailabilityForDate(day, employee);\n");
      out.write("                                    const remaining = (availability/100) - taskeffort;   \n");
      out.write("                                    if (remaining < 0) {\n");
      out.write("                                        td.style.color  = 'red'; // Hellrot für negative Werte\n");
      out.write("                                    } \n");
      out.write("                                    else if (remaining > 0) {\n");
      out.write("                                        td.style.color  = 'green'; // Grün für positive Werte\n");
      out.write("                                    } \n");
      out.write("                                    else {\n");
      out.write("                                        td.style.color  = 'grey'; // Schwarz für Null\n");
      out.write("                                    }\n");
      out.write("\n");
      out.write("\n");
      out.write("                                    if (!day.isWeekend && !day.isHoliday) {\n");
      out.write("                                        td.textContent = (remaining).toFixed(2);                                       \n");
      out.write("                                    }\n");
      out.write("\n");
      out.write("                                    // td.style.backgroundColor = getWorkloadColor(taskeffort, data.colors);\n");
      out.write("                                    if (day.isWeekend) td.classList.add('weekend');\n");
      out.write("                                    \n");
      out.write("                                    // NEU: Heutigen Tag markieren\n");
      out.write("                                    if (day.date === todayString) {\n");
      out.write("                                        td.classList.add('today-marker-cell');\n");
      out.write("                                    }\n");
      out.write("                                    \n");
      out.write("                                    RemainingRow.appendChild(td);\n");
      out.write("                                });\n");
      out.write("                            } else if (viewType === 'weeks') {\n");
      out.write("                                // Wochenansicht\n");
      out.write("                                let firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n");
      out.write("                                for (let i = 0; i < 20; i++) {\n");
      out.write("                                    let weekDate = new Date(firstDayOfMonth.getTime()); \n");
      out.write("                                    weekDate.setDate(weekDate.getDate() + (i * 7));\n");
      out.write("                                    // Berechne Start- und Enddatum der Woche (Montag bis Sonntag)\n");
      out.write("                                    let weekStart = new Date(weekDate);\n");
      out.write("                                    weekStart.setDate(weekStart.getDate() - weekStart.getDay() + 2); // Montag\n");
      out.write("                                    let weekEnd = new Date(weekStart);\n");
      out.write("                                    weekEnd.setDate(weekEnd.getDate() + 6); // Sonntag\n");
      out.write("                                    \n");
      out.write("                                    let daysInWeek;\n");
      out.write("                                    for (let j = 0; j < 7; j++) {\n");
      out.write("                                        let dDate = new Date(weekStart);\n");
      out.write("                                        dDate.setDate(dDate.getDate() + j);\n");
      out.write("                                        let dDateStr = dDate.toISOString().split('T')[0];\n");
      out.write("                                        let dayInfo = data.daysinweeks.find(d => d.date === dDateStr);\n");
      out.write("                                        // console.log(' DayInfo: ',dayInfo);\n");
      out.write("                                        if (dDateStr) {\n");
      out.write("                                            if (!daysInWeek) daysInWeek = [];   \n");
      out.write("                                            daysInWeek.push(dayInfo);\n");
      out.write("                                        }\n");
      out.write("                                    }\n");
      out.write("                                    \n");
      out.write("                                    // Berechne die Summe der Woche\n");
      out.write("                                    let totalAvailability = 0;\n");
      out.write("                                    let totalTaskEffort = 0;\n");
      out.write("                                    daysInWeek.forEach(day => {\n");
      out.write("                                        // let cap = getCapacityForDate(employee.capacities, day);\n");
      out.write("                                        if (day) {\n");
      out.write("                                            // console.log('läuft am ', day + ' für ' + employee.name);\n");
      out.write("                                            let availability = getAvailabilityForDate(day, employee);\n");
      out.write("                                            let taskeffort = getTaskEffortForDate(day, employee, data.feiertage);\n");
      out.write("                                            // console.log('   :', day + ' - ' + employee.name + ' - ' +availability)\n");
      out.write("                                            // console.log('  Verfügbarkeit = ', availability);\n");
      out.write("                                            if (availability !== null && day.isholiday !== true && day.isWeekend !== true) {\n");
      out.write("                                                totalAvailability += availability;\n");
      out.write("                                            }\n");
      out.write("                                            if (!day.isWeekend && !day.isHoliday) {\n");
      out.write("                                                totalTaskEffort += taskeffort; \n");
      out.write("                                            }\n");
      out.write("                                            // console.log('  Total = ', total);\n");
      out.write("                                        }\n");
      out.write("                                        else {\n");
      out.write("                                            // console.log('Tag ist leer');\n");
      out.write("                                        }\n");
      out.write("                                    });\n");
      out.write("\n");
      out.write("                                    const td = document.createElement('td');\n");
      out.write("                                    const remaining = (totalAvailability/100) - totalTaskEffort;\n");
      out.write("                                    if (remaining < 0) {\n");
      out.write("                                        td.style.color  = 'red'; // Hellrot für negative Werte\n");
      out.write("                                    } \n");
      out.write("                                    else if (remaining > 0) {\n");
      out.write("                                        td.style.color  = 'green'; // Grün für positive Werte\n");
      out.write("                                    } \n");
      out.write("                                    else {\n");
      out.write("                                        td.style.color  = 'grey'; // Schwarz für Null\n");
      out.write("                                    } \n");
      out.write("\n");
      out.write("                                    \n");
      out.write("                                    if (remaining !== null) {\n");
      out.write("                                        td.textContent = (remaining).toFixed(2);\n");
      out.write("                                    }\n");
      out.write("                                    \n");
      out.write("                                    // NEU: Prüfung für aktuelle Woche\n");
      out.write("                                    const weekForCell = getWeekNumber(weekDate);\n");
      out.write("                                    if (weekForCell === currentWeekNumber && weekDate.getFullYear() === currentYear) {\n");
      out.write("                                        td.classList.add('current-week-cell');\n");
      out.write("                                    }\n");
      out.write("\n");
      out.write("                                    RemainingRow.appendChild(td);\n");
      out.write("                                    //tbody.appendChild(availabilityRow);\n");
      out.write("                                } \n");
      out.write("                            }\n");
      out.write("                            tbody.appendChild(RemainingRow);             \n");
      out.write("                        };\n");
      out.write("                    });\n");
      out.write("                });\n");
      out.write("                \n");
      out.write("\n");
      out.write("                const allEmployees = Object.values(data.departments).flat();\n");
      out.write("                // console.log('Alle Mitarbeiter:', allEmployees);\n");
      out.write("\n");
      out.write("                // #1: Zusammenfassung für MAK-Kapazität ---\n");
      out.write("                if (showMakCapacity) {\n");
      out.write("                    // Die Summenzeile erstellen\n");
      out.write("                    const summaryRow = document.createElement('tr');\n");
      out.write("                    summaryRow.classList.add('summary-row');\n");
      out.write("\n");
      out.write("                    const summaryLabelCell = document.createElement('td');\n");
      out.write("                    summaryLabelCell.textContent = 'MAK-Kapazität';\n");
      out.write("                    summaryLabelCell.classList.add('employee-name', 'summary-label');\n");
      out.write("                    summaryRow.appendChild(summaryLabelCell);\n");
      out.write("\n");
      out.write("                    if (viewType === 'days') {\n");
      out.write("                        // 1. Array für die Tagessummen initialisieren\n");
      out.write("                        const dailyTotals = Array(data.days.length).fill(0);\n");
      out.write("\n");
      out.write("                        // 2. Durch jeden Tag des Monats iterieren\n");
      out.write("                        data.days.forEach((day, index) => {\n");
      out.write("                            // Für jeden Tag die Kapazität aller Mitarbeiter aufaddieren\n");
      out.write("                            allEmployees.forEach(employee => {\n");
      out.write("                                const capacityInfo = getCapacityForDate(employee.capacities, day.date);\n");
      out.write("                                // console.log('capacityInfo_2:', capacityInfo);\n");
      out.write("                                if (capacityInfo && typeof capacityInfo.value === 'number') {\n");
      out.write("                                    dailyTotals[index] += capacityInfo.value;\n");
      out.write("                                }\n");
      out.write("                            });\n");
      out.write("                        });\n");
      out.write("                        // 3. Zellen für jede Tagessumme erstellen und füllen\n");
      out.write("                        dailyTotals.forEach((total, index) => {\n");
      out.write("                            const td = document.createElement('td');\n");
      out.write("                            // Summe nur anzeigen, wenn sie größer als 0 ist\n");
      out.write("                            // console.log('Summe:', 'Index = ' + index + ': ' + total);\n");
      out.write("                            // if (total > 0) {\n");
      out.write("                            if (!data.days[index].isWeekend && !data.days[index].isHoliday && total > 0) {       \n");
      out.write("                                td.textContent = (total/100).toFixed(2);\n");
      out.write("                            }\n");
      out.write("                            if (data.days[index].isWeekend) {\n");
      out.write("                                td.classList.add('weekend');\n");
      out.write("                            }\n");
      out.write("                            \n");
      out.write("                            // NEU: Heutigen Tag markieren (hier über index)\n");
      out.write("                            if (data.days[index].date === todayString) {\n");
      out.write("                                td.classList.add('today-marker-cell');\n");
      out.write("                            }\n");
      out.write("\n");
      out.write("                            summaryRow.appendChild(td);\n");
      out.write("                        });\n");
      out.write("                    } else if (viewType === 'weeks') {\n");
      out.write("                        // Wochenansicht\n");
      out.write("                        let firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);    \n");
      out.write("\n");
      out.write("                        // 1. Array für die Tagessummen initialisieren\n");
      out.write("                        const weekTotals = Array(20).fill(0);\n");
      out.write("                        \n");
      out.write("                        // Durch alle Wochen interieren\n");
      out.write("                        for (let i = 0; i < 20; i++) {\n");
      out.write("                            let weekDate = new Date(firstDayOfMonth.getTime()); \n");
      out.write("                            weekDate.setDate(weekDate.getDate() + (i * 7));\n");
      out.write("                            // Berechne Start- und Enddatum der Woche (Montag bis Sonntag)\n");
      out.write("                            let weekStart = new Date(weekDate);\n");
      out.write("                            weekStart.setDate(weekStart.getDate() - weekStart.getDay() + 2); // Montag\n");
      out.write("                            let weekEnd = new Date(weekStart);\n");
      out.write("                            weekEnd.setDate(weekEnd.getDate() + 6); // Sonntag\n");
      out.write("                            \n");
      out.write("                            let daysInWeek;\n");
      out.write("                            for (let j = 0; j < 7; j++) {\n");
      out.write("                                let dDate = new Date(weekStart);\n");
      out.write("                                dDate.setDate(dDate.getDate() + j);\n");
      out.write("                                let dDateStr = dDate.toISOString().split('T')[0];\n");
      out.write("                                let dayInfo = data.days.find(d => d.date === dDateStr);\n");
      out.write("                                if (dDateStr) {\n");
      out.write("                                    if (!daysInWeek) daysInWeek = [];   \n");
      out.write("                                    daysInWeek.push(dDateStr);\n");
      out.write("                                }\n");
      out.write("                            }\n");
      out.write("\n");
      out.write("                            // console.log('Woche ' + (i+1) + ' (' + weekStart.toISOString().split('T')[0] + ' bis ' + weekEnd.toISOString().split('T')[0] + '):');\n");
      out.write("                            \n");
      out.write("                            // Berechne die durchschnittliche Kapazität für diese Tage\n");
      out.write("                            // let totalCapacity = 0;\n");
      out.write("                            let count = 0;\n");
      out.write("                            let countEmployees = 0;\n");
      out.write("                            daysInWeek.forEach(day => {\n");
      out.write("                                // Für jeden Tag die Kapazität aller Mitarbeiter aufaddieren\n");
      out.write("                                allEmployees.forEach(employee => {\n");
      out.write("                                    let cap = getCapacityForDate(employee.capacities, day);\n");
      out.write("                                    // console.log('  Mitarbeiter: ' + employee.name + ' am ' + day + ' mit ' + (cap ? cap.value : 'keine') + ' MAK-Kapazität');\n");
      out.write("                                    if (cap && typeof cap.value ===\"number\") {\n");
      out.write("                                        //totalCapacity += cap.value;\n");
      out.write("                                        weekTotals[i] += cap.value;\n");
      out.write("                                        count++;\n");
      out.write("                                        countEmployees++;\n");
      out.write("                                    }\n");
      out.write("                                });\n");
      out.write("                            });\n");
      out.write("\n");
      out.write("                            countEmployees = countEmployees / 7;\n");
      out.write("\n");
      out.write("                            // console.log('  Anzahl der Tage mit Kapazität: ' + count);\n");
      out.write("                            // console.log('  Anzahl der Mitarbeiter: ' + countEmployees);\n");
      out.write("                            // console.log('  Gesamtkapazität der Woche: ' + weekTotals[i]);\n");
      out.write("\n");
      out.write("                            const avgCapacity = count > 0 ? (weekTotals[i] / count * countEmployees /100) : null;\n");
      out.write("                            const td = document.createElement('td');\n");
      out.write("                            if (avgCapacity !== null) {\n");
      out.write("                                td.textContent = (avgCapacity).toFixed(2);\n");
      out.write("                            }\n");
      out.write("                            \n");
      out.write("                            // NEU: Prüfung für aktuelle Woche\n");
      out.write("                            const weekForCell = getWeekNumber(weekDate);\n");
      out.write("                            if (weekForCell === currentWeekNumber && weekDate.getFullYear() === currentYear) {\n");
      out.write("                                td.classList.add('current-week-cell');\n");
      out.write("                            }\n");
      out.write("                            \n");
      out.write("                            summaryRow.appendChild(td);\n");
      out.write("                        }\n");
      out.write("                    }\n");
      out.write("                    // Die fertige Zeile an die Tabelle anhängen\n");
      out.write("                    tbody.appendChild(summaryRow);\n");
      out.write("                }\n");
      out.write("                \n");
      out.write("                // #2: Zusammenfassung für Verfügbarkeit ---\n");
      out.write("                if (showAvailability) {\n");
      out.write("                    // Die Summenzeile erstellen\n");
      out.write("                    const summaryRow = document.createElement('tr');\n");
      out.write("                    summaryRow.classList.add('summary-row');\n");
      out.write("\n");
      out.write("                    const summaryLabelCell = document.createElement('td');\n");
      out.write("                    summaryLabelCell.textContent = 'Verfügbarkeit';\n");
      out.write("                    summaryLabelCell.classList.add('employee-name', 'summary-label');\n");
      out.write("                    summaryRow.appendChild(summaryLabelCell);\n");
      out.write("\n");
      out.write("\n");
      out.write("                    if (viewType === 'days') {\n");
      out.write("                        // 1. Array für die Tagessummen initialisieren\n");
      out.write("                        const dailyAvailabilityTotals = Array(data.days.length).fill(0);\n");
      out.write("\n");
      out.write("                        // 2. Durch jeden Tag des Monats iterieren\n");
      out.write("                        data.days.forEach((day, index) => {\n");
      out.write("                            allEmployees.forEach(employee => {\n");
      out.write("                                const availability = getAvailabilityForDate(day, employee);\n");
      out.write("                                // if (typeof availability === 'number') {\n");
      out.write("                                if (!data.days[index].isWeekend && !data.days[index].isHoliday && typeof availability === 'number') {     \n");
      out.write("                                    dailyAvailabilityTotals[index] += availability;\n");
      out.write("                                }\n");
      out.write("                                // console.log('Gesamt: ', index + ' --> ' + dailyAvailabilityTotals[index]);\n");
      out.write("                            });\n");
      out.write("                        });\n");
      out.write("\n");
      out.write("                        \n");
      out.write("\n");
      out.write("                        // 4. Zellen für jede Tagessumme erstellen und füllen\n");
      out.write("                        dailyAvailabilityTotals.forEach((total, index) => {\n");
      out.write("                            const td = document.createElement('td');\n");
      out.write("                            if (total > 0) {\n");
      out.write("                                td.textContent = (total/100).toFixed(2);\n");
      out.write("                            }\n");
      out.write("                            if (data.days[index].isWeekend) {\n");
      out.write("                                td.classList.add('weekend');\n");
      out.write("                            }\n");
      out.write("                            \n");
      out.write("                            // NEU: Heutigen Tag markieren (hier über index)\n");
      out.write("                            if (data.days[index].date === todayString) {\n");
      out.write("                                td.classList.add('today-marker-cell');\n");
      out.write("                            }\n");
      out.write("\n");
      out.write("                            summaryRow.appendChild(td);\n");
      out.write("                        });\n");
      out.write("\n");
      out.write("                        \n");
      out.write("                    } else if (viewType === 'weeks') {\n");
      out.write("                        // Wochenansicht\n");
      out.write("                        let firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);    \n");
      out.write("\n");
      out.write("                        // 1. Array für die Tagessummen initialisieren\n");
      out.write("                        const weekAvailabilityTotals = Array(20).fill(0);\n");
      out.write("\n");
      out.write("\n");
      out.write("                        // console.log('DaysInWeeks', data.daysinweeks);\n");
      out.write("                        \n");
      out.write("                        // Durch alle Wochen interieren\n");
      out.write("                        for (let i = 0; i < 20; i++) {\n");
      out.write("                            let weekDate = new Date(firstDayOfMonth.getTime()); \n");
      out.write("                            weekDate.setDate(weekDate.getDate() + (i * 7));\n");
      out.write("                            // Berechne Start- und Enddatum der Woche (Montag bis Sonntag)\n");
      out.write("                            let weekStart = new Date(weekDate);\n");
      out.write("                            weekStart.setDate(weekStart.getDate() - weekStart.getDay() + 2); // Montag\n");
      out.write("                            let weekEnd = new Date(weekStart);\n");
      out.write("                            weekEnd.setDate(weekEnd.getDate() + 6); // Sonntag\n");
      out.write("                            \n");
      out.write("                            let daysInWeek;\n");
      out.write("                            for (let j = 0; j < 7; j++) {\n");
      out.write("                                let dDate = new Date(weekStart);\n");
      out.write("                                dDate.setDate(dDate.getDate() + j);\n");
      out.write("                                let dDateStr = dDate.toISOString().split('T')[0];\n");
      out.write("                                let dayInfo = data.daysinweeks.find(d => d.date === dDateStr);\n");
      out.write("                                if (dayInfo) {\n");
      out.write("                                    if (!daysInWeek) daysInWeek = [];   \n");
      out.write("                                    daysInWeek.push(dayInfo);\n");
      out.write("                                }\n");
      out.write("                            }\n");
      out.write("\n");
      out.write("                            // Berechne die Summe der Woche\n");
      out.write("                            daysInWeek.forEach(day => {\n");
      out.write("                                // Für jeden Tag die Verfügbarkeit aller Mitarbeiter aufaddieren\n");
      out.write("                                // console.log ('Tag:', day);\n");
      out.write("                                if (day.isWeekend || day.isHoliday) {\n");
      out.write("                                    // console.log('  Überspringe Wochenende/Feiertag am ' + day.date);\n");
      out.write("                                    return; // Überspringe Wochenenden und Feiertage\n");
      out.write("                                } else {\n");
      out.write("                                    // console.log('  Berücksichtige Tag am ' + day.date);\n");
      out.write("                                \n");
      out.write("                                    allEmployees.forEach(employee => {\n");
      out.write("                                        const availability = getAvailabilityForDate(day, employee);\n");
      out.write("                                        // console.log('Mitarbeiter: ' + employee.name + ' am ' + day.date + ' mit ' + (availability !== null ? availability : 'keine') + ' Verfügbarkeit');\n");
      out.write("                                        if (availability && typeof availability === 'number') {\n");
      out.write("                                            weekAvailabilityTotals[i] += availability;\n");
      out.write("                                        }\n");
      out.write("                                    });\n");
      out.write("                                }\n");
      out.write("                            });\n");
      out.write("\n");
      out.write("                            // console.log('----- Woche ' + (i+1) + ' (' + weekStart.toISOString().split('T')[0] + ' bis ' + weekEnd.toISOString().split('T')[0] + '): ' + weekAvailabilityTotals[i]);\n");
      out.write("\n");
      out.write("                            const td = document.createElement('td');\n");
      out.write("                            if (weekAvailabilityTotals[i] !== null) {\n");
      out.write("                                td.textContent = (weekAvailabilityTotals[i]/100).toFixed(2);\n");
      out.write("                            }\n");
      out.write("                            \n");
      out.write("                            // NEU: Prüfung für aktuelle Woche\n");
      out.write("                            const weekForCell = getWeekNumber(weekDate);\n");
      out.write("                            if (weekForCell === currentWeekNumber && weekDate.getFullYear() === currentYear) {\n");
      out.write("                                td.classList.add('current-week-cell');\n");
      out.write("                            }\n");
      out.write("                            \n");
      out.write("                            summaryRow.appendChild(td);\n");
      out.write("                        }\n");
      out.write("                        \n");
      out.write("                        // Die fertige Zeile an die Tabelle anhängen\n");
      out.write("                        tbody.appendChild(summaryRow);\n");
      out.write("                    }       \n");
      out.write("                }       \n");
      out.write("\n");
      out.write("                // #3: Zusammenfassung für Verfügbarkeit in % ---\n");
      out.write("                if (showAvailabilityPercent) {\n");
      out.write("                    // Die Summenzeile erstellen\n");
      out.write("                    const summaryRow = document.createElement('tr');\n");
      out.write("                    summaryRow.classList.add('summary-row');\n");
      out.write("\n");
      out.write("                    const summaryLabelCell = document.createElement('td');\n");
      out.write("                    summaryLabelCell.textContent = 'Verfügbarkeit (Team)';\n");
      out.write("                    summaryLabelCell.classList.add('employee-name', 'summary-label');\n");
      out.write("                    summaryRow.appendChild(summaryLabelCell);\n");
      out.write("\n");
      out.write("                    if (viewType === 'days') {\n");
      out.write("                        // 1. Array für die Tagessummen initialisieren\n");
      out.write("                        const dailyAvailabilitPercent = Array(data.days.length).fill(0);\n");
      out.write("                        const dailyTotals = Array(data.days.length).fill(0);\n");
      out.write("                        // console.log('dailyAvailabilitPercent:', dailyAvailabilitPercent);\n");
      out.write("\n");
      out.write("                        // 2. Durch jeden Tag des Monats iterieren\n");
      out.write("                        data.days.forEach((day, index) => {\n");
      out.write("                            allEmployees.forEach(employee => {\n");
      out.write("                                const availabilityPercent = getAvailabilityForDate(day, employee);\n");
      out.write("                                const capacityInfo = getCapacityForDate(employee.capacities, day.date);\n");
      out.write("                                if (typeof availabilityPercent === 'number') {\n");
      out.write("                                    dailyAvailabilitPercent[index] += availabilityPercent;\n");
      out.write("                                }\n");
      out.write("                                if (capacityInfo && typeof capacityInfo.value === 'number') {\n");
      out.write("                                    dailyTotals[index] += capacityInfo.value;\n");
      out.write("                                }\n");
      out.write("                            });\n");
      out.write("                        });\n");
      out.write("\n");
      out.write("                        \n");
      out.write("\n");
      out.write("                        // 4. Zellen für jede Tagessumme erstellen und füllen\n");
      out.write("                        dailyAvailabilitPercent.forEach((total, index) => {\n");
      out.write("                            const td = document.createElement('td');\n");
      out.write("                            \n");
      out.write("                            // if (total > 0) {\n");
      out.write("                            if (!data.days[index].isWeekend && !data.days[index].isHoliday) {\n");
      out.write("                                td.textContent = (total/dailyTotals[index]*100).toFixed(0) + '%';\n");
      out.write("                                // console.log('Farbe:', getColorForPercentage(total/dailyTotals[index]*100));\n");
      out.write("                                td.style.backgroundColor = getColorForPercentage(total/dailyTotals[index]*100);\n");
      out.write("                                // const PercentValue = 100 - total/dailyTotals[index]*100;\n");
      out.write("                                // console.log (PercentValue);\n");
      out.write("                                // if (PercentValue >= 100) {\n");
      out.write("                                //     td.style.backgroundColor = getWorkloadColor(100, data.colors);\n");
      out.write("                                // }\n");
      out.write("                                // else {\n");
      out.write("                                    \n");
      out.write("                                //     td.style.backgroundColor = getWorkloadColor(PercentValue, data.colors);\n");
      out.write("                                // }\n");
      out.write("                                \n");
      out.write("                            }\n");
      out.write("                            if (data.days[index].isWeekend) {\n");
      out.write("                                td.classList.add('weekend');\n");
      out.write("                            }\n");
      out.write("                            \n");
      out.write("                            // NEU: Heutigen Tag markieren (hier über index)\n");
      out.write("                            if (data.days[index].date === todayString) {\n");
      out.write("                                td.classList.add('today-marker-cell');\n");
      out.write("                            }\n");
      out.write("                            \n");
      out.write("                            summaryRow.appendChild(td);\n");
      out.write("                        });\n");
      out.write("                    } else if (viewType === 'weeks') {\n");
      out.write("                        // Wochenansicht\n");
      out.write("                        let firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);    \n");
      out.write("\n");
      out.write("                        // 1. Array für die Tagessummen initialisieren\n");
      out.write("                        const weekTotals = Array(20).fill(0);\n");
      out.write("                        const weekAvailabilityTotals = Array(20).fill(0);\n");
      out.write("                        \n");
      out.write("                        // Durch alle Wochen interieren\n");
      out.write("                        for (let i = 0; i < 20; i++) {\n");
      out.write("                            let weekDate = new Date(firstDayOfMonth.getTime()); \n");
      out.write("                            weekDate.setDate(weekDate.getDate() + (i * 7));\n");
      out.write("                            // Berechne Start- und Enddatum der Woche (Montag bis Sonntag)\n");
      out.write("                            let weekStart = new Date(weekDate);\n");
      out.write("                            weekStart.setDate(weekStart.getDate() - weekStart.getDay() + 2); // Montag\n");
      out.write("                            let weekEnd = new Date(weekStart);\n");
      out.write("                            weekEnd.setDate(weekEnd.getDate() + 6); // Sonntag\n");
      out.write("                            \n");
      out.write("                            // console.log('Woche ' + (i+1) + ' (' + weekStart.toISOString().split('T')[0] + ' bis ' + weekEnd.toISOString().split('T')[0]);\n");
      out.write("                            \n");
      out.write("                            // nur Datum\n");
      out.write("                            /**\n");
      out.write("                            let daysInWeek;\n");
      out.write("                            for (let j = 0; j < 7; j++) {\n");
      out.write("                                let dDate = new Date(weekStart);\n");
      out.write("                                dDate.setDate(dDate.getDate() + j);\n");
      out.write("                                let dDateStr = dDate.toISOString().split('T')[0];\n");
      out.write("                                let dayInfo = data.days.find(d => d.date === dDateStr);\n");
      out.write("                                if (dDateStr) {\n");
      out.write("                                    if (!daysInWeek) daysInWeek = [];   \n");
      out.write("                                    daysInWeek.push(dDateStr);\n");
      out.write("                                }\n");
      out.write("                            }\n");
      out.write("                            **/\n");
      out.write("                            \n");
      out.write("                            // Datum mit DayInfo\n");
      out.write("                            let daysInWeek;\n");
      out.write("                            for (let j = 0; j < 7; j++) {\n");
      out.write("                                let dDate = new Date(weekStart);\n");
      out.write("                                dDate.setDate(dDate.getDate() + j);\n");
      out.write("                                let dDateStr = dDate.toISOString().split('T')[0];\n");
      out.write("                                let dayInfo = data.daysinweeks.find(d => d.date === dDateStr);\n");
      out.write("                                if (dayInfo) {\n");
      out.write("                                    if (!daysInWeek) daysInWeek = [];   \n");
      out.write("                                    daysInWeek.push(dayInfo);\n");
      out.write("                                }\n");
      out.write("                            }\n");
      out.write("                            \n");
      out.write("                            // Berechne die  Kapazität und die Verfügbarkeit für diese Tage\n");
      out.write("                            // let totalCapacity = 0;\n");
      out.write("                            let count = 0;\n");
      out.write("                            let countEmployees = 0;\n");
      out.write("                            let countWorkdays = 0;\n");
      out.write("                            daysInWeek.forEach(day => {\n");
      out.write("                                // Für jeden Tag die Kapazität aller Mitarbeiter aufaddieren\n");
      out.write("                                // console.log ('Tag:', day);\n");
      out.write("                                // if (day.isWeekend || day.isHoliday) {\n");
      out.write("                                    // console.log('  Überspringe Wochenende/Feiertag am ' + day.date);\n");
      out.write("                                    // return; // Überspringe Wochenenden und Feiertage\n");
      out.write("                                // } else {\n");
      out.write("                                    allEmployees.forEach(employee => {\n");
      out.write("                                        // Kapazität\n");
      out.write("                                        \n");
      out.write("                                        \n");
      out.write("                                        //Verfügbarkeit\n");
      out.write("                                        if (day.isWeekend || day.isHoliday) {\n");
      out.write("                                            // console.log('  Überspringe Wochenende/Feiertag am ' + day.date);\n");
      out.write("                                        } else {                                \n");
      out.write("                                            countWorkdays++;    \n");
      out.write("                                            const availability = getAvailabilityForDate(day, employee);\n");
      out.write("                                                // console.log('Mitarbeiter: ' + employee.name + ' am ' + day.date + ' mit ' + (availability !== null ? availability : 'keine') + ' Verfügbarkeit');\n");
      out.write("                                                if (availability && typeof availability === 'number') {\n");
      out.write("                                                    weekAvailabilityTotals[i] += availability;\n");
      out.write("                                                }\n");
      out.write("                                            let cap = getCapacityForDate(employee.capacities, day.date);                                   \n");
      out.write("                                            if (cap && typeof cap.value ===\"number\") {\n");
      out.write("                                                let capValue = cap.value;\n");
      out.write("                                                weekTotals[i] += cap.value;\n");
      out.write("                                                count++;\n");
      out.write("                                                countEmployees++;\n");
      out.write("                                            }\n");
      out.write("                                        }\n");
      out.write("\n");
      out.write("                                    });\n");
      out.write("                                // }\n");
      out.write("                            });\n");
      out.write("\n");
      out.write("                            countEmployees = countEmployees / 7;\n");
      out.write("\n");
      out.write("                            // console.log('  Anzahl der Tage mit Kapazität: ' + count);\n");
      out.write("                            // console.log('  Anzahl der Arbeitstage: ' + countWorkdays);\n");
      out.write("                            // console.log('  Anzahl der Mitarbeiter: ' + countEmployees);\n");
      out.write("                            // console.log('  Kapazität der Woche: ' + weekTotals[i]);\n");
      out.write("                            // console.log('  Verfügbarkeit der Woche: ' + weekAvailabilityTotals[i]);\n");
      out.write("\n");
      out.write("                            const avgCapacity = count > 0 ? (weekAvailabilityTotals[i] / weekTotals[i]) : null;\n");
      out.write("                            const td = document.createElement('td');\n");
      out.write("                            if (avgCapacity !== null) {\n");
      out.write("                                // td.textContent = (avgCapacity).toFixed(2);\n");
      out.write("                                td.textContent = (avgCapacity*100).toFixed(0) + '%';\n");
      out.write("                                td.style.backgroundColor = getColorForPercentage(avgCapacity*100);\n");
      out.write("                            }\n");
      out.write("                            \n");
      out.write("                            // NEU: Prüfung für aktuelle Woche\n");
      out.write("                            const weekForCell = getWeekNumber(weekDate);\n");
      out.write("                            if (weekForCell === currentWeekNumber && weekDate.getFullYear() === currentYear) {\n");
      out.write("                                td.classList.add('current-week-cell');\n");
      out.write("                            }\n");
      out.write("                            \n");
      out.write("                            summaryRow.appendChild(td);\n");
      out.write("                        }\n");
      out.write("                    } \n");
      out.write("\n");
      out.write("                    // 5. Die fertige Zeile an die Tabelle anhängen\n");
      out.write("                    tbody.appendChild(summaryRow);\n");
      out.write("                }     \n");
      out.write("\n");
      out.write("                // #4: Zusammenfassung für Aufgaben\n");
      out.write("                if (showTasks) {\n");
      out.write("                    // Die Summenzeile erstellen\n");
      out.write("                    const summaryRow = document.createElement('tr');\n");
      out.write("                    summaryRow.classList.add('summary-row');\n");
      out.write("\n");
      out.write("                    const summaryLabelCell = document.createElement('td');\n");
      out.write("                    summaryLabelCell.textContent = 'Aufgaben';\n");
      out.write("                    summaryLabelCell.classList.add('employee-name', 'summary-label');\n");
      out.write("                    summaryRow.appendChild(summaryLabelCell);\n");
      out.write("\n");
      out.write("                    if (viewType === 'days') {\n");
      out.write("                        // 1. Array für die Tagessummen initialisieren\n");
      out.write("                        const TaskTotals = Array(data.days.length).fill(0);\n");
      out.write("                        \n");
      out.write("                        // console.log('Daata:', data);\n");
      out.write("                        // console.log('Days:', data.days);\n");
      out.write("                        // console.log('DaysInWeeks:', data.daysinweeks);\n");
      out.write("\n");
      out.write("                        // 2. Durch jeden Tag des Monats iterieren\n");
      out.write("                        data.days.forEach((day, index) => {\n");
      out.write("                            allEmployees.forEach(employee => {\n");
      out.write("                                const Tasks = getTaskEffortForDate(day, employee, data.feiertage);\n");
      out.write("                                if (!data.days[index].isWeekend && !data.days[index].isHoliday) {      \n");
      out.write("                                    TaskTotals[index] += Tasks;\n");
      out.write("                                }\n");
      out.write("                            });\n");
      out.write("                        });\n");
      out.write("\n");
      out.write("                        // 4. Zellen für jede Tagessumme erstellen und füllen\n");
      out.write("                        TaskTotals.forEach((total, index) => {\n");
      out.write("                            const td = document.createElement('td');\n");
      out.write("                            if (total > 0) {\n");
      out.write("                                td.textContent = total.toFixed(2);\n");
      out.write("                            }\n");
      out.write("                            if (data.days[index].isWeekend) {\n");
      out.write("                                td.classList.add('weekend');\n");
      out.write("                            }\n");
      out.write("                            \n");
      out.write("                            // NEU: Heutigen Tag markieren (hier über index)\n");
      out.write("                            if (data.days[index].date === todayString) {\n");
      out.write("                                td.classList.add('today-marker-cell');\n");
      out.write("                            }\n");
      out.write("\n");
      out.write("                            summaryRow.appendChild(td);\n");
      out.write("                        });\n");
      out.write("                    } else if (viewType === 'weeks') {\n");
      out.write("                        // Wochenansicht\n");
      out.write("                        let firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);    \n");
      out.write("\n");
      out.write("                        // 1. Array für die Tagessummen initialisieren\n");
      out.write("                        const TaskTotals = Array(20).fill(0);\n");
      out.write("                                                \n");
      out.write("                        // Durch alle Wochen interieren\n");
      out.write("                        for (let i = 0; i < 20; i++) {\n");
      out.write("                            let weekDate = new Date(firstDayOfMonth.getTime()); \n");
      out.write("                            weekDate.setDate(weekDate.getDate() + (i * 7));\n");
      out.write("                            // Berechne Start- und Enddatum der Woche (Montag bis Sonntag)\n");
      out.write("                            let weekStart = new Date(weekDate);\n");
      out.write("                            weekStart.setDate(weekStart.getDate() - weekStart.getDay() + 2); // Montag\n");
      out.write("                            let weekEnd = new Date(weekStart);\n");
      out.write("                            weekEnd.setDate(weekEnd.getDate() + 6); // Sonntag\n");
      out.write("\n");
      out.write("                            // Datum mit DayInfo\n");
      out.write("                            let daysInWeek;\n");
      out.write("                            for (let j = 0; j < 7; j++) {\n");
      out.write("                                let dDate = new Date(weekStart);\n");
      out.write("                                dDate.setDate(dDate.getDate() + j);\n");
      out.write("                                let dDateStr = dDate.toISOString().split('T')[0];\n");
      out.write("                                let dayInfo = data.daysinweeks.find(d => d.date === dDateStr);\n");
      out.write("                                if (dayInfo) {\n");
      out.write("                                    if (!daysInWeek) daysInWeek = [];   \n");
      out.write("                                    daysInWeek.push(dayInfo);\n");
      out.write("                                }\n");
      out.write("                            }\n");
      out.write("                            // console.log('DaysInWeeks (komplett):', data.daysinweeks);\n");
      out.write("                            // console.log('DaysInWeeks:', daysInWeek);\n");
      out.write("                            // console.log('Woche ' + (i+1) + ' (' + weekStart.toISOString().split('T')[0] + ' bis ' + weekEnd.toISOString().split('T')[0] + '):');\n");
      out.write("\n");
      out.write("                            // Berechne die Summe der Woche\n");
      out.write("                            daysInWeek.forEach(day => {\n");
      out.write("                                // Für jeden Tag die Verfügbarkeit aller Mitarbeiter aufaddieren\n");
      out.write("                                if (day.isWeekend || day.isHoliday) {\n");
      out.write("                                    // console.log('  Überspringe Wochenende/Feiertag am ' + day.date);\n");
      out.write("                                    // return; // Überspringe Wochenenden und Feiertage\n");
      out.write("                                } else {\n");
      out.write("                                    // console.log('Tag: ' + day.date);\n");
      out.write("                                \n");
      out.write("                                    allEmployees.forEach(employee => {\n");
      out.write("                                        // console.log('  Mitarbeiter: ' + employee.name);\n");
      out.write("                                        let Tasks = getTaskEffortForDate(day, employee, data.feiertage);\n");
      out.write("                                        // Tasks = (Tasks).toFixed(2);\n");
      out.write("                                        // console.log('    Aufgaben: ' + Tasks);\n");
      out.write("                                        // if (!data.days[i].isWeekend && !data.days[i].isHoliday) {      \n");
      out.write("                                            TaskTotals[i] += Tasks;\n");
      out.write("                                        // }\n");
      out.write("                                    });\n");
      out.write("                                }\n");
      out.write("                            });\n");
      out.write("\n");
      out.write("                           //  console.log('--> Wochenwert: ' + TaskTotals[i]);\n");
      out.write("\n");
      out.write("                            const td = document.createElement('td');\n");
      out.write("                            if (TaskTotals[i] !== null) {\n");
      out.write("                                td.textContent = (TaskTotals[i]).toFixed(2);\n");
      out.write("                            }\n");
      out.write("                            \n");
      out.write("                            // NEU: Prüfung für aktuelle Woche\n");
      out.write("                            const weekForCell = getWeekNumber(weekDate);\n");
      out.write("                            if (weekForCell === currentWeekNumber && weekDate.getFullYear() === currentYear) {\n");
      out.write("                                td.classList.add('current-week-cell');\n");
      out.write("                            }\n");
      out.write("\n");
      out.write("                            summaryRow.appendChild(td);\n");
      out.write("                        }\n");
      out.write("                    }\n");
      out.write("\n");
      out.write("                    // 5. Die fertige Zeile an die Tabelle anhängen\n");
      out.write("                    tbody.appendChild(summaryRow);\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                // #4: Zusammenfassung für Workload (Team)\n");
      out.write("                if (showWorkloadTeam) {\n");
      out.write("                    // Die Summenzeile erstellen\n");
      out.write("                    const summaryRow = document.createElement('tr');\n");
      out.write("                    summaryRow.classList.add('summary-row');\n");
      out.write("\n");
      out.write("                    const summaryLabelCell = document.createElement('td');\n");
      out.write("                    summaryLabelCell.textContent = 'Auslastung (Team)';\n");
      out.write("                    summaryLabelCell.classList.add('employee-name', 'summary-label');\n");
      out.write("                    summaryRow.appendChild(summaryLabelCell);\n");
      out.write("\n");
      out.write("\n");
      out.write("                    if (viewType === 'days') {\n");
      out.write("\n");
      out.write("                        // 1. Array für die Tagessummen initialisieren\n");
      out.write("                        const dailyAvailabilityTotals = Array(data.days.length).fill(0);\n");
      out.write("                        const TaskTotals = Array(data.days.length).fill(0);\n");
      out.write("\n");
      out.write("                        // 2. Durch jeden Tag des Monats iterieren\n");
      out.write("                        data.days.forEach((day, index) => {\n");
      out.write("                            allEmployees.forEach(employee => {\n");
      out.write("                                const availability = getAvailabilityForDate(day, employee);\n");
      out.write("                                // if (typeof availability === 'number') {\n");
      out.write("                                if (!data.days[index].isWeekend && !data.days[index].isHoliday && typeof availability === 'number') {     \n");
      out.write("                                    dailyAvailabilityTotals[index] += availability;\n");
      out.write("                                }\n");
      out.write("                                \n");
      out.write("                                const Tasks = getTaskEffortForDate(day, employee, data.days.filter(d => d.isHoliday));\n");
      out.write("                                if (!data.days[index].isWeekend && !data.days[index].isHoliday) {      \n");
      out.write("                                    TaskTotals[index] += Tasks;\n");
      out.write("                                }\n");
      out.write("                            });\n");
      out.write("                        });\n");
      out.write("\n");
      out.write("                        \n");
      out.write("\n");
      out.write("                        // 4. Zellen für jede Tagessumme erstellen und füllen\n");
      out.write("                        // console.log('dailyAvailabilityTotals', dailyAvailabilityTotals);\n");
      out.write("                        // console.log('TaskTotals', TaskTotals);\n");
      out.write("                        let ergebnis;\n");
      out.write("\n");
      out.write("                        dailyAvailabilityTotals.forEach((total, index) => {\n");
      out.write("                            const td = document.createElement('td');\n");
      out.write("                            ergebnis = (TaskTotals[index] *100 / dailyAvailabilityTotals[index]);\n");
      out.write("                            // console.log('ergebnis (', index + ') ' + ergebnis);\n");
      out.write("                            if (ergebnis > 0) {\n");
      out.write("                                td.textContent = (ergebnis*100).toFixed(0) + '%';\n");
      out.write("                                td.style.backgroundColor = getColorForPercentage(100 - ergebnis*100, data.colors);\n");
      out.write("                            }\n");
      out.write("                            if (data.days[index].isWeekend) {\n");
      out.write("                                td.classList.add('weekend');\n");
      out.write("                            }\n");
      out.write("                            \n");
      out.write("                            // NEU: Heutigen Tag markieren (hier über index)\n");
      out.write("                            if (data.days[index].date === todayString) {\n");
      out.write("                                td.classList.add('today-marker-cell');\n");
      out.write("                            }\n");
      out.write("\n");
      out.write("                            summaryRow.appendChild(td);\n");
      out.write("                        });\n");
      out.write("\n");
      out.write("                    } else if (viewType === 'weeks') {\n");
      out.write("                        // Wochenansicht\n");
      out.write("                        let firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);    \n");
      out.write("\n");
      out.write("                        // 1. Array für die Tagessummen initialisieren\n");
      out.write("                        const weekAvailabilityTotals = Array(20).fill(0);\n");
      out.write("                        const TaskTotals = Array(20).fill(0);\n");
      out.write("                        \n");
      out.write("                        // Durch alle Wochen interieren\n");
      out.write("                        for (let i = 0; i < 20; i++) {\n");
      out.write("                            let weekDate = new Date(firstDayOfMonth.getTime()); \n");
      out.write("                            weekDate.setDate(weekDate.getDate() + (i * 7));\n");
      out.write("                            // Berechne Start- und Enddatum der Woche (Montag bis Sonntag)\n");
      out.write("                            let weekStart = new Date(weekDate);\n");
      out.write("                            weekStart.setDate(weekStart.getDate() - weekStart.getDay() + 2); // Montag\n");
      out.write("                            let weekEnd = new Date(weekStart);\n");
      out.write("                            weekEnd.setDate(weekEnd.getDate() + 6); // Sonntag\n");
      out.write("                            \n");
      out.write("                            let daysInWeek;\n");
      out.write("                            for (let j = 0; j < 7; j++) {\n");
      out.write("                                let dDate = new Date(weekStart);\n");
      out.write("                                dDate.setDate(dDate.getDate() + j);\n");
      out.write("                                let dDateStr = dDate.toISOString().split('T')[0];\n");
      out.write("                                let dayInfo = data.daysinweeks.find(d => d.date === dDateStr);\n");
      out.write("                                if (dayInfo) {\n");
      out.write("                                    if (!daysInWeek) daysInWeek = [];   \n");
      out.write("                                    daysInWeek.push(dayInfo);\n");
      out.write("                                }\n");
      out.write("                            }\n");
      out.write("\n");
      out.write("                            // Berechne die Summe der Woche\n");
      out.write("                            daysInWeek.forEach(day => {\n");
      out.write("                                // Für jeden Tag die Verfügbarkeit aller Mitarbeiter aufaddieren\n");
      out.write("                                // console.log ('Tag:', day);\n");
      out.write("                                if (day.isWeekend || day.isHoliday) {\n");
      out.write("                                    // console.log('  Überspringe Wochenende/Feiertag am ' + day.date);\n");
      out.write("                                    return; // Überspringe Wochenenden und Feiertage\n");
      out.write("                                } else {\n");
      out.write("                                    allEmployees.forEach(employee => {\n");
      out.write("                                        const availability = getAvailabilityForDate(day, employee);\n");
      out.write("                                        // console.log('Mitarbeiter: ' + employee.name + ' am ' + day.date + ' mit ' + (availability !== null ? availability : 'keine') + ' Verfügbarkeit');\n");
      out.write("                                        if (availability && typeof availability === 'number') {\n");
      out.write("                                            weekAvailabilityTotals[i] += availability;\n");
      out.write("                                        }\n");
      out.write("\n");
      out.write("                                        let Tasks = getTaskEffortForDate(day, employee, data.feiertage);\n");
      out.write("                                        TaskTotals[i] += Tasks;\n");
      out.write("                                    });\n");
      out.write("                                }\n");
      out.write("                            });\n");
      out.write("\n");
      out.write("                            // console.log('----- Woche ' + (i+1) + ' (' + weekStart.toISOString().split('T')[0] + ' bis ' + weekEnd.toISOString().split('T')[0] + '): ' + weekAvailabilityTotals[i]);\n");
      out.write("\n");
      out.write("                            const td = document.createElement('td');\n");
      out.write("                            const workloadPercent = (TaskTotals[i] *100 / weekAvailabilityTotals[i]);\n");
      out.write("                            if (workloadPercent !== null) {\n");
      out.write("                                td.textContent = (workloadPercent*100).toFixed(0) + '%';\n");
      out.write("                                td.style.backgroundColor = getColorForPercentage(workloadPercent*100);\n");
      out.write("                            }\n");
      out.write("                            \n");
      out.write("                            // NEU: Prüfung für aktuelle Woche\n");
      out.write("                            const weekForCell = getWeekNumber(weekDate);\n");
      out.write("                            if (weekForCell === currentWeekNumber && weekDate.getFullYear() === currentYear) {\n");
      out.write("                                td.classList.add('current-week-cell');\n");
      out.write("                            }\n");
      out.write("\n");
      out.write("                            summaryRow.appendChild(td);\n");
      out.write("                        }\n");
      out.write("                        \n");
      out.write("                        // Die fertige Zeile an die Tabelle anhängen\n");
      out.write("                        tbody.appendChild(summaryRow);\n");
      out.write("                    }\n");
      out.write("\n");
      out.write("                    // 5. Die fertige Zeile an die Tabelle anhängen\n");
      out.write("                    tbody.appendChild(summaryRow);\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                // #5: Zusammenfassung für Rest-Verfügbarkeit\n");
      out.write("                if (showRemaining  || showRemainingTeam) {\n");
      out.write("                    // Die Summenzeile erstellen\n");
      out.write("                    const summaryRow = document.createElement('tr');\n");
      out.write("                    summaryRow.classList.add('summary-row');\n");
      out.write("\n");
      out.write("                    const summaryLabelCell = document.createElement('td');\n");
      out.write("                    summaryLabelCell.textContent = 'Rest-Verfügbarkeit (MAK)';\n");
      out.write("                    summaryLabelCell.classList.add('employee-name', 'summary-label');\n");
      out.write("                    summaryRow.appendChild(summaryLabelCell);\n");
      out.write("\n");
      out.write("\n");
      out.write("                    if (viewType === 'days') {\n");
      out.write("\n");
      out.write("                        // 1. Array für die Tagessummen initialisieren\n");
      out.write("                        const TaskTotals = Array(data.days.length).fill(0);\n");
      out.write("                        const dailyAvailabilityTotals = Array(data.days.length).fill(0);\n");
      out.write("\n");
      out.write("                        // 2. Durch jeden Tag des Monats iterieren\n");
      out.write("                        data.days.forEach((day, index) => {\n");
      out.write("                            allEmployees.forEach(employee => {\n");
      out.write("                                const Tasks = getTaskEffortForDate(day, employee, data.days.filter(d => d.isHoliday));\n");
      out.write("                                if (!data.days[index].isWeekend && !data.days[index].isHoliday) {      \n");
      out.write("                                    TaskTotals[index] += Tasks;\n");
      out.write("                                }\n");
      out.write("\n");
      out.write("                                const availability = getAvailabilityForDate(day, employee);\n");
      out.write("                                if (!data.days[index].isWeekend && !data.days[index].isHoliday && typeof availability === 'number') {     \n");
      out.write("                                    dailyAvailabilityTotals[index] += availability;\n");
      out.write("                                }\n");
      out.write("                            });\n");
      out.write("                        });\n");
      out.write("\n");
      out.write("                        \n");
      out.write("\n");
      out.write("                        // 4. Zellen für jede Tagessumme erstellen und füllen\n");
      out.write("                        TaskTotals.forEach((total, index) => {\n");
      out.write("                            const td = document.createElement('td');\n");
      out.write("                            const RemainValue = dailyAvailabilityTotals[index]/100 - total;\n");
      out.write("                            const RemainValuePercent = RemainValue / (RemainValue + total);\n");
      out.write("                            // console.log ('Remaining:   ', ' --> ' + RemainValue ); \n");
      out.write("                            // console.log ('Total:       ', ' --> ' + total ); \n");
      out.write("                            // console.log ('Remaining_%: ', ' ----> ' + RemainValuePercent );  \n");
      out.write("                            \n");
      out.write("                            if (data.days[index].isWeekend) {\n");
      out.write("                                td.classList.add('weekend');\n");
      out.write("                            }\n");
      out.write("                            else {\n");
      out.write("                                td.textContent = RemainValue.toFixed(2);\n");
      out.write("                            }\n");
      out.write("                                \n");
      out.write("                            if (RemainValue < 0) {\n");
      out.write("                                td.style.color  = 'red'; // Hellrot für negative Werte\n");
      out.write("                                td.style.backgroundColor = data.colors.calendar_workload_color_high;\n");
      out.write("                            } \n");
      out.write("                            else if (RemainValue > 0) {\n");
      out.write("                                td.style.color  = 'green'; // Grün für positive Werte\n");
      out.write("                                td.style.backgroundColor = getColorForPercentage(100-RemainValue, data.colors);\n");
      out.write("                            } \n");
      out.write("                            else {\n");
      out.write("                                td.style.color  = 'grey'; // Schwarz für Null\n");
      out.write("                                td.style.backgroundColor = getColorForPercentage(100-RemainValue, data.colors);\n");
      out.write("                            }\n");
      out.write("                            \n");
      out.write("                            // NEU: Heutigen Tag markieren (hier über index)\n");
      out.write("                            if (data.days[index].date === todayString) {\n");
      out.write("                                td.classList.add('today-marker-cell');\n");
      out.write("                            }\n");
      out.write("\n");
      out.write("                            summaryRow.appendChild(td);\n");
      out.write("                        });\n");
      out.write("\n");
      out.write("                    } else if (viewType === 'weeks') {\n");
      out.write("                        // Wochenansicht\n");
      out.write("                        let firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);    \n");
      out.write("\n");
      out.write("                        // 1. Array für die Tagessummen initialisieren\n");
      out.write("                        const weekAvailabilityTotals = Array(20).fill(0);\n");
      out.write("                        const TaskTotals = Array(20).fill(0);\n");
      out.write("                        \n");
      out.write("                        // Durch alle Wochen interieren\n");
      out.write("                        for (let i = 0; i < 20; i++) {\n");
      out.write("                            let weekDate = new Date(firstDayOfMonth.getTime()); \n");
      out.write("                            weekDate.setDate(weekDate.getDate() + (i * 7));\n");
      out.write("                            // Berechne Start- und Enddatum der Woche (Montag bis Sonntag)\n");
      out.write("                            let weekStart = new Date(weekDate);\n");
      out.write("                            weekStart.setDate(weekStart.getDate() - weekStart.getDay() + 2); // Montag\n");
      out.write("                            let weekEnd = new Date(weekStart);\n");
      out.write("                            weekEnd.setDate(weekEnd.getDate() + 6); // Sonntag\n");
      out.write("                            \n");
      out.write("                            let daysInWeek;\n");
      out.write("                            for (let j = 0; j < 7; j++) {\n");
      out.write("                                let dDate = new Date(weekStart);\n");
      out.write("                                dDate.setDate(dDate.getDate() + j);\n");
      out.write("                                let dDateStr = dDate.toISOString().split('T')[0];\n");
      out.write("                                let dayInfo = data.daysinweeks.find(d => d.date === dDateStr);\n");
      out.write("                                if (dayInfo) {\n");
      out.write("                                    if (!daysInWeek) daysInWeek = [];   \n");
      out.write("                                    daysInWeek.push(dayInfo);\n");
      out.write("                                }\n");
      out.write("                            }\n");
      out.write("\n");
      out.write("                            // Berechne die Summe der Woche\n");
      out.write("                            daysInWeek.forEach(day => {\n");
      out.write("                                // Für jeden Tag die Verfügbarkeit aller Mitarbeiter aufaddieren\n");
      out.write("                                // console.log ('Tag:', day);\n");
      out.write("                                if (day.isWeekend || day.isHoliday) {\n");
      out.write("                                    // console.log('  Überspringe Wochenende/Feiertag am ' + day.date);\n");
      out.write("                                    return; // Überspringe Wochenenden und Feiertage\n");
      out.write("                                } else {\n");
      out.write("                                    // console.log('  Berücksichtige Tag am ' + day.date);\n");
      out.write("                                \n");
      out.write("                                    allEmployees.forEach(employee => {\n");
      out.write("                                        const availability = getAvailabilityForDate(day, employee);\n");
      out.write("                                        // console.log('Mitarbeiter: ' + employee.name + ' am ' + day.date + ' mit ' + (availability !== null ? availability : 'keine') + ' Verfügbarkeit');\n");
      out.write("                                        if (availability && typeof availability === 'number') {\n");
      out.write("                                            weekAvailabilityTotals[i] += availability;\n");
      out.write("                                        }\n");
      out.write("                                        let Tasks = getTaskEffortForDate(day, employee, data.feiertage);\n");
      out.write("                                        TaskTotals[i] += Tasks;\n");
      out.write("                                    });\n");
      out.write("                                }\n");
      out.write("                            });\n");
      out.write("\n");
      out.write("                            // console.log('----- Woche ' + (i+1) + ' (' + weekStart.toISOString().split('T')[0] + ' bis ' + weekEnd.toISOString().split('T')[0] + '): ' + weekAvailabilityTotals[i]);\n");
      out.write("\n");
      out.write("                            const td = document.createElement('td');\n");
      out.write("                            const RemainValue = weekAvailabilityTotals[i]/100 - TaskTotals[i];\n");
      out.write("                            const RemainValuePercent = RemainValue / (RemainValue + TaskTotals[i]);\n");
      out.write("\n");
      out.write("                            // console.log ('Remaining:   ', ' --> ' + RemainValuePercent );\n");
      out.write("\n");
      out.write("                            if (RemainValue !== null) {\n");
      out.write("                                td.textContent = (RemainValue).toFixed(2);\n");
      out.write("                            }\n");
      out.write("                            if (RemainValue < 0) {\n");
      out.write("                                td.style.color  = 'red'; // Hellrot für negative Werte\n");
      out.write("                                td.style.backgroundColor = data.colors.calendar_workload_color_high;\n");
      out.write("                            } \n");
      out.write("                            else if (RemainValue > 0) {\n");
      out.write("                                td.style.color  = 'green'; // Grün für positive Werte\n");
      out.write("                                td.style.backgroundColor = getColorForPercentage(RemainValuePercent*100, data.colors);\n");
      out.write("                            } \n");
      out.write("                            else {\n");
      out.write("                                td.style.color  = 'grey'; // Schwarz für Null\n");
      out.write("                                td.style.backgroundColor = getColorForPercentage(RemainValuePercent*100, data.colors);\n");
      out.write("                            }\n");
      out.write("                            \n");
      out.write("                            // NEU: Prüfung für aktuelle Woche\n");
      out.write("                            const weekForCell = getWeekNumber(weekDate);\n");
      out.write("                            if (weekForCell === currentWeekNumber && weekDate.getFullYear() === currentYear) {\n");
      out.write("                                td.classList.add('current-week-cell');\n");
      out.write("                            }\n");
      out.write("                            \n");
      out.write("                            summaryRow.appendChild(td);\n");
      out.write("                        }\n");
      out.write("                        \n");
      out.write("                        // Die fertige Zeile an die Tabelle anhängen\n");
      out.write("                        tbody.appendChild(summaryRow);\n");
      out.write("\n");
      out.write("                    }\n");
      out.write("\n");
      out.write("                    // 5. Die fertige Zeile an die Tabelle anhängen\n");
      out.write("                    tbody.appendChild(summaryRow);\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                if (data.colors) {\n");
      out.write("                    updateCalendarColors(data.colors);\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                 // Suche erneut anwenden (falls ein Suchbegriff eingegeben ist)\n");
      out.write("                const searchInput = document.getElementById('employeeSearch');\n");
      out.write("                if (searchInput && typeof window.filterEmployees === 'function') {\n");
      out.write("                    const q = searchInput.value.trim().toLowerCase();\n");
      out.write("                    window.filterEmployees(q);\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("        }\n");
      out.write("            \n");
      out.write("        // Initial update\n");
      out.write("        updateCalendar();\n");
      out.write("    </script>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fset_005f0(jakarta.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    //  c:set
    org.apache.taglibs.standard.tag.rt.core.SetTag _jspx_th_c_005fset_005f0 = (org.apache.taglibs.standard.tag.rt.core.SetTag) _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fscope_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.SetTag.class);
    boolean _jspx_th_c_005fset_005f0_reused = false;
    try {
      _jspx_th_c_005fset_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fset_005f0.setParent(null);
      // /WEB-INF/calendar_overview.jsp(7,4) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setVar("title");
      // /WEB-INF/calendar_overview.jsp(7,4) name = value type = jakarta.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setValue(new org.apache.jasper.el.JspValueExpression("/WEB-INF/calendar_overview.jsp(7,4) 'Kalender'",_jsp_getExpressionFactory().createValueExpression("Kalender",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      // /WEB-INF/calendar_overview.jsp(7,4) name = scope type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setScope("request");
      int _jspx_eval_c_005fset_005f0 = _jspx_th_c_005fset_005f0.doStartTag();
      if (_jspx_th_c_005fset_005f0.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fscope_005fnobody.reuse(_jspx_th_c_005fset_005f0);
      _jspx_th_c_005fset_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fset_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fset_005f0_reused);
    }
    return false;
  }
}
