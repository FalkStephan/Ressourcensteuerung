/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: jetty/11.0.15
 * Generated at: 2025-09-08 14:46:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class calendar_005foverview_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("jar:file:/Users/falkstephan/.m2/repository/org/glassfish/web/jakarta.servlet.jsp.jstl/2.0.0/jakarta.servlet.jsp.jstl-2.0.0.jar!/META-INF/c.tld", Long.valueOf(1602866772000L));
    _jspx_dependants.put("jar:file:/Users/falkstephan/.m2/repository/org/glassfish/web/jakarta.servlet.jsp.jstl/2.0.0/jakarta.servlet.jsp.jstl-2.0.0.jar!/META-INF/fmt.tld", Long.valueOf(1602866772000L));
    _jspx_dependants.put("file:/Users/falkstephan/.m2/repository/org/glassfish/web/jakarta.servlet.jsp.jstl/2.0.0/jakarta.servlet.jsp.jstl-2.0.0.jar", Long.valueOf(1602874032000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fscope_005fnobody;

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fscope_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fscope_005fnobody.release();
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"de\">\n");
      out.write("<head>\n");
      out.write("    ");
      if (_jspx_meth_c_005fset_005f0(_jspx_page_context))
        return;
      out.write("\n");
      out.write("    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/_header.jsp", out, false);
      out.write("\n");
      out.write("    <style>\n");
      out.write("        .calendar-container {\n");
      out.write("            overflow-x: auto;\n");
      out.write("            margin-top: 1em;\n");
      out.write("        }\n");
      out.write("        .calendar-grid {\n");
      out.write("            border-collapse: collapse;\n");
      out.write("            min-width: 100%;\n");
      out.write("        }\n");
      out.write("        .calendar-grid th, .calendar-grid td {\n");
      out.write("            border: 1px solid #ddd;\n");
      out.write("            padding: 4px;\n");
      out.write("            text-align: center;\n");
      out.write("            min-width: 30px;\n");
      out.write("        }\n");
      out.write("        .calendar-grid th {\n");
      out.write("            background-color: #f5f5f5;\n");
      out.write("            position: sticky;\n");
      out.write("            top: 0;\n");
      out.write("            z-index: 1;\n");
      out.write("        }\n");
      out.write("        /* Farben werden dynamisch per JavaScript gesetzt*/\n");
      out.write("        .calendar-grid td.weekend,\n");
      out.write("        .calendar-grid td.holiday,\n");
      out.write("        .calendar-grid td.workday,\n");
      out.write("        \n");
      out.write("        \n");
      out.write("        \n");
      out.write("        .calendar-grid td.absence {\n");
      out.write("            transition: background-color 0.3s ease;\n");
      out.write("        }\n");
      out.write("        .calendar-controls {\n");
      out.write("            margin-bottom: 1em;\n");
      out.write("            display: flex;\n");
      out.write("            gap: 1em;\n");
      out.write("            align-items: center;\n");
      out.write("        }\n");
      out.write("        .employee-name {\n");
      out.write("            position: sticky;\n");
      out.write("            left: 0;\n");
      out.write("            background: white;\n");
      out.write("            z-index: 2;\n");
      out.write("            font-weight: bold;\n");
      out.write("            border-right: 2px solid #ddd;\n");
      out.write("            padding-left: 10px !important;\n");
      out.write("            text-align: left !important;\n");
      out.write("        }\n");
      out.write("        .department-header {\n");
      out.write("            background-color: #f0f0f0;\n");
      out.write("            font-weight: bold;\n");
      out.write("            text-align: left !important;\n");
      out.write("            padding-left: 5px !important;\n");
      out.write("        }\n");
      out.write("        .department-header td {\n");
      out.write("            border-top: 2px solid #999 !important;\n");
      out.write("            border-bottom: 2px solid #999 !important;\n");
      out.write("            text-align: left !important;\n");
      out.write("        }\n");
      out.write("    </style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("    <div class=\"layout-wrapper\">\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/_nav.jsp", out, false);
      out.write("\n");
      out.write("        <main>\n");
      out.write("            <div class=\"container\">\n");
      out.write("                <h2>Kalenderübersicht</h2>\n");
      out.write("                \n");
      out.write("                <div class=\"calendar-controls\">\n");
      out.write("                    <button onclick=\"changeMonth(-1)\" class=\"button\">&lt; Vorheriger Monat</button>\n");
      out.write("                    <span id=\"currentMonth\"></span>\n");
      out.write("                    <button onclick=\"changeMonth(1)\" class=\"button\">Nächster Monat &gt;</button>\n");
      out.write("                </div>\n");
      out.write("\n");
      out.write("                <div class=\"calendar-container\">\n");
      out.write("                    <table class=\"calendar-grid\" id=\"calendarGrid\">\n");
      out.write("                        <thead>\n");
      out.write("                            <tr>\n");
      out.write("                                <th class=\"employee-name\">Mitarbeiter</th>\n");
      out.write("                                <!-- Tage werden per JavaScript eingefügt -->\n");
      out.write("                            </tr>\n");
      out.write("                        </thead>\n");
      out.write("                        <tbody>\n");
      out.write("                            <!-- Mitarbeiter und Tage werden per JavaScript eingefügt -->\n");
      out.write("                        </tbody>\n");
      out.write("                    </table>\n");
      out.write("                </div>\n");
      out.write("            </div>\n");
      out.write("        </main>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <script>\n");
      out.write("        let currentDate = new Date();\n");
      out.write("        \n");
      out.write("        function updateCalendarColors(colors) {\n");
      out.write("            // Debug-Ausgabe der Farben\n");
      out.write("            console.log('Erhaltene Farben:', colors);\n");
      out.write("            \n");
      out.write("            // Farben für verschiedene Zelltypen\n");
      out.write("            const colorMap = {\n");
      out.write("                'weekend': colors.calendar_color_weekend,\n");
      out.write("                'holiday': colors.calendar_color_holiday,\n");
      out.write("                'workday': colors.calendar_color_workday,\n");
      out.write("                'absence': colors.calendar_color_absence\n");
      out.write("            };\n");
      out.write("            \n");
      out.write("            // Farben auf alle TD-Elemente anwenden, außer der Namensspalte\n");
      out.write("            document.querySelectorAll('.calendar-grid td:not(.employee-name):not(.department-header td)').forEach(td => {\n");
      out.write("                for (const [className, color] of Object.entries(colorMap)) {\n");
      out.write("                    if (td.classList.contains(className)) {\n");
      out.write("                        td.style.backgroundColor = color;\n");
      out.write("                        break;  // Beende die Schleife, sobald eine passende Klasse gefunden wurde\n");
      out.write("                    }\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function updateCalendar() {\n");
      out.write("            fetch('");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/calendar-overview/data?' + new URLSearchParams({\n");
      out.write("                year: currentDate.getFullYear(),\n");
      out.write("                month: currentDate.getMonth() + 1\n");
      out.write("            }))\n");
      out.write("            .then(response => {\n");
      out.write("                console.log('Response Status:', response.status);\n");
      out.write("                return response.json();\n");
      out.write("            })\n");
      out.write("            .then(data => {\n");
      out.write("                // Debug-Ausgabe der gesamten Daten\n");
      out.write("                console.log('Erhaltene Daten:', data);\n");
      out.write("                \n");
      out.write("                const monthNames = [\"Januar\", \"Februar\", \"März\", \"April\", \"Mai\", \"Juni\",\n");
      out.write("                                  \"Juli\", \"August\", \"September\", \"Oktober\", \"November\", \"Dezember\"];\n");
      out.write("                \n");
      out.write("                // Aktualisiere Monatsanzeige\n");
      out.write("                document.getElementById('currentMonth').textContent = \n");
      out.write("                    monthNames[currentDate.getMonth()] + ' ' + currentDate.getFullYear();\n");
      out.write("                \n");
      out.write("                // Erstelle Tabellenkopf mit Tagen\n");
      out.write("                const headerRow = document.querySelector('#calendarGrid thead tr');\n");
      out.write("                headerRow.innerHTML = '<th class=\"employee-name\">Mitarbeiter</th>';\n");
      out.write("                \n");
      out.write("                data.days.forEach(day => {\n");
      out.write("                    const th = document.createElement('th');\n");
      out.write("                    th.textContent = day.dayOfMonth;\n");
      out.write("                    if (day.isWeekend) th.classList.add('weekend');\n");
      out.write("                    headerRow.appendChild(th);\n");
      out.write("                });\n");
      out.write("                \n");
      out.write("                // Erstelle Tabellenzeilen für Mitarbeiter, gruppiert nach Abteilungen\n");
      out.write("                const tbody = document.querySelector('#calendarGrid tbody');\n");
      out.write("                tbody.innerHTML = '';\n");
      out.write("                \n");
      out.write("                Object.entries(data.departments).forEach(([department, employees]) => {\n");
      out.write("                    // Abteilungsheader\n");
      out.write("                    const headerRow = document.createElement('tr');\n");
      out.write("                    headerRow.classList.add('department-header');\n");
      out.write("                    const headerCell = document.createElement('td');\n");
      out.write("                    headerCell.textContent = department;\n");
      out.write("                    headerCell.colSpan = data.days.length + 1; // +1 für die Namensspalte\n");
      out.write("                    headerRow.appendChild(headerCell);\n");
      out.write("                    tbody.appendChild(headerRow);\n");
      out.write("                    \n");
      out.write("                    // Mitarbeiter der Abteilung\n");
      out.write("                    employees.forEach(employee => {\n");
      out.write("                        const tr = document.createElement('tr');\n");
      out.write("                        const nameCell = document.createElement('td');\n");
      out.write("                        nameCell.textContent = employee.name;\n");
      out.write("                        nameCell.classList.add('employee-name');\n");
      out.write("                        tr.appendChild(nameCell);\n");
      out.write("                        \n");
      out.write("                        data.days.forEach(day => {\n");
      out.write("                            const td = document.createElement('td');\n");
      out.write("                            if (day.isWeekend) {\n");
      out.write("                                td.classList.add('weekend');\n");
      out.write("                            } else if (day.isHoliday) {\n");
      out.write("                                td.classList.add('holiday');\n");
      out.write("                                td.title = day.holidayName;\n");
      out.write("                            } else if (employee.absences.includes(day.date)) {\n");
      out.write("                                td.classList.add('absence');\n");
      out.write("                            } else {\n");
      out.write("                                td.classList.add('workday');\n");
      out.write("                            }\n");
      out.write("                            tr.appendChild(td);\n");
      out.write("                        });\n");
      out.write("                        \n");
      out.write("                        tbody.appendChild(tr);\n");
      out.write("                    });\n");
      out.write("                });\n");
      out.write("                \n");
      out.write("                // Farben aktualisieren nachdem alle Zellen erstellt wurden\n");
      out.write("                if (data.colors) {\n");
      out.write("                    updateCalendarColors(data.colors);\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        function changeMonth(delta) {\n");
      out.write("            currentDate.setMonth(currentDate.getMonth() + delta);\n");
      out.write("            updateCalendar();\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        // Initial update\n");
      out.write("        updateCalendar();\n");
      out.write("    </script>\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fset_005f0(jakarta.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    //  c:set
    org.apache.taglibs.standard.tag.rt.core.SetTag _jspx_th_c_005fset_005f0 = (org.apache.taglibs.standard.tag.rt.core.SetTag) _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fscope_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.SetTag.class);
    boolean _jspx_th_c_005fset_005f0_reused = false;
    try {
      _jspx_th_c_005fset_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fset_005f0.setParent(null);
      // /WEB-INF/calendar_overview.jsp(7,4) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setVar("title");
      // /WEB-INF/calendar_overview.jsp(7,4) name = value type = jakarta.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setValue(new org.apache.jasper.el.JspValueExpression("/WEB-INF/calendar_overview.jsp(7,4) 'Kalender'",_jsp_getExpressionFactory().createValueExpression("Kalender",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      // /WEB-INF/calendar_overview.jsp(7,4) name = scope type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setScope("request");
      int _jspx_eval_c_005fset_005f0 = _jspx_th_c_005fset_005f0.doStartTag();
      if (_jspx_th_c_005fset_005f0.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fscope_005fnobody.reuse(_jspx_th_c_005fset_005f0);
      _jspx_th_c_005fset_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fset_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fset_005f0_reused);
    }
    return false;
  }
}
