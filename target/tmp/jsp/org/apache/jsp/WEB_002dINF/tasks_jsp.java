/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: jetty/11.0.15
 * Generated at: 2025-09-12 14:13:12 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class tasks_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("jar:file:/Users/falkstephan/.m2/repository/org/glassfish/web/jakarta.servlet.jsp.jstl/2.0.0/jakarta.servlet.jsp.jstl-2.0.0.jar!/META-INF/c.tld", Long.valueOf(1602866772000L));
    _jspx_dependants.put("jar:file:/Users/falkstephan/.m2/repository/org/glassfish/web/jakarta.servlet.jsp.jstl/2.0.0/jakarta.servlet.jsp.jstl-2.0.0.jar!/META-INF/fmt.tld", Long.valueOf(1602866772000L));
    _jspx_dependants.put("file:/Users/falkstephan/.m2/repository/org/glassfish/web/jakarta.servlet.jsp.jstl/2.0.0/jakarta.servlet.jsp.jstl-2.0.0.jar", Long.valueOf(1602874032000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fscope_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005ffmt_005fformatDate_0026_005fvalue_005ftype_005fpattern_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fif_0026_005ftest;

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fscope_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005ffmt_005fformatDate_0026_005fvalue_005ftype_005fpattern_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fscope_005fnobody.release();
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.release();
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.release();
    _005fjspx_005ftagPool_005ffmt_005fformatDate_0026_005fvalue_005ftype_005fpattern_005fnobody.release();
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.release();
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"de\">\n");
      out.write("<head>\n");
      out.write("    ");
      if (_jspx_meth_c_005fset_005f0(_jspx_page_context))
        return;
      out.write("\n");
      out.write("    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/_header.jsp", out, false);
      out.write("\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<div class=\"layout-wrapper\">\n");
      out.write("    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/_nav.jsp", out, false);
      out.write("\n");
      out.write("    <main>\n");
      out.write("        <div class=\"container\">\n");
      out.write("            <h2>Aufgaben</h2>\n");
      out.write("\n");
      out.write("            <a href=\"tasks?action=edit\" class=\"button create\">Neue Aufgabe anlegen</a>\n");
      out.write("\n");
      out.write("            <form id=\"filterForm\" action=\"tasks\" method=\"get\" class=\"search-container\">\n");
      out.write("                <input type=\"text\" id=\"searchInput\" name=\"search\" value=\"");
      if (_jspx_meth_c_005fout_005f0(_jspx_page_context))
        return;
      out.write("\" placeholder=\"Aufgabe suchen...\">\n");
      out.write("                <select name=\"status_filter\" onchange=\"this.form.submit()\" style=\"margin-left: 1em;\">\n");
      out.write("                    <option value=\"\">-- Alle Status --</option>\n");
      out.write("                    ");
      if (_jspx_meth_c_005fforEach_005f0(_jspx_page_context))
        return;
      out.write("\n");
      out.write("                    <div class=\"filter-group\">\n");
      out.write("                        <label>\n");
      out.write("                            <input type=\"checkbox\" id=\"showAssignments\" onchange=\"updateTaskList()\">\n");
      out.write("                            alle Zuweisungen anzeigen\n");
      out.write("                        </label>\n");
      out.write("                    </div>\n");
      out.write("                </select>\n");
      out.write("            </form>\n");
      out.write("\n");
      out.write("            \n");
      out.write("            \n");
      out.write("            <table>\n");
      out.write("                <thead>\n");
      out.write("                    <tr>\n");
      out.write("                        <th>Aufgabe</th>\n");
      out.write("                        <th>Abteilung</th>\n");
      out.write("                        <th>Start</th>\n");
      out.write("                        <th>Ende</th>\n");
      out.write("                        <th>Aufwand (PT)</th>\n");
      out.write("                        <th>Status</th>\n");
      out.write("                        <th>Fortschritt (%)</th>\n");
      out.write("                        <th>Aktionen</th>\n");
      out.write("                    </tr>\n");
      out.write("                </thead>\n");
      out.write("                <tbody>\n");
      out.write("                    ");
      if (_jspx_meth_c_005fforEach_005f1(_jspx_page_context))
        return;
      out.write("\n");
      out.write("                </tbody>\n");
      out.write("            </table>\n");
      out.write("        </div>\n");
      out.write("    </main>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<script>\n");
      out.write("    const searchInput = document.getElementById('searchInput');\n");
      out.write("    const filterForm = document.getElementById('filterForm');\n");
      out.write("    let debounceTimer;\n");
      out.write("    let taskAssignments = new Map();\n");
      out.write("    let originalValues = new Map(); // Map für ursprüngliche Werte\n");
      out.write("    let assignedUsers = []; // Globales Array für zugewiesene Benutzer\n");
      out.write("\n");
      out.write("    searchInput.addEventListener('keyup', () => {\n");
      out.write("        clearTimeout(debounceTimer);\n");
      out.write("        debounceTimer = setTimeout(() => {\n");
      out.write("            filterForm.submit();\n");
      out.write("        }, 500);\n");
      out.write("    });\n");
      out.write("\n");
      out.write("    function showTaskModal(mode, btn) {\n");
      out.write("        const form = document.getElementById('taskForm');\n");
      out.write("        form.reset();\n");
      out.write("        \n");
      out.write("        const abteilungInput = document.getElementById('taskAbteilung');\n");
      out.write("        const userCanSeeAll = ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sessionScope.user.can_manage_users}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(";\n");
      out.write("\n");
      out.write("        if (mode === 'add') {\n");
      out.write("            document.getElementById('taskModalTitle').textContent = 'Neue Aufgabe';\n");
      out.write("            document.getElementById('taskAction').value = 'add';\n");
      out.write("            if (!userCanSeeAll) {\n");
      out.write("                abteilungInput.value = \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sessionScope.user.abteilung}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\";\n");
      out.write("            }\n");
      out.write("            // Zugewiesene Benutzer zurücksetzen\n");
      out.write("            loadAssignedUsers(null);\n");
      out.write("        } else {\n");
      out.write("            document.getElementById('taskModalTitle').textContent = 'Aufgabe bearbeiten';\n");
      out.write("            document.getElementById('taskAction').value = 'edit';\n");
      out.write("            const taskId = btn.dataset.id;\n");
      out.write("            document.getElementById('taskId').value = taskId;\n");
      out.write("            document.getElementById('taskName').value = btn.dataset.name;\n");
      out.write("            document.getElementById('taskStartDate').value = btn.dataset.startDate;\n");
      out.write("            document.getElementById('taskEndDate').value = btn.dataset.endDate;\n");
      out.write("            document.getElementById('taskEffort').value = btn.dataset.effortDays;\n");
      out.write("            document.getElementById('taskStatus').value = btn.dataset.statusId;\n");
      out.write("            document.getElementById('taskProgress').value = btn.dataset.progressPercent;\n");
      out.write("            abteilungInput.value = btn.dataset.abteilung;\n");
      out.write("            \n");
      out.write("            // Zugewiesene Benutzer laden\n");
      out.write("            loadAssignedUsers(taskId);\n");
      out.write("        }\n");
      out.write("        document.getElementById('taskModal').style.display = 'flex';\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    function hideTaskModal() {\n");
      out.write("        document.getElementById('taskModal').style.display = 'none';\n");
      out.write("    }\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("    function showAssignUserModal() {\n");
      out.write("        // AJAX-Aufruf um verfügbare Benutzer zu laden\n");
      out.write("        fetch('tasks?action=getAvailableUsers&abteilung=' + encodeURIComponent(document.getElementById('taskAbteilung').value))\n");
      out.write("            .then(response => response.json())\n");
      out.write("            .then(users => {\n");
      out.write("                const modal = document.createElement('div');\n");
      out.write("                modal.className = 'modal-overlay';\n");
      out.write("                modal.id = 'assignUserModal';\n");
      out.write("                modal.style.display = 'flex';\n");
      out.write("                \n");
      out.write("                const content = `\n");
      out.write("                    <div class=\"modal-content\">\n");
      out.write("                        <h3>Benutzer zuweisen</h3>\n");
      out.write("                        <div>\n");
      out.write("                            <label>Benutzer:</label>\n");
      out.write("                            <select id=\"userSelect\">\n");
      out.write("                                ");
      if (_jspx_meth_c_005fforEach_005f2(_jspx_page_context))
        return;
      out.write("\n");
      out.write("                            </select>\n");
      out.write("                        </div>\n");
      out.write("                        <div>\n");
      out.write("                            <label>Aufwand (PT):</label>\n");
      out.write("                            <input type=\"number\" id=\"userEffort\" step=\"0.1\" min=\"0\" value=\"0\" />\n");
      out.write("                        </div>\n");
      out.write("                        <div class=\"modal-buttons\">\n");
      out.write("                            <button type=\"button\" class=\"button create\" onclick=\"assignUser()\">Zuweisen</button>\n");
      out.write("                            <button type=\"button\" class=\"button delete\" onclick=\"hideAssignUserModal()\">Abbrechen</button>\n");
      out.write("                        </div>\n");
      out.write("                    </div>\n");
      out.write("                `;\n");
      out.write("                \n");
      out.write("                modal.innerHTML = content;\n");
      out.write("                document.body.appendChild(modal);\n");
      out.write("            });\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function hideAssignUserModal() {\n");
      out.write("        const modal = document.getElementById('assignUserModal');\n");
      out.write("        if (modal) {\n");
      out.write("            modal.remove();\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function assignUser() {\n");
      out.write("        const select = document.getElementById('userSelect');\n");
      out.write("        const effort = document.getElementById('userEffort').value;\n");
      out.write("        const userId = select.value;\n");
      out.write("        const userName = select.options[select.selectedIndex].text;\n");
      out.write("        \n");
      out.write("        // Benutzer zum Array hinzufügen\n");
      out.write("        assignedUsers.push({\n");
      out.write("            userId: userId,\n");
      out.write("            name: userName,\n");
      out.write("            effort: effort\n");
      out.write("        });\n");
      out.write("        \n");
      out.write("        // Benutzer-Container aktualisieren\n");
      out.write("        updateAssignedUsersDisplay();\n");
      out.write("        \n");
      out.write("        // Modal schließen\n");
      out.write("        hideAssignUserModal();\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function updateAssignedUsersDisplay() {\n");
      out.write("        const container = document.getElementById('assignedUsersContainer');\n");
      out.write("        container.innerHTML = '';\n");
      out.write("        \n");
      out.write("        assignedUsers.forEach(user => {\n");
      out.write("            const div = document.createElement('div');\n");
      out.write("            div.className = 'assigned-user';\n");
      out.write("            \n");
      out.write("            const span = document.createElement('span');\n");
      out.write("            span.textContent = user.name;\n");
      out.write("            div.appendChild(span);\n");
      out.write("            \n");
      out.write("            const button = document.createElement('button');\n");
      out.write("            button.type = 'button';\n");
      out.write("            button.className = 'button small delete';\n");
      out.write("            button.onclick = () => removeAssignedUser(user.id || user.userId);\n");
      out.write("            button.textContent = 'Entfernen';\n");
      out.write("            div.appendChild(button);\n");
      out.write("            \n");
      out.write("            const input = document.createElement('input');\n");
      out.write("            input.type = 'hidden';\n");
      out.write("            input.name = 'assigned_user_ids[]';\n");
      out.write("            input.value = user.id || user.userId;\n");
      out.write("            div.appendChild(input);\n");
      out.write("            \n");
      out.write("            container.appendChild(div);\n");
      out.write("        });\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    // Event-Listener für das Formular\n");
      out.write("    document.getElementById('taskForm').addEventListener('submit', async function(e) {\n");
      out.write("        e.preventDefault();\n");
      out.write("        \n");
      out.write("        // Erst das Task speichern/aktualisieren\n");
      out.write("        const formData = new FormData(this);\n");
      out.write("        await fetch('tasks', {\n");
      out.write("            method: 'POST',\n");
      out.write("            body: formData\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        // Dann die Benutzerzuweisungen speichern\n");
      out.write("        const taskId = formData.get('id') || (await getLastInsertedTaskId());\n");
      out.write("        const userIds = assignedUsers.map(user => user.id || user.userId);\n");
      out.write("        \n");
      out.write("        await fetch('tasks', {\n");
      out.write("            method: 'POST',\n");
      out.write("            headers: {\n");
      out.write("                'Content-Type': 'application/x-www-form-urlencoded',\n");
      out.write("            },\n");
      out.write("            body: new URLSearchParams({\n");
      out.write("                'action': 'saveAssignments',\n");
      out.write("                'taskId': taskId,\n");
      out.write("                'userIds[]': userIds\n");
      out.write("            })\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        // Seite neu laden\n");
      out.write("        window.location.reload();\n");
      out.write("    });\n");
      out.write("\n");
      out.write("    function removeAssignedUser(userId) {\n");
      out.write("        assignedUsers = assignedUsers.filter(user => user.userId !== userId);\n");
      out.write("        updateAssignedUsersDisplay();\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function loadAssignedUsers(taskId) {\n");
      out.write("        if (taskId) {\n");
      out.write("            fetch('tasks?action=getAssignedUsers&taskId=' + taskId)\n");
      out.write("                .then(response => response.json())\n");
      out.write("                .then(users => {\n");
      out.write("                    assignedUsers = users;\n");
      out.write("                    updateAssignedUsersDisplay();\n");
      out.write("                });\n");
      out.write("        } else {\n");
      out.write("            assignedUsers = [];\n");
      out.write("            updateAssignedUsersDisplay();\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    async function getLastInsertedTaskId() {\n");
      out.write("        const response = await fetch('tasks?action=getLastInsertedTaskId');\n");
      out.write("        const data = await response.json();\n");
      out.write("        return data.taskId;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("//    async function loadTaskAssignments(taskId) {\n");
      out.write("//        try {\n");
      out.write("//            if (!taskId) {\n");
      out.write("//                console.error('Keine gültige Task-ID:', taskId);\n");
      out.write("//                return [];\n");
      out.write("//            }\n");
      out.write("//\n");
      out.write("//            console.log('Lade Zuweisungen für Task:', taskId);\n");
      out.write("//            const response = await fetch('tasks?action=getAssignedUsers&taskId=' + encodeURIComponent(taskId));\n");
      out.write("//            \n");
      out.write("//            if (!response.ok) {\n");
      out.write("//                throw new Error('Fehler beim Laden der Zuweisungen');\n");
      out.write("//            }\n");
      out.write("//            \n");
      out.write("//            const assignments = await response.json();\n");
      out.write("//            console.log('Geladene Zuweisungen:', assignments);\n");
      out.write("//            return assignments;\n");
      out.write("//        } catch (error) {\n");
      out.write("//            console.error('Fehler beim Laden der Zuweisungen:', error);\n");
      out.write("//            return [];\n");
      out.write("//        }\n");
      out.write("//    }\n");
      out.write("\n");
      out.write("    /**\n");
      out.write("     * Lädt die Zuweisungen für eine bestimmte Task-ID vom Server.\n");
      out.write("     * @param {string} taskId Die ID des Tasks.\n");
      out.write("     * @returns {Promise<Array>} Ein Promise, das mit einem Array von Zuweisungsobjekten aufgelöst wird.\n");
      out.write("     */\n");
      out.write("    async function loadTaskAssignments(taskId) {\n");
      out.write("        try {\n");
      out.write("            const response = await fetch('tasks?action=getAssignedUsers&taskId=' + encodeURIComponent(taskId));\n");
      out.write("            if (!response.ok) {\n");
      out.write("                throw new Error('Netzwerkantwort war nicht OK');\n");
      out.write("            }\n");
      out.write("            const assignments = await response.json();\n");
      out.write("            console.log('Geladene Zuweisungen:', assignments);\n");
      out.write("            return assignments;\n");
      out.write("            return await response.json();\n");
      out.write("        } catch (error) {\n");
      out.write("            console.error('Fehler beim Laden der Zuweisungen:', error);\n");
      out.write("            return []; // Leeres Array im Fehlerfall zurückgeben\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    // Funktion zum Speichern der ursprünglichen Werte\n");
      out.write("    async function saveOriginalValues() {\n");
      out.write("        console.log('Alte Werte speichern');\n");
      out.write("        const taskElements = document.querySelectorAll('.task-item');\n");
      out.write("        console.log('. Taskelement:', teaskelements);\n");
      out.write("        taskElements.forEach(taskElement => {\n");
      out.write("            const taskId = taskElement.getAttribute('data-task-id');\n");
      out.write("            originalValues.set(taskId, {\n");
      out.write("                name: taskElement.querySelector('td:nth-child(1)').innerHTML,\n");
      out.write("                abteilung: taskElement.querySelector('td:nth-child(2)').innerHTML,\n");
      out.write("                start: taskElement.querySelector('td:nth-child(3)').innerHTML,\n");
      out.write("                end: taskElement.querySelector('td:nth-child(4)').innerHTML,\n");
      out.write("                effort: taskElement.querySelector('td:nth-child(5)').innerHTML\n");
      out.write("            });\n");
      out.write("        });\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    async function updateTaskList() {\n");
      out.write("        const showAssignments = document.getElementById('showAssignments').checked;\n");
      out.write("        const taskElements = document.querySelectorAll('.task-item');\n");
      out.write("\n");
      out.write("        // Zuerst alle alten Zuweisungszeilen entfernen\n");
      out.write("        document.querySelectorAll('.task-assignment-row').forEach(row => row.remove());\n");
      out.write("\n");
      out.write("        if (showAssignments) {\n");
      out.write("            for (const taskElement of taskElements) {\n");
      out.write("                const taskId = taskElement.getAttribute('data-task-id');\n");
      out.write("                if (taskId) {\n");
      out.write("                    try {\n");
      out.write("                        const assignments = await loadTaskAssignments(taskId);\n");
      out.write("                        if (assignments && assignments.length > 0) {\n");
      out.write("                            let lastElement = taskElement;\n");
      out.write("                            assignments.forEach(assignment => {\n");
      out.write("                                const newRow = document.createElement('tr');\n");
      out.write("                                newRow.className = 'task-assignment-row';\n");
      out.write("\n");
      out.write("                                // --- Zellen und deren Inhalt sicher und getrennt erstellen ---\n");
      out.write("\n");
      out.write("                                // Leere Zelle für \"Aufgabe\"\n");
      out.write("                                newRow.appendChild(document.createElement('td'));\n");
      out.write("\n");
      out.write("                                // Zelle für \"Abteilung\"\n");
      out.write("                                const cellAbteilung = document.createElement('td');\n");
      out.write("                                const divAbteilung = document.createElement('div');\n");
      out.write("                                divAbteilung.className = 'assignment-value';\n");
      out.write("                                // HIER: Wert sicher als Text setzen\n");
      out.write("                                divAbteilung.textContent = assignment.abteilung || '';\n");
      out.write("                                cellAbteilung.appendChild(divAbteilung);\n");
      out.write("                                newRow.appendChild(cellAbteilung);\n");
      out.write("\n");
      out.write("                                // Zelle für \"Name\"\n");
      out.write("                                const cellName = document.createElement('td');\n");
      out.write("                                const divName = document.createElement('div');\n");
      out.write("                                divName.className = 'assignment-value';\n");
      out.write("                                // HIER: Wert sicher als Text setzen\n");
      out.write("                                divName.textContent = assignment.name || '';\n");
      out.write("                                cellName.appendChild(divName);\n");
      out.write("                                newRow.appendChild(cellName);\n");
      out.write("\n");
      out.write("                                // Zelle für \"Vorname\"\n");
      out.write("                                const cellVorname = document.createElement('td');\n");
      out.write("                                const divVorname = document.createElement('div');\n");
      out.write("                                divVorname.className = 'assignment-value';\n");
      out.write("                                // HIER: Wert sicher als Text setzen\n");
      out.write("                                divVorname.textContent = assignment.vorname || '';\n");
      out.write("                                cellVorname.appendChild(divVorname);\n");
      out.write("                                newRow.appendChild(cellVorname);\n");
      out.write("\n");
      out.write("                                // Zelle für \"Aufwand (PT)\"\n");
      out.write("                                const cellEffort = document.createElement('td');\n");
      out.write("                                const divEffort = document.createElement('div');\n");
      out.write("                                divEffort.className = 'assignment-value';\n");
      out.write("                                // HIER: Wert sicher als Text setzen\n");
      out.write("                                divEffort.textContent = assignment.effort_days ? assignment.effort_days + ' PT' : '';\n");
      out.write("                                cellEffort.appendChild(divEffort);\n");
      out.write("                                newRow.appendChild(cellEffort);\n");
      out.write("\n");
      out.write("                                // Restliche leere Zellen\n");
      out.write("                                newRow.appendChild(document.createElement('td'));\n");
      out.write("                                newRow.appendChild(document.createElement('td'));\n");
      out.write("                                newRow.appendChild(document.createElement('td'));\n");
      out.write("\n");
      out.write("                                // Die fertige Zeile in die Tabelle einfügen\n");
      out.write("                                lastElement.parentNode.insertBefore(newRow, lastElement.nextSibling);\n");
      out.write("                                lastElement = newRow;\n");
      out.write("                            });\n");
      out.write("                        }\n");
      out.write("                    } catch (error) {\n");
      out.write("                        console.error('Fehler beim Laden der Zuweisungen für Task', taskId, ':', error);\n");
      out.write("                        const errorRow = document.createElement('tr');\n");
      out.write("                        errorRow.className = 'task-assignment-row';\n");
      out.write("                        errorRow.innerHTML = `<td colspan=\"8\"><div class=\"task-assignment error\">Fehler beim Laden der Zuweisungen</div></td>`;\n");
      out.write("                        taskElement.parentNode.insertBefore(errorRow, taskElement.nextSibling);\n");
      out.write("                    }\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("    // Initialisierung\n");
      out.write("    //document.addEventListener('DOMContentLoaded', function() {\n");
      out.write("         // saveOriginalValues(); // Speichere ursprüngliche Werte beim Laden\n");
      out.write("         // updateTaskList();\n");
      out.write("         // console.log('Details anzeigen');\n");
      out.write("    document.addEventListener('DOMContentLoaded', function() {\n");
      out.write("        const tableBody = document.querySelector('table tbody');\n");
      out.write("\n");
      out.write("        // Sicherheitsprüfung: Nur fortfahren, wenn der Tabellenkörper gefunden wurde.\n");
      out.write("        if (!tableBody) {\n");
      out.write("            console.error(\"Fehler: Der Tabellenkörper (tbody) wurde nicht gefunden. Das Skript kann nicht ausgeführt werden.\");\n");
      out.write("            return;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        // 1. Ein einziger Klick-Listener für die gesamte Tabelle\n");
      out.write("        console.log('Klick');\n");
      out.write("        tableBody.addEventListener('click', function(event) {\n");
      out.write("            const toggleButton = event.target.closest('.toggle-assignments-btn');\n");
      out.write("\n");
      out.write("            if (!toggleButton) {\n");
      out.write("                return; // Klick war nicht auf den Button\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            const taskRow = toggleButton.closest('.task-item');\n");
      out.write("            if (taskRow) {\n");
      out.write("                toggleTaskAssignments(taskRow, toggleButton);\n");
      out.write("            }\n");
      out.write("        });\n");
      out.write("    });\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("    /**\n");
      out.write("     * Klappt die Zuweisungen für eine Task-Zeile ein oder aus.\n");
      out.write("     */\n");
      out.write("    async function toggleTaskAssignments() {\n");
      out.write("        const toggleButton = event.target.closest('.toggle-assignments-btn');\n");
      out.write("        const taskRow = toggleButton.closest('.task-item');\n");
      out.write("        const taskId = taskRow.dataset.taskId;\n");
      out.write("        if (!taskId) return;\n");
      out.write("\n");
      out.write("        const assignmentRows = document.querySelectorAll(`.task-assignment-row[data-task-parent='");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${taskId}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("']`);\n");
      out.write("\n");
      out.write("        // Fall 1: Zuweisungen sind sichtbar -> ausblenden\n");
      out.write("        console.log('Klick-Info: ', toggleButton.value);\n");
      out.write("        // if (toggleButton.value == '1') {\n");
      out.write("        //     console.log('Schliessen');\n");
      out.write("        //     assignmentRows.forEach(row => row.remove());\n");
      out.write("        //     taskRow.classList.remove('active-task');\n");
      out.write("        //     toggleButton.innerHTML = '▼';\n");
      out.write("        //     toggleButton.value = '0';\n");
      out.write("        //     toggleButton.title = 'Zuweisungen anzeigen';\n");
      out.write("        //     return;\n");
      out.write("        // }\n");
      out.write("        // Wir prüfen, ob die direkt folgende Zeile eine Zuweisungszeile ist.\n");
      out.write("        let nextSibling = taskRow.nextElementSibling;\n");
      out.write("        if (nextSibling && nextSibling.classList.contains('task-assignment-row')) {\n");
      out.write("            // Wenn ja, entfernen wir alle folgenden Zuweisungszeilen, bis keine mehr kommt.\n");
      out.write("            while (nextSibling && nextSibling.classList.contains('task-assignment-row')) {\n");
      out.write("                const rowToRemove = nextSibling;\n");
      out.write("                nextSibling = nextSibling.nextElementSibling; // Wichtig: Zuerst zum nächsten gehen\n");
      out.write("                rowToRemove.remove(); // Dann die aktuelle entfernen\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            // Zustand zurücksetzen\n");
      out.write("            taskRow.classList.remove('active-task');\n");
      out.write("            toggleButton.innerHTML = '▼';\n");
      out.write("            toggleButton.value = '0';\n");
      out.write("            toggleButton.title = 'Zuweisungen anzeigen';\n");
      out.write("            return; // Mission erfüllt, Funktion beenden.\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        // Fall 2: Zuweisungen sind nicht sichtbar -> laden und anzeigen\n");
      out.write("        taskRow.classList.add('active-task');\n");
      out.write("        toggleButton.innerHTML = '▲';\n");
      out.write("        toggleButton.value = '1';\n");
      out.write("        toggleButton.title = 'Zuweisungen ausblenden';\n");
      out.write("\n");
      out.write("        try {\n");
      out.write("            const assignments = await loadTaskAssignments(taskId);\n");
      out.write("            let lastElement = taskRow;\n");
      out.write("\n");
      out.write("            if (assignments && assignments.length > 0) {\n");
      out.write("                assignments.forEach(assignment => {\n");
      out.write("                    const newRow = document.createElement('tr');\n");
      out.write("                    newRow.className = 'task-assignment-row';\n");
      out.write("                    newRow.dataset.taskParent = taskId;\n");
      out.write("\n");
      out.write("                    newRow.appendChild(document.createElement('td'));\n");
      out.write("\n");
      out.write("                    const cellAbteilung = document.createElement('td');\n");
      out.write("                    const divAbteilung = document.createElement('div');\n");
      out.write("                    divAbteilung.className = 'assignment-value';\n");
      out.write("                    divAbteilung.textContent = assignment.abteilung || '';\n");
      out.write("                    cellAbteilung.appendChild(divAbteilung);\n");
      out.write("                    newRow.appendChild(cellAbteilung);\n");
      out.write("\n");
      out.write("                    const cellName = document.createElement('td');\n");
      out.write("                    const divName = document.createElement('div');\n");
      out.write("                    divName.className = 'assignment-value';\n");
      out.write("                    divName.textContent = assignment.name || '';\n");
      out.write("                    cellName.appendChild(divName);\n");
      out.write("                    newRow.appendChild(cellName);\n");
      out.write("\n");
      out.write("                    const cellVorname = document.createElement('td');\n");
      out.write("                    const divVorname = document.createElement('div');\n");
      out.write("                    divVorname.className = 'assignment-value';\n");
      out.write("                    divVorname.textContent = assignment.vorname || '';\n");
      out.write("                    cellVorname.appendChild(divVorname);\n");
      out.write("                    newRow.appendChild(cellVorname);\n");
      out.write("\n");
      out.write("                    const cellEffort = document.createElement('td');\n");
      out.write("                    const divEffort = document.createElement('div');\n");
      out.write("                    divEffort.className = 'assignment-value';\n");
      out.write("                    divEffort.textContent = assignment.effort_days || '';\n");
      out.write("                    cellEffort.appendChild(divEffort);\n");
      out.write("                    newRow.appendChild(cellEffort);\n");
      out.write("\n");
      out.write("                    newRow.appendChild(document.createElement('td'));\n");
      out.write("                    newRow.appendChild(document.createElement('td'));\n");
      out.write("                    newRow.appendChild(document.createElement('td'));\n");
      out.write("\n");
      out.write("                    lastElement.parentNode.insertBefore(newRow, lastElement.nextSibling);\n");
      out.write("                    lastElement = newRow;\n");
      out.write("                });\n");
      out.write("            } else {\n");
      out.write("                const noAssignmentsRow = document.createElement('tr');\n");
      out.write("                noAssignmentsRow.className = 'task-assignment-row';\n");
      out.write("                noAssignmentsRow.dataset.taskParent = taskId;\n");
      out.write("                noAssignmentsRow.innerHTML = `<td colspan=\"8\" style=\"text-align: center; color: #888; font-style: italic; padding: 4px 0;\">Keine Zuweisungen vorhanden</td>`;\n");
      out.write("                lastElement.parentNode.insertBefore(noAssignmentsRow, lastElement.nextSibling);\n");
      out.write("            }\n");
      out.write("        } catch (error) {\n");
      out.write("            console.error(`Fehler beim Laden der Zuweisungen für Task ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${taskId}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(":`, error);\n");
      out.write("            taskRow.classList.remove('active-task');\n");
      out.write("            toggleButton.innerHTML = '▼';\n");
      out.write("            toggleButton.title = 'Zuweisungen anzeigen';\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("\n");
      out.write("\n");
      out.write("</script>\n");
      out.write("<style>\n");
      out.write("    .assigned-users-section {\n");
      out.write("        margin-top: 1.5em;\n");
      out.write("        border-top: 1px solid #ddd;\n");
      out.write("        padding-top: 1em;\n");
      out.write("    }\n");
      out.write("    .assigned-user {\n");
      out.write("        display: flex;\n");
      out.write("        align-items: center;\n");
      out.write("        gap: 1em;\n");
      out.write("        margin: 0.5em 0;\n");
      out.write("        padding: 0.5em;\n");
      out.write("        background: #f5f5f5;\n");
      out.write("        border-radius: 4px;\n");
      out.write("    }\n");
      out.write("    .assigned-user span {\n");
      out.write("        flex-grow: 1;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .task-assignments {\n");
      out.write("        margin-top: 0.5em;\n");
      out.write("        font-size: 0.9em;\n");
      out.write("        color: #666;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .task-assignment {\n");
      out.write("        display: block;\n");
      out.write("        margin: 0.2em 0;\n");
      out.write("        padding-left: 1em;\n");
      out.write("        border-left: 2px solid #e0e0e0;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .task-assignment .effort {\n");
      out.write("        font-weight: bold;\n");
      out.write("        color: #444;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .task-assignment.error {\n");
      out.write("        color: #dc3545;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .assignment-value {\n");
      out.write("        padding: 2px 0;\n");
      out.write("        border-bottom: 1px solid #eee;\n");
      out.write("\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .assignment-value:last-child {\n");
      out.write("        border-bottom: none;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    td .assignment-value {\n");
      out.write("        font-size: 0.9em;\n");
      out.write("        color: #666;\n");
      out.write("        margin: 0 auto;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    td .assignment-value:hover {\n");
      out.write("        background-color: #f8f9fa;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .task-assignment-row td {\n");
      out.write("        padding: 2px 8px; /* Reduziert den vertikalen und horizontalen Abstand in der Zelle */\n");
      out.write("        line-height: 1.2; /* Verringert den Zeilenabstand */\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .task-assignment-row .assignment-value {\n");
      out.write("        font-size: 0.85em; /* Macht die Schrift etwas kleiner */\n");
      out.write("        color: #333;      /* Etwas dunklere Schrift für bessere Lesbarkeit */\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .task-item {\n");
      out.write("        /* cursor: pointer; */ /* Nicht mehr die ganze Zeile ist klickbar */\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* Diese Regel kann bleiben oder entfernt werden, je nach Wunsch */\n");
      out.write("    .task-item:hover {\n");
      out.write("        background-color: #f8f9fa;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* Hebt die aktive Zeile hervor, deren Details angezeigt werden */\n");
      out.write("    .task-item.active-task {\n");
      out.write("        background-color: #e9ecef;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* --- NEU: Styling für den Toggle-Button --- */\n");
      out.write("    .toggle-assignments-btn {\n");
      out.write("        padding: 3px 8px;\n");
      out.write("        line-height: 1;\n");
      out.write("        min-width: 28px; /* Sorgt für eine einheitliche Breite */\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .filter-group {\n");
      out.write("    text-align: left;\n");
      out.write("    /* Optional: Fügen Sie etwas Abstand nach oben hinzu, um es von anderen Elementen zu trennen */\n");
      out.write("    margin-top: 1em;\n");
      out.write("}\n");
      out.write("</style>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fset_005f0(jakarta.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    //  c:set
    org.apache.taglibs.standard.tag.rt.core.SetTag _jspx_th_c_005fset_005f0 = (org.apache.taglibs.standard.tag.rt.core.SetTag) _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fscope_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.SetTag.class);
    boolean _jspx_th_c_005fset_005f0_reused = false;
    try {
      _jspx_th_c_005fset_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fset_005f0.setParent(null);
      // /WEB-INF/tasks.jsp(7,4) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setVar("title");
      // /WEB-INF/tasks.jsp(7,4) name = value type = jakarta.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setValue(new org.apache.jasper.el.JspValueExpression("/WEB-INF/tasks.jsp(7,4) 'Aufgaben'",_jsp_getExpressionFactory().createValueExpression("Aufgaben",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      // /WEB-INF/tasks.jsp(7,4) name = scope type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setScope("request");
      int _jspx_eval_c_005fset_005f0 = _jspx_th_c_005fset_005f0.doStartTag();
      if (_jspx_th_c_005fset_005f0.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fscope_005fnobody.reuse(_jspx_th_c_005fset_005f0);
      _jspx_th_c_005fset_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fset_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fset_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fout_005f0(jakarta.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    //  c:out
    org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f0 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
    boolean _jspx_th_c_005fout_005f0_reused = false;
    try {
      _jspx_th_c_005fout_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f0.setParent(null);
      // /WEB-INF/tasks.jsp(20,73) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f0.setValue((java.lang.Object) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${currentSearch}", java.lang.Object.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      int _jspx_eval_c_005fout_005f0 = _jspx_th_c_005fout_005f0.doStartTag();
      if (_jspx_th_c_005fout_005f0.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f0);
      _jspx_th_c_005fout_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fout_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fout_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fforEach_005f0(jakarta.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    jakarta.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f0 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f0_reused = false;
    try {
      _jspx_th_c_005fforEach_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f0.setParent(null);
      // /WEB-INF/tasks.jsp(23,20) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setVar("status");
      // /WEB-INF/tasks.jsp(23,20) name = items type = jakarta.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/tasks.jsp(23,20) '${taskStatuses}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${taskStatuses}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      int[] _jspx_push_body_count_c_005fforEach_005f0 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f0 = _jspx_th_c_005fforEach_005f0.doStartTag();
        if (_jspx_eval_c_005fforEach_005f0 != jakarta.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\n");
            out.write("                        <option value=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${status.id}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write('"');
            out.write(' ');
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${currentStatusFilter == status.id ? 'selected' : ''}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write(">\n");
            out.write("                            ");
            if (_jspx_meth_c_005fout_005f1(_jspx_th_c_005fforEach_005f0, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f0))
              return true;
            out.write("\n");
            out.write("                        </option>\n");
            out.write("                    ");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f0.doAfterBody();
            if (evalDoAfterBody != jakarta.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f0.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f0[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f0.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f0.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f0);
      _jspx_th_c_005fforEach_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fout_005f1(jakarta.servlet.jsp.tagext.JspTag _jspx_th_c_005fforEach_005f0, jakarta.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f0)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    //  c:out
    org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f1 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
    boolean _jspx_th_c_005fout_005f1_reused = false;
    try {
      _jspx_th_c_005fout_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f1.setParent((jakarta.servlet.jsp.tagext.Tag) _jspx_th_c_005fforEach_005f0);
      // /WEB-INF/tasks.jsp(25,28) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f1.setValue((java.lang.Object) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${status.name}", java.lang.Object.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      int _jspx_eval_c_005fout_005f1 = _jspx_th_c_005fout_005f1.doStartTag();
      if (_jspx_th_c_005fout_005f1.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f1);
      _jspx_th_c_005fout_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fout_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fout_005f1_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fforEach_005f1(jakarta.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    jakarta.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f1 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f1_reused = false;
    try {
      _jspx_th_c_005fforEach_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f1.setParent(null);
      // /WEB-INF/tasks.jsp(53,20) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f1.setVar("task");
      // /WEB-INF/tasks.jsp(53,20) name = items type = jakarta.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f1.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/tasks.jsp(53,20) '${tasks}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${tasks}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      int[] _jspx_push_body_count_c_005fforEach_005f1 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f1 = _jspx_th_c_005fforEach_005f1.doStartTag();
        if (_jspx_eval_c_005fforEach_005f1 != jakarta.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\n");
            out.write("                        <tr class=\"task-item\" data-task-id=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${task.id}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\">\n");
            out.write("                            <td>");
            if (_jspx_meth_c_005fout_005f2(_jspx_th_c_005fforEach_005f1, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f1))
              return true;
            out.write("</td>\n");
            out.write("                            <td>");
            if (_jspx_meth_c_005fout_005f3(_jspx_th_c_005fforEach_005f1, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f1))
              return true;
            out.write("</td>\n");
            out.write("                            <td>");
            if (_jspx_meth_fmt_005fformatDate_005f0(_jspx_th_c_005fforEach_005f1, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f1))
              return true;
            out.write("</td>\n");
            out.write("                            <td>");
            if (_jspx_meth_fmt_005fformatDate_005f1(_jspx_th_c_005fforEach_005f1, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f1))
              return true;
            out.write("</td>\n");
            out.write("                            <td>");
            if (_jspx_meth_c_005fout_005f4(_jspx_th_c_005fforEach_005f1, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f1))
              return true;
            out.write("</td>\n");
            out.write("                            <td>\n");
            out.write("                                ");
            if (_jspx_meth_c_005fif_005f0(_jspx_th_c_005fforEach_005f1, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f1))
              return true;
            out.write("\n");
            out.write("                            </td>\n");
            out.write("                            <td>\n");
            out.write("                                <div style=\"display: flex; align-items: center; gap: 8px;\">\n");
            out.write("                                    <div style=\"width: 100px; background-color: #e9ecef; border: 1px solid #ccc; border-radius: 5px; overflow: hidden;\">\n");
            out.write("                                        <div style=\"width: ");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${task.progress_percent}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("%; background-color: #28a745; height: 18px;\"></div>\n");
            out.write("                                    </div>\n");
            out.write("                                    <span>");
            if (_jspx_meth_c_005fout_005f6(_jspx_th_c_005fforEach_005f1, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f1))
              return true;
            out.write("%</span>\n");
            out.write("                                </div>\n");
            out.write("                            </td>\n");
            out.write("                            <td style=\"display: flex; gap: 5px;\">\n");
            out.write("                                <button type=\"button\" class=\"button small toggle-assignments-btn\" title=\"Zuweisungen anzeigen\" value=\"0\" onclick=\"toggleTaskAssignments()\">▼</button>\n");
            out.write("                                <a href=\"tasks?action=edit&id=");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${task.id}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\" class=\"button small\">Bearbeiten</a>\n");
            out.write("                            </td>\n");
            out.write("                        </tr>\n");
            out.write("                    ");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f1.doAfterBody();
            if (evalDoAfterBody != jakarta.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f1.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f1[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f1.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f1.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f1);
      _jspx_th_c_005fforEach_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f1_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fout_005f2(jakarta.servlet.jsp.tagext.JspTag _jspx_th_c_005fforEach_005f1, jakarta.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f1)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    //  c:out
    org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f2 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
    boolean _jspx_th_c_005fout_005f2_reused = false;
    try {
      _jspx_th_c_005fout_005f2.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f2.setParent((jakarta.servlet.jsp.tagext.Tag) _jspx_th_c_005fforEach_005f1);
      // /WEB-INF/tasks.jsp(55,32) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f2.setValue((java.lang.Object) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${task.name}", java.lang.Object.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      int _jspx_eval_c_005fout_005f2 = _jspx_th_c_005fout_005f2.doStartTag();
      if (_jspx_th_c_005fout_005f2.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f2);
      _jspx_th_c_005fout_005f2_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fout_005f2, _jsp_getInstanceManager(), _jspx_th_c_005fout_005f2_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fout_005f3(jakarta.servlet.jsp.tagext.JspTag _jspx_th_c_005fforEach_005f1, jakarta.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f1)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    //  c:out
    org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f3 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
    boolean _jspx_th_c_005fout_005f3_reused = false;
    try {
      _jspx_th_c_005fout_005f3.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f3.setParent((jakarta.servlet.jsp.tagext.Tag) _jspx_th_c_005fforEach_005f1);
      // /WEB-INF/tasks.jsp(56,32) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f3.setValue((java.lang.Object) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${task.abteilung}", java.lang.Object.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      int _jspx_eval_c_005fout_005f3 = _jspx_th_c_005fout_005f3.doStartTag();
      if (_jspx_th_c_005fout_005f3.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f3);
      _jspx_th_c_005fout_005f3_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fout_005f3, _jsp_getInstanceManager(), _jspx_th_c_005fout_005f3_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fformatDate_005f0(jakarta.servlet.jsp.tagext.JspTag _jspx_th_c_005fforEach_005f1, jakarta.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f1)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    //  fmt:formatDate
    org.apache.taglibs.standard.tag.rt.fmt.FormatDateTag _jspx_th_fmt_005fformatDate_005f0 = (org.apache.taglibs.standard.tag.rt.fmt.FormatDateTag) _005fjspx_005ftagPool_005ffmt_005fformatDate_0026_005fvalue_005ftype_005fpattern_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.FormatDateTag.class);
    boolean _jspx_th_fmt_005fformatDate_005f0_reused = false;
    try {
      _jspx_th_fmt_005fformatDate_005f0.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fformatDate_005f0.setParent((jakarta.servlet.jsp.tagext.Tag) _jspx_th_c_005fforEach_005f1);
      // /WEB-INF/tasks.jsp(57,32) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fformatDate_005f0.setValue((java.util.Date) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${task.start_date}", java.util.Date.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      // /WEB-INF/tasks.jsp(57,32) name = type type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fformatDate_005f0.setType("date");
      // /WEB-INF/tasks.jsp(57,32) name = pattern type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fformatDate_005f0.setPattern("dd.MM.yyyy");
      int _jspx_eval_fmt_005fformatDate_005f0 = _jspx_th_fmt_005fformatDate_005f0.doStartTag();
      if (_jspx_th_fmt_005fformatDate_005f0.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fformatDate_0026_005fvalue_005ftype_005fpattern_005fnobody.reuse(_jspx_th_fmt_005fformatDate_005f0);
      _jspx_th_fmt_005fformatDate_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fformatDate_005f0, _jsp_getInstanceManager(), _jspx_th_fmt_005fformatDate_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fformatDate_005f1(jakarta.servlet.jsp.tagext.JspTag _jspx_th_c_005fforEach_005f1, jakarta.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f1)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    //  fmt:formatDate
    org.apache.taglibs.standard.tag.rt.fmt.FormatDateTag _jspx_th_fmt_005fformatDate_005f1 = (org.apache.taglibs.standard.tag.rt.fmt.FormatDateTag) _005fjspx_005ftagPool_005ffmt_005fformatDate_0026_005fvalue_005ftype_005fpattern_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.FormatDateTag.class);
    boolean _jspx_th_fmt_005fformatDate_005f1_reused = false;
    try {
      _jspx_th_fmt_005fformatDate_005f1.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fformatDate_005f1.setParent((jakarta.servlet.jsp.tagext.Tag) _jspx_th_c_005fforEach_005f1);
      // /WEB-INF/tasks.jsp(58,32) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fformatDate_005f1.setValue((java.util.Date) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${task.end_date}", java.util.Date.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      // /WEB-INF/tasks.jsp(58,32) name = type type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fformatDate_005f1.setType("date");
      // /WEB-INF/tasks.jsp(58,32) name = pattern type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fformatDate_005f1.setPattern("dd.MM.yyyy");
      int _jspx_eval_fmt_005fformatDate_005f1 = _jspx_th_fmt_005fformatDate_005f1.doStartTag();
      if (_jspx_th_fmt_005fformatDate_005f1.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fformatDate_0026_005fvalue_005ftype_005fpattern_005fnobody.reuse(_jspx_th_fmt_005fformatDate_005f1);
      _jspx_th_fmt_005fformatDate_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fformatDate_005f1, _jsp_getInstanceManager(), _jspx_th_fmt_005fformatDate_005f1_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fout_005f4(jakarta.servlet.jsp.tagext.JspTag _jspx_th_c_005fforEach_005f1, jakarta.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f1)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    //  c:out
    org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f4 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
    boolean _jspx_th_c_005fout_005f4_reused = false;
    try {
      _jspx_th_c_005fout_005f4.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f4.setParent((jakarta.servlet.jsp.tagext.Tag) _jspx_th_c_005fforEach_005f1);
      // /WEB-INF/tasks.jsp(59,32) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f4.setValue((java.lang.Object) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${task.effort_days}", java.lang.Object.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      int _jspx_eval_c_005fout_005f4 = _jspx_th_c_005fout_005f4.doStartTag();
      if (_jspx_th_c_005fout_005f4.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f4);
      _jspx_th_c_005fout_005f4_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fout_005f4, _jsp_getInstanceManager(), _jspx_th_c_005fout_005f4_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fif_005f0(jakarta.servlet.jsp.tagext.JspTag _jspx_th_c_005fforEach_005f1, jakarta.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f1)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    jakarta.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f0 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f0_reused = false;
    try {
      _jspx_th_c_005fif_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f0.setParent((jakarta.servlet.jsp.tagext.Tag) _jspx_th_c_005fforEach_005f1);
      // /WEB-INF/tasks.jsp(61,32) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${not empty task.status_name}", boolean.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f0 = _jspx_th_c_005fif_005f0.doStartTag();
      if (_jspx_eval_c_005fif_005f0 != jakarta.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\n");
          out.write("                                    <span style=\"background-color: ");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${not empty task.status_color ? task.status_color : '#FFFFFF'}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("; padding: 3px 10px; border-radius: 999px; border: 1px solid #ccc; font-size: 0.9em;\">\n");
          out.write("                                        ");
          if (_jspx_meth_c_005fout_005f5(_jspx_th_c_005fif_005f0, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f1))
            return true;
          out.write("\n");
          out.write("                                    </span>\n");
          out.write("                                ");
          int evalDoAfterBody = _jspx_th_c_005fif_005f0.doAfterBody();
          if (evalDoAfterBody != jakarta.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f0.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f0);
      _jspx_th_c_005fif_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fout_005f5(jakarta.servlet.jsp.tagext.JspTag _jspx_th_c_005fif_005f0, jakarta.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f1)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    //  c:out
    org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f5 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
    boolean _jspx_th_c_005fout_005f5_reused = false;
    try {
      _jspx_th_c_005fout_005f5.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f5.setParent((jakarta.servlet.jsp.tagext.Tag) _jspx_th_c_005fif_005f0);
      // /WEB-INF/tasks.jsp(63,40) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f5.setValue((java.lang.Object) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${task.status_name}", java.lang.Object.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      int _jspx_eval_c_005fout_005f5 = _jspx_th_c_005fout_005f5.doStartTag();
      if (_jspx_th_c_005fout_005f5.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f5);
      _jspx_th_c_005fout_005f5_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fout_005f5, _jsp_getInstanceManager(), _jspx_th_c_005fout_005f5_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fout_005f6(jakarta.servlet.jsp.tagext.JspTag _jspx_th_c_005fforEach_005f1, jakarta.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f1)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    //  c:out
    org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f6 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
    boolean _jspx_th_c_005fout_005f6_reused = false;
    try {
      _jspx_th_c_005fout_005f6.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f6.setParent((jakarta.servlet.jsp.tagext.Tag) _jspx_th_c_005fforEach_005f1);
      // /WEB-INF/tasks.jsp(72,42) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f6.setValue((java.lang.Object) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${task.progress_percent}", java.lang.Object.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      int _jspx_eval_c_005fout_005f6 = _jspx_th_c_005fout_005f6.doStartTag();
      if (_jspx_th_c_005fout_005f6.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f6);
      _jspx_th_c_005fout_005f6_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fout_005f6, _jsp_getInstanceManager(), _jspx_th_c_005fout_005f6_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fforEach_005f2(jakarta.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    jakarta.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f2 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f2_reused = false;
    try {
      _jspx_th_c_005fforEach_005f2.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f2.setParent(null);
      // /WEB-INF/tasks.jsp(158,32) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f2.setVar("user");
      // /WEB-INF/tasks.jsp(158,32) name = items type = jakarta.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f2.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/tasks.jsp(158,32) '${users}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${users}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      int[] _jspx_push_body_count_c_005fforEach_005f2 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f2 = _jspx_th_c_005fforEach_005f2.doStartTag();
        if (_jspx_eval_c_005fforEach_005f2 != jakarta.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\n");
            out.write("                                    <option value=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${user.id}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write('"');
            out.write('>');
            if (_jspx_meth_c_005fout_005f7(_jspx_th_c_005fforEach_005f2, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f2))
              return true;
            out.write("</option>\n");
            out.write("                                ");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f2.doAfterBody();
            if (evalDoAfterBody != jakarta.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f2.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f2[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f2.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f2.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f2);
      _jspx_th_c_005fforEach_005f2_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f2, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f2_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fout_005f7(jakarta.servlet.jsp.tagext.JspTag _jspx_th_c_005fforEach_005f2, jakarta.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f2)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    //  c:out
    org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f7 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
    boolean _jspx_th_c_005fout_005f7_reused = false;
    try {
      _jspx_th_c_005fout_005f7.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f7.setParent((jakarta.servlet.jsp.tagext.Tag) _jspx_th_c_005fforEach_005f2);
      // /WEB-INF/tasks.jsp(159,63) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f7.setValue((java.lang.Object) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${user.name}, ${user.vorname}", java.lang.Object.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      int _jspx_eval_c_005fout_005f7 = _jspx_th_c_005fout_005f7.doStartTag();
      if (_jspx_th_c_005fout_005f7.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f7);
      _jspx_th_c_005fout_005f7_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fout_005f7, _jsp_getInstanceManager(), _jspx_th_c_005fout_005f7_reused);
    }
    return false;
  }
}
